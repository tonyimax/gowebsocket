// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.26.0
// 	protoc        v3.12.4
// source: ab.proto

package ab

import (
	platform "./com/cw/chess/platform"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

//**********************************AB游戏服务端和服务端通信定义开始********************************
type AB_S_Cmd int32

const (
	AB_S_Cmd_CMD_S_INVALID       AB_S_Cmd = 0
	AB_S_Cmd_CMD_S_PING          AB_S_Cmd = 1
	AB_S_Cmd_CMD_S_PONG          AB_S_Cmd = 2
	AB_S_Cmd_CMD_S_AB_ENTER_REQ  AB_S_Cmd = 3 // 匹配成功通知ab服务准备开始：ABStartRequest
	AB_S_Cmd_CMD_S_AB_ENTER_RESP AB_S_Cmd = 4 // 匹配成功通知ab服务准备开始返回：ABStartResponse
)

// Enum value maps for AB_S_Cmd.
var (
	AB_S_Cmd_name = map[int32]string{
		0: "CMD_S_INVALID",
		1: "CMD_S_PING",
		2: "CMD_S_PONG",
		3: "CMD_S_AB_ENTER_REQ",
		4: "CMD_S_AB_ENTER_RESP",
	}
	AB_S_Cmd_value = map[string]int32{
		"CMD_S_INVALID":       0,
		"CMD_S_PING":          1,
		"CMD_S_PONG":          2,
		"CMD_S_AB_ENTER_REQ":  3,
		"CMD_S_AB_ENTER_RESP": 4,
	}
)

func (x AB_S_Cmd) Enum() *AB_S_Cmd {
	p := new(AB_S_Cmd)
	*p = x
	return p
}

func (x AB_S_Cmd) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AB_S_Cmd) Descriptor() protoreflect.EnumDescriptor {
	return file_ab_proto_enumTypes[0].Descriptor()
}

func (AB_S_Cmd) Type() protoreflect.EnumType {
	return &file_ab_proto_enumTypes[0]
}

func (x AB_S_Cmd) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use AB_S_Cmd.Descriptor instead.
func (AB_S_Cmd) EnumDescriptor() ([]byte, []int) {
	return file_ab_proto_rawDescGZIP(), []int{0}
}

//**********************************AB游戏客户端和服务端通信定义开始********************************
type AB_C_Cmd int32

const (
	AB_C_Cmd_CMD_C_INVALID               AB_C_Cmd = 0
	AB_C_Cmd_CMD_C_GET_TABLE_STATUS_REQ  AB_C_Cmd = 1 // 请求获取游戏数据，此协议应该在客户端资源加载完成后请求（通常为刚进游戏，比如匹配成功/断线重连）MSG_C_COMMON_REQ
	AB_C_Cmd_CMD_C_GET_TABLE_STATUS_RESP AB_C_Cmd = 2 // 回复：MSG_C_GET_TABLE_STATUS_RESP
	// 以下逻辑会在牌局之间循环
	AB_C_Cmd_CMD_C_GAME_READY_3_REQ          AB_C_Cmd = 5  // 无意义
	AB_C_Cmd_CMD_C_GAME_READY_3_RESP         AB_C_Cmd = 6  // 通知客户端N秒后开始：MSG_C_GAME_READY_3_RESP
	AB_C_Cmd_CMD_C_GAME_KEY_REQ              AB_C_Cmd = 7  // 无意义
	AB_C_Cmd_CMD_C_GAME_KEY_RESP             AB_C_Cmd = 8  // 通知客户端key牌：MSG_C_GAME_KEY_RESP
	AB_C_Cmd_CMD_C_GAME_NOTICE_REQ           AB_C_Cmd = 9  // 无意义
	AB_C_Cmd_CMD_C_GAME_NOTICE_RESP          AB_C_Cmd = 10 // 下注开始：MSG_C_GAME_NOTICE_RESP
	AB_C_Cmd_CMD_C_GAME_OPENCARDS_REQ        AB_C_Cmd = 11 // 无意义
	AB_C_Cmd_CMD_C_GAME_OPENCARDS_RESP       AB_C_Cmd = 12 // 发牌：MSG_C_GAME_OPENCARDS_RESP
	AB_C_Cmd_CMD_C_GAME_SETTLE_REQ           AB_C_Cmd = 13 // 无意义
	AB_C_Cmd_CMD_C_GAME_SETTLE_RESP          AB_C_Cmd = 14 // 结算：MSG_C_GAME_SETTLE_RESP
	AB_C_Cmd_CMD_C_GAME_NOTICE_CONITNUE_REQ  AB_C_Cmd = 15 // 无意义
	AB_C_Cmd_CMD_C_GAME_NOTICE_CONITNUE_RESP AB_C_Cmd = 16 // 提示用户现在开始发继续包，否则3秒后踢出
	AB_C_Cmd_CMD_C_GAME_USER_CONTINUE_3_REQ  AB_C_Cmd = 17 // 客户端局没有下注执行退出或者继续：MSG_C_GAME_USER_CONTINUE_3_RESP
	AB_C_Cmd_CMD_C_GAME_USER_CONTINUE_3_RESP AB_C_Cmd = 18 // 无意义：客户端如果退出，自行退出，如果继续，发送完就好了
	AB_C_Cmd_CMD_C_USER_BET_REQ              AB_C_Cmd = 30 // 用户请求下注：MSG_C_USER_BET_REQ
	AB_C_Cmd_CMD_C_USER_BET_RESP             AB_C_Cmd = 31 // 用户请求下注回复：MSG_C_USER_BET_RESP
	AB_C_Cmd_CMD_C_USER_CONTINUE_REQ         AB_C_Cmd = 32 // 用户请求继续：MSG_C_USER_CONTINUE_REQ
	AB_C_Cmd_CMD_C_USER_CONTINUE_RESP        AB_C_Cmd = 33 // 用户请求继续：MSG_C_USER_CONTINUE_RESP
	AB_C_Cmd_CMD_C_USER_BET_OTHER_REQ        AB_C_Cmd = 34 // 无意义
	AB_C_Cmd_CMD_C_USER_BET_OTHER_RESP       AB_C_Cmd = 35 // 其他用户下注广播：MSG_C_USER_BET_OTHER_RESP
)

// Enum value maps for AB_C_Cmd.
var (
	AB_C_Cmd_name = map[int32]string{
		0:  "CMD_C_INVALID",
		1:  "CMD_C_GET_TABLE_STATUS_REQ",
		2:  "CMD_C_GET_TABLE_STATUS_RESP",
		5:  "CMD_C_GAME_READY_3_REQ",
		6:  "CMD_C_GAME_READY_3_RESP",
		7:  "CMD_C_GAME_KEY_REQ",
		8:  "CMD_C_GAME_KEY_RESP",
		9:  "CMD_C_GAME_NOTICE_REQ",
		10: "CMD_C_GAME_NOTICE_RESP",
		11: "CMD_C_GAME_OPENCARDS_REQ",
		12: "CMD_C_GAME_OPENCARDS_RESP",
		13: "CMD_C_GAME_SETTLE_REQ",
		14: "CMD_C_GAME_SETTLE_RESP",
		15: "CMD_C_GAME_NOTICE_CONITNUE_REQ",
		16: "CMD_C_GAME_NOTICE_CONITNUE_RESP",
		17: "CMD_C_GAME_USER_CONTINUE_3_REQ",
		18: "CMD_C_GAME_USER_CONTINUE_3_RESP",
		30: "CMD_C_USER_BET_REQ",
		31: "CMD_C_USER_BET_RESP",
		32: "CMD_C_USER_CONTINUE_REQ",
		33: "CMD_C_USER_CONTINUE_RESP",
		34: "CMD_C_USER_BET_OTHER_REQ",
		35: "CMD_C_USER_BET_OTHER_RESP",
	}
	AB_C_Cmd_value = map[string]int32{
		"CMD_C_INVALID":                   0,
		"CMD_C_GET_TABLE_STATUS_REQ":      1,
		"CMD_C_GET_TABLE_STATUS_RESP":     2,
		"CMD_C_GAME_READY_3_REQ":          5,
		"CMD_C_GAME_READY_3_RESP":         6,
		"CMD_C_GAME_KEY_REQ":              7,
		"CMD_C_GAME_KEY_RESP":             8,
		"CMD_C_GAME_NOTICE_REQ":           9,
		"CMD_C_GAME_NOTICE_RESP":          10,
		"CMD_C_GAME_OPENCARDS_REQ":        11,
		"CMD_C_GAME_OPENCARDS_RESP":       12,
		"CMD_C_GAME_SETTLE_REQ":           13,
		"CMD_C_GAME_SETTLE_RESP":          14,
		"CMD_C_GAME_NOTICE_CONITNUE_REQ":  15,
		"CMD_C_GAME_NOTICE_CONITNUE_RESP": 16,
		"CMD_C_GAME_USER_CONTINUE_3_REQ":  17,
		"CMD_C_GAME_USER_CONTINUE_3_RESP": 18,
		"CMD_C_USER_BET_REQ":              30,
		"CMD_C_USER_BET_RESP":             31,
		"CMD_C_USER_CONTINUE_REQ":         32,
		"CMD_C_USER_CONTINUE_RESP":        33,
		"CMD_C_USER_BET_OTHER_REQ":        34,
		"CMD_C_USER_BET_OTHER_RESP":       35,
	}
)

func (x AB_C_Cmd) Enum() *AB_C_Cmd {
	p := new(AB_C_Cmd)
	*p = x
	return p
}

func (x AB_C_Cmd) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AB_C_Cmd) Descriptor() protoreflect.EnumDescriptor {
	return file_ab_proto_enumTypes[1].Descriptor()
}

func (AB_C_Cmd) Type() protoreflect.EnumType {
	return &file_ab_proto_enumTypes[1]
}

func (x AB_C_Cmd) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use AB_C_Cmd.Descriptor instead.
func (AB_C_Cmd) EnumDescriptor() ([]byte, []int) {
	return file_ab_proto_rawDescGZIP(), []int{1}
}

// 定义游戏阶段
type GamePhase int32

const (
	GamePhase_PHS_INVALID           GamePhase = 0 // 无效
	GamePhase_PHS_Match_Ready       GamePhase = 1 // 准备阶段
	GamePhase_PHS_Game_Deal_KeyCard GamePhase = 2 // 发key
	GamePhase_PHS_Gaming_Bet        GamePhase = 3 // 下注阶段
	GamePhase_PHS_Gaming_Open       GamePhase = 5 // 发牌阶段
	GamePhase_PHS_Game_Settle       GamePhase = 7 // 结算
	GamePhase_PHS_Game_Continue     GamePhase = 8 // 用户确认继续阶段：服务器5秒等待，否则会把没有准备的用户踢出
)

// Enum value maps for GamePhase.
var (
	GamePhase_name = map[int32]string{
		0: "PHS_INVALID",
		1: "PHS_Match_Ready",
		2: "PHS_Game_Deal_KeyCard",
		3: "PHS_Gaming_Bet",
		5: "PHS_Gaming_Open",
		7: "PHS_Game_Settle",
		8: "PHS_Game_Continue",
	}
	GamePhase_value = map[string]int32{
		"PHS_INVALID":           0,
		"PHS_Match_Ready":       1,
		"PHS_Game_Deal_KeyCard": 2,
		"PHS_Gaming_Bet":        3,
		"PHS_Gaming_Open":       5,
		"PHS_Game_Settle":       7,
		"PHS_Game_Continue":     8,
	}
)

func (x GamePhase) Enum() *GamePhase {
	p := new(GamePhase)
	*p = x
	return p
}

func (x GamePhase) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (GamePhase) Descriptor() protoreflect.EnumDescriptor {
	return file_ab_proto_enumTypes[2].Descriptor()
}

func (GamePhase) Type() protoreflect.EnumType {
	return &file_ab_proto_enumTypes[2]
}

func (x GamePhase) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use GamePhase.Descriptor instead.
func (GamePhase) EnumDescriptor() ([]byte, []int) {
	return file_ab_proto_rawDescGZIP(), []int{2}
}

// 这个是匹配服务器告诉AB服务器的请求
type ABStartRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Level uint32             `protobuf:"varint,1,opt,name=level,proto3" json:"level,omitempty"`
	Users *platform.GameUser `protobuf:"bytes,2,opt,name=users,proto3" json:"users,omitempty"`
}

func (x *ABStartRequest) Reset() {
	*x = ABStartRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ab_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ABStartRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ABStartRequest) ProtoMessage() {}

func (x *ABStartRequest) ProtoReflect() protoreflect.Message {
	mi := &file_ab_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ABStartRequest.ProtoReflect.Descriptor instead.
func (*ABStartRequest) Descriptor() ([]byte, []int) {
	return file_ab_proto_rawDescGZIP(), []int{0}
}

func (x *ABStartRequest) GetLevel() uint32 {
	if x != nil {
		return x.Level
	}
	return 0
}

func (x *ABStartRequest) GetUsers() *platform.GameUser {
	if x != nil {
		return x.Users
	}
	return nil
}

// 这个是匹配服务器收到AB服务器的回复
type ABStartResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result  uint32 `protobuf:"varint,1,opt,name=result,proto3" json:"result,omitempty"`                  // 0：成功；
	TableId uint32 `protobuf:"varint,2,opt,name=table_id,json=tableId,proto3" json:"table_id,omitempty"` // table_id：因为一个服务上有很多个桌子以服务多个用户，这里分配好后就告诉匹配服务，匹配服务再把这个tableid和本服务的id告诉客户端
}

func (x *ABStartResponse) Reset() {
	*x = ABStartResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ab_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ABStartResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ABStartResponse) ProtoMessage() {}

func (x *ABStartResponse) ProtoReflect() protoreflect.Message {
	mi := &file_ab_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ABStartResponse.ProtoReflect.Descriptor instead.
func (*ABStartResponse) Descriptor() ([]byte, []int) {
	return file_ab_proto_rawDescGZIP(), []int{1}
}

func (x *ABStartResponse) GetResult() uint32 {
	if x != nil {
		return x.Result
	}
	return 0
}

func (x *ABStartResponse) GetTableId() uint32 {
	if x != nil {
		return x.TableId
	}
	return 0
}

// 通用客户端请求
type MSG_C_COMMON_REQ struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TableId uint32 `protobuf:"varint,1,opt,name=table_id,json=tableId,proto3" json:"table_id,omitempty"`
}

func (x *MSG_C_COMMON_REQ) Reset() {
	*x = MSG_C_COMMON_REQ{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ab_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MSG_C_COMMON_REQ) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MSG_C_COMMON_REQ) ProtoMessage() {}

func (x *MSG_C_COMMON_REQ) ProtoReflect() protoreflect.Message {
	mi := &file_ab_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MSG_C_COMMON_REQ.ProtoReflect.Descriptor instead.
func (*MSG_C_COMMON_REQ) Descriptor() ([]byte, []int) {
	return file_ab_proto_rawDescGZIP(), []int{2}
}

func (x *MSG_C_COMMON_REQ) GetTableId() uint32 {
	if x != nil {
		return x.TableId
	}
	return 0
}

// 通用服务端返回
type MSG_C_COMMON_RESP struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TableId uint32 `protobuf:"varint,1,opt,name=table_id,json=tableId,proto3" json:"table_id,omitempty"`
	Result  uint32 `protobuf:"varint,2,opt,name=result,proto3" json:"result,omitempty"` // 0：正常
}

func (x *MSG_C_COMMON_RESP) Reset() {
	*x = MSG_C_COMMON_RESP{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ab_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MSG_C_COMMON_RESP) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MSG_C_COMMON_RESP) ProtoMessage() {}

func (x *MSG_C_COMMON_RESP) ProtoReflect() protoreflect.Message {
	mi := &file_ab_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MSG_C_COMMON_RESP.ProtoReflect.Descriptor instead.
func (*MSG_C_COMMON_RESP) Descriptor() ([]byte, []int) {
	return file_ab_proto_rawDescGZIP(), []int{3}
}

func (x *MSG_C_COMMON_RESP) GetTableId() uint32 {
	if x != nil {
		return x.TableId
	}
	return 0
}

func (x *MSG_C_COMMON_RESP) GetResult() uint32 {
	if x != nil {
		return x.Result
	}
	return 0
}

// 注：后续所有协议全部采用“tableid+子结构”形式，包括请求和回复
type TableData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TableId uint32 `protobuf:"varint,1,opt,name=table_id,json=tableId,proto3" json:"table_id,omitempty"`
	Data    []byte `protobuf:"bytes,2,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *TableData) Reset() {
	*x = TableData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ab_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TableData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TableData) ProtoMessage() {}

func (x *TableData) ProtoReflect() protoreflect.Message {
	mi := &file_ab_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TableData.ProtoReflect.Descriptor instead.
func (*TableData) Descriptor() ([]byte, []int) {
	return file_ab_proto_rawDescGZIP(), []int{4}
}

func (x *TableData) GetTableId() uint32 {
	if x != nil {
		return x.TableId
	}
	return 0
}

func (x *TableData) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

type Bet_Info struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ander    uint32 `protobuf:"varint,1,opt,name=Ander,proto3" json:"Ander,omitempty"`
	C_1_5    uint32 `protobuf:"varint,2,opt,name=C_1_5,json=C15,proto3" json:"C_1_5,omitempty"`
	C_6_10   uint32 `protobuf:"varint,3,opt,name=C_6_10,json=C610,proto3" json:"C_6_10,omitempty"`
	C_11_15  uint32 `protobuf:"varint,4,opt,name=C_11_15,json=C1115,proto3" json:"C_11_15,omitempty"`
	C_16_25  uint32 `protobuf:"varint,5,opt,name=C_16_25,json=C1625,proto3" json:"C_16_25,omitempty"`
	C_26_30  uint32 `protobuf:"varint,6,opt,name=C_26_30,json=C2630,proto3" json:"C_26_30,omitempty"`
	C_31_35  uint32 `protobuf:"varint,7,opt,name=C_31_35,json=C3135,proto3" json:"C_31_35,omitempty"`
	C_36_40  uint32 `protobuf:"varint,8,opt,name=C_36_40,json=C3640,proto3" json:"C_36_40,omitempty"`
	C_41More uint32 `protobuf:"varint,9,opt,name=C_41more,json=C41more,proto3" json:"C_41more,omitempty"`
	Bahar    uint32 `protobuf:"varint,10,opt,name=Bahar,proto3" json:"Bahar,omitempty"`
}

func (x *Bet_Info) Reset() {
	*x = Bet_Info{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ab_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Bet_Info) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Bet_Info) ProtoMessage() {}

func (x *Bet_Info) ProtoReflect() protoreflect.Message {
	mi := &file_ab_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Bet_Info.ProtoReflect.Descriptor instead.
func (*Bet_Info) Descriptor() ([]byte, []int) {
	return file_ab_proto_rawDescGZIP(), []int{5}
}

func (x *Bet_Info) GetAnder() uint32 {
	if x != nil {
		return x.Ander
	}
	return 0
}

func (x *Bet_Info) GetC_1_5() uint32 {
	if x != nil {
		return x.C_1_5
	}
	return 0
}

func (x *Bet_Info) GetC_6_10() uint32 {
	if x != nil {
		return x.C_6_10
	}
	return 0
}

func (x *Bet_Info) GetC_11_15() uint32 {
	if x != nil {
		return x.C_11_15
	}
	return 0
}

func (x *Bet_Info) GetC_16_25() uint32 {
	if x != nil {
		return x.C_16_25
	}
	return 0
}

func (x *Bet_Info) GetC_26_30() uint32 {
	if x != nil {
		return x.C_26_30
	}
	return 0
}

func (x *Bet_Info) GetC_31_35() uint32 {
	if x != nil {
		return x.C_31_35
	}
	return 0
}

func (x *Bet_Info) GetC_36_40() uint32 {
	if x != nil {
		return x.C_36_40
	}
	return 0
}

func (x *Bet_Info) GetC_41More() uint32 {
	if x != nil {
		return x.C_41More
	}
	return 0
}

func (x *Bet_Info) GetBahar() uint32 {
	if x != nil {
		return x.Bahar
	}
	return 0
}

type MSG_C_GET_TABLE_STATUS_RESP struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LevelDesc     *platform.ABLevelDesc `protobuf:"bytes,1,opt,name=level_desc,json=levelDesc,proto3" json:"level_desc,omitempty"`
	Chip          []uint32              `protobuf:"varint,2,rep,packed,name=chip,proto3" json:"chip,omitempty"`                                                    // 使用的筹码种类：例如1/5/10/50/100
	GamePhase     GamePhase             `protobuf:"varint,3,opt,name=game_phase,json=gamePhase,proto3,enum=com.cw.chess.ab.GamePhase" json:"game_phase,omitempty"` // 游戏阶段
	PlayersSize   uint32                `protobuf:"varint,4,opt,name=players_size,json=playersSize,proto3" json:"players_size,omitempty"`                          // 用户数量
	Key           uint32                `protobuf:"varint,5,opt,name=Key,proto3" json:"Key,omitempty"`                                                             // key牌
	SelfBet       *Bet_Info             `protobuf:"bytes,6,opt,name=self_bet,json=selfBet,proto3" json:"self_bet,omitempty"`                                       // 自己下注
	AllBet        *Bet_Info             `protobuf:"bytes,7,opt,name=all_bet,json=allBet,proto3" json:"all_bet,omitempty"`                                          // 所有用户下注
	Cards         []uint32              `protobuf:"varint,8,rep,packed,name=cards,proto3" json:"cards,omitempty"`                                                  // 发出的牌：发牌是一次会把所有牌全部发出来，客户端依次表现，表现时间为：数量*1秒
	LastTimeCards uint32                `protobuf:"varint,9,opt,name=last_time_cards,json=lastTimeCards,proto3" json:"last_time_cards,omitempty"`                  // 发牌已经过了的时间：例如cards数量为10，已过时间为3，那么客户端从第3张牌开始播放
	HistroyResult []uint32              `protobuf:"varint,10,rep,packed,name=histroy_result,json=histroyResult,proto3" json:"histroy_result,omitempty"`            // 历史记录胜负
	Histroy_C     []uint32              `protobuf:"varint,11,rep,packed,name=histroy_C,json=histroyC,proto3" json:"histroy_C,omitempty"`                           // 历史记录key
	GameId        string                `protobuf:"bytes,12,opt,name=game_id,json=gameId,proto3" json:"game_id,omitempty"`                                         // 如果game_phase=PHS_Match_Ready，那么该值无意义
	ChipTemplete  uint32                `protobuf:"varint,13,opt,name=chip_templete,json=chipTemplete,proto3" json:"chip_templete,omitempty"`                      // 使用筹码的模板：1/2/3，和数据库保持一致
	HistroyKey    []uint32              `protobuf:"varint,14,rep,packed,name=histroy_key,json=histroyKey,proto3" json:"histroy_key,omitempty"`                     // 历史记录key
}

func (x *MSG_C_GET_TABLE_STATUS_RESP) Reset() {
	*x = MSG_C_GET_TABLE_STATUS_RESP{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ab_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MSG_C_GET_TABLE_STATUS_RESP) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MSG_C_GET_TABLE_STATUS_RESP) ProtoMessage() {}

func (x *MSG_C_GET_TABLE_STATUS_RESP) ProtoReflect() protoreflect.Message {
	mi := &file_ab_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MSG_C_GET_TABLE_STATUS_RESP.ProtoReflect.Descriptor instead.
func (*MSG_C_GET_TABLE_STATUS_RESP) Descriptor() ([]byte, []int) {
	return file_ab_proto_rawDescGZIP(), []int{6}
}

func (x *MSG_C_GET_TABLE_STATUS_RESP) GetLevelDesc() *platform.ABLevelDesc {
	if x != nil {
		return x.LevelDesc
	}
	return nil
}

func (x *MSG_C_GET_TABLE_STATUS_RESP) GetChip() []uint32 {
	if x != nil {
		return x.Chip
	}
	return nil
}

func (x *MSG_C_GET_TABLE_STATUS_RESP) GetGamePhase() GamePhase {
	if x != nil {
		return x.GamePhase
	}
	return GamePhase_PHS_INVALID
}

func (x *MSG_C_GET_TABLE_STATUS_RESP) GetPlayersSize() uint32 {
	if x != nil {
		return x.PlayersSize
	}
	return 0
}

func (x *MSG_C_GET_TABLE_STATUS_RESP) GetKey() uint32 {
	if x != nil {
		return x.Key
	}
	return 0
}

func (x *MSG_C_GET_TABLE_STATUS_RESP) GetSelfBet() *Bet_Info {
	if x != nil {
		return x.SelfBet
	}
	return nil
}

func (x *MSG_C_GET_TABLE_STATUS_RESP) GetAllBet() *Bet_Info {
	if x != nil {
		return x.AllBet
	}
	return nil
}

func (x *MSG_C_GET_TABLE_STATUS_RESP) GetCards() []uint32 {
	if x != nil {
		return x.Cards
	}
	return nil
}

func (x *MSG_C_GET_TABLE_STATUS_RESP) GetLastTimeCards() uint32 {
	if x != nil {
		return x.LastTimeCards
	}
	return 0
}

func (x *MSG_C_GET_TABLE_STATUS_RESP) GetHistroyResult() []uint32 {
	if x != nil {
		return x.HistroyResult
	}
	return nil
}

func (x *MSG_C_GET_TABLE_STATUS_RESP) GetHistroy_C() []uint32 {
	if x != nil {
		return x.Histroy_C
	}
	return nil
}

func (x *MSG_C_GET_TABLE_STATUS_RESP) GetGameId() string {
	if x != nil {
		return x.GameId
	}
	return ""
}

func (x *MSG_C_GET_TABLE_STATUS_RESP) GetChipTemplete() uint32 {
	if x != nil {
		return x.ChipTemplete
	}
	return 0
}

func (x *MSG_C_GET_TABLE_STATUS_RESP) GetHistroyKey() []uint32 {
	if x != nil {
		return x.HistroyKey
	}
	return nil
}

type MSG_C_GAME_READY_3_RESP struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Times uint32 `protobuf:"varint,1,opt,name=times,proto3" json:"times,omitempty"` // 多久后开始
}

func (x *MSG_C_GAME_READY_3_RESP) Reset() {
	*x = MSG_C_GAME_READY_3_RESP{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ab_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MSG_C_GAME_READY_3_RESP) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MSG_C_GAME_READY_3_RESP) ProtoMessage() {}

func (x *MSG_C_GAME_READY_3_RESP) ProtoReflect() protoreflect.Message {
	mi := &file_ab_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MSG_C_GAME_READY_3_RESP.ProtoReflect.Descriptor instead.
func (*MSG_C_GAME_READY_3_RESP) Descriptor() ([]byte, []int) {
	return file_ab_proto_rawDescGZIP(), []int{7}
}

func (x *MSG_C_GAME_READY_3_RESP) GetTimes() uint32 {
	if x != nil {
		return x.Times
	}
	return 0
}

type MSG_C_GAME_KEY_RESP struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	KeyCard uint32 `protobuf:"varint,1,opt,name=key_card,json=keyCard,proto3" json:"key_card,omitempty"`
	GameId  string `protobuf:"bytes,2,opt,name=game_id,json=gameId,proto3" json:"game_id,omitempty"` // 牌局id
}

func (x *MSG_C_GAME_KEY_RESP) Reset() {
	*x = MSG_C_GAME_KEY_RESP{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ab_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MSG_C_GAME_KEY_RESP) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MSG_C_GAME_KEY_RESP) ProtoMessage() {}

func (x *MSG_C_GAME_KEY_RESP) ProtoReflect() protoreflect.Message {
	mi := &file_ab_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MSG_C_GAME_KEY_RESP.ProtoReflect.Descriptor instead.
func (*MSG_C_GAME_KEY_RESP) Descriptor() ([]byte, []int) {
	return file_ab_proto_rawDescGZIP(), []int{8}
}

func (x *MSG_C_GAME_KEY_RESP) GetKeyCard() uint32 {
	if x != nil {
		return x.KeyCard
	}
	return 0
}

func (x *MSG_C_GAME_KEY_RESP) GetGameId() string {
	if x != nil {
		return x.GameId
	}
	return ""
}

type MSG_C_GAME_NOTICE_RESP struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Times uint32 `protobuf:"varint,1,opt,name=times,proto3" json:"times,omitempty"` // 下注时间
}

func (x *MSG_C_GAME_NOTICE_RESP) Reset() {
	*x = MSG_C_GAME_NOTICE_RESP{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ab_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MSG_C_GAME_NOTICE_RESP) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MSG_C_GAME_NOTICE_RESP) ProtoMessage() {}

func (x *MSG_C_GAME_NOTICE_RESP) ProtoReflect() protoreflect.Message {
	mi := &file_ab_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MSG_C_GAME_NOTICE_RESP.ProtoReflect.Descriptor instead.
func (*MSG_C_GAME_NOTICE_RESP) Descriptor() ([]byte, []int) {
	return file_ab_proto_rawDescGZIP(), []int{9}
}

func (x *MSG_C_GAME_NOTICE_RESP) GetTimes() uint32 {
	if x != nil {
		return x.Times
	}
	return 0
}

type MSG_C_GAME_OPENCARDS_RESP struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cards []uint32 `protobuf:"varint,1,rep,packed,name=cards,proto3" json:"cards,omitempty"`
	Times uint32   `protobuf:"varint,2,opt,name=times,proto3" json:"times,omitempty"` // 发牌时间：目前假设每张牌时间为1秒，所以实际上时间=牌数量*1（以后可能会调整该算法：例如10*1+0.5*x）
}

func (x *MSG_C_GAME_OPENCARDS_RESP) Reset() {
	*x = MSG_C_GAME_OPENCARDS_RESP{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ab_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MSG_C_GAME_OPENCARDS_RESP) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MSG_C_GAME_OPENCARDS_RESP) ProtoMessage() {}

func (x *MSG_C_GAME_OPENCARDS_RESP) ProtoReflect() protoreflect.Message {
	mi := &file_ab_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MSG_C_GAME_OPENCARDS_RESP.ProtoReflect.Descriptor instead.
func (*MSG_C_GAME_OPENCARDS_RESP) Descriptor() ([]byte, []int) {
	return file_ab_proto_rawDescGZIP(), []int{10}
}

func (x *MSG_C_GAME_OPENCARDS_RESP) GetCards() []uint32 {
	if x != nil {
		return x.Cards
	}
	return nil
}

func (x *MSG_C_GAME_OPENCARDS_RESP) GetTimes() uint32 {
	if x != nil {
		return x.Times
	}
	return 0
}

type MSG_C_GAME_SETTLE_RESP struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserSettle    *Bet_Info `protobuf:"bytes,1,opt,name=user_settle,json=userSettle,proto3" json:"user_settle,omitempty"`          // 自己的输赢，这个赢是指买中的钱
	FinallyResult *Bet_Info `protobuf:"bytes,2,opt,name=finally_result,json=finallyResult,proto3" json:"finally_result,omitempty"` //  Bet_Info中赢的设置为1，其他为0
	Currency      int32     `protobuf:"varint,3,opt,name=currency,proto3" json:"currency,omitempty"`                               // 输赢的和，这个输赢是指用户所有区域赢的钱减去所有区域下注的钱的和,这个正负代表输赢
}

func (x *MSG_C_GAME_SETTLE_RESP) Reset() {
	*x = MSG_C_GAME_SETTLE_RESP{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ab_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MSG_C_GAME_SETTLE_RESP) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MSG_C_GAME_SETTLE_RESP) ProtoMessage() {}

func (x *MSG_C_GAME_SETTLE_RESP) ProtoReflect() protoreflect.Message {
	mi := &file_ab_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MSG_C_GAME_SETTLE_RESP.ProtoReflect.Descriptor instead.
func (*MSG_C_GAME_SETTLE_RESP) Descriptor() ([]byte, []int) {
	return file_ab_proto_rawDescGZIP(), []int{11}
}

func (x *MSG_C_GAME_SETTLE_RESP) GetUserSettle() *Bet_Info {
	if x != nil {
		return x.UserSettle
	}
	return nil
}

func (x *MSG_C_GAME_SETTLE_RESP) GetFinallyResult() *Bet_Info {
	if x != nil {
		return x.FinallyResult
	}
	return nil
}

func (x *MSG_C_GAME_SETTLE_RESP) GetCurrency() int32 {
	if x != nil {
		return x.Currency
	}
	return 0
}

type MSG_C_USER_BET_REQ struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserBet *Bet_Info `protobuf:"bytes,1,opt,name=user_bet,json=userBet,proto3" json:"user_bet,omitempty"` // 用户一次点击
}

func (x *MSG_C_USER_BET_REQ) Reset() {
	*x = MSG_C_USER_BET_REQ{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ab_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MSG_C_USER_BET_REQ) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MSG_C_USER_BET_REQ) ProtoMessage() {}

func (x *MSG_C_USER_BET_REQ) ProtoReflect() protoreflect.Message {
	mi := &file_ab_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MSG_C_USER_BET_REQ.ProtoReflect.Descriptor instead.
func (*MSG_C_USER_BET_REQ) Descriptor() ([]byte, []int) {
	return file_ab_proto_rawDescGZIP(), []int{12}
}

func (x *MSG_C_USER_BET_REQ) GetUserBet() *Bet_Info {
	if x != nil {
		return x.UserBet
	}
	return nil
}

type MSG_C_USER_BET_RESP struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result         uint32    `protobuf:"varint,1,opt,name=result,proto3" json:"result,omitempty"`                                        // 请求结果：0：成功；10：余额不够；11：已达到封顶AB为（1-100倍），12：其他为20倍封顶；13：用户所有下注超过100倍
	UserBet        *Bet_Info `protobuf:"bytes,2,opt,name=user_bet,json=userBet,proto3" json:"user_bet,omitempty"`                        // 最近一次请求结果
	UserBetAll     *Bet_Info `protobuf:"bytes,3,opt,name=user_bet_all,json=userBetAll,proto3" json:"user_bet_all,omitempty"`             // 用户全部下注
	AllUserBetAll  *Bet_Info `protobuf:"bytes,4,opt,name=all_user_bet_all,json=allUserBetAll,proto3" json:"all_user_bet_all,omitempty"`  // 所有用户累积下注
	TipsErrorNum   uint32    `protobuf:"varint,5,opt,name=tips_error_num,json=tipsErrorNum,proto3" json:"tips_error_num,omitempty"`      // 0：无错误；1：ander区域限制；2：bahar限制；3：1-5限制；4：6-10限制；5：11-15限制；6：16-25限制；7：26-30限制；8：31-35限制；9：36-40限制；10：41+限制；
	TipsLimitValue *Bet_Info `protobuf:"bytes,6,opt,name=tips_limit_value,json=tipsLimitValue,proto3" json:"tips_limit_value,omitempty"` // 这里限制的具体值
}

func (x *MSG_C_USER_BET_RESP) Reset() {
	*x = MSG_C_USER_BET_RESP{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ab_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MSG_C_USER_BET_RESP) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MSG_C_USER_BET_RESP) ProtoMessage() {}

func (x *MSG_C_USER_BET_RESP) ProtoReflect() protoreflect.Message {
	mi := &file_ab_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MSG_C_USER_BET_RESP.ProtoReflect.Descriptor instead.
func (*MSG_C_USER_BET_RESP) Descriptor() ([]byte, []int) {
	return file_ab_proto_rawDescGZIP(), []int{13}
}

func (x *MSG_C_USER_BET_RESP) GetResult() uint32 {
	if x != nil {
		return x.Result
	}
	return 0
}

func (x *MSG_C_USER_BET_RESP) GetUserBet() *Bet_Info {
	if x != nil {
		return x.UserBet
	}
	return nil
}

func (x *MSG_C_USER_BET_RESP) GetUserBetAll() *Bet_Info {
	if x != nil {
		return x.UserBetAll
	}
	return nil
}

func (x *MSG_C_USER_BET_RESP) GetAllUserBetAll() *Bet_Info {
	if x != nil {
		return x.AllUserBetAll
	}
	return nil
}

func (x *MSG_C_USER_BET_RESP) GetTipsErrorNum() uint32 {
	if x != nil {
		return x.TipsErrorNum
	}
	return 0
}

func (x *MSG_C_USER_BET_RESP) GetTipsLimitValue() *Bet_Info {
	if x != nil {
		return x.TipsLimitValue
	}
	return nil
}

type MSG_C_USER_CONTINUE_REQ struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BContinue uint32 `protobuf:"varint,1,opt,name=b_continue,json=bContinue,proto3" json:"b_continue,omitempty"` // 0：继续
}

func (x *MSG_C_USER_CONTINUE_REQ) Reset() {
	*x = MSG_C_USER_CONTINUE_REQ{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ab_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MSG_C_USER_CONTINUE_REQ) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MSG_C_USER_CONTINUE_REQ) ProtoMessage() {}

func (x *MSG_C_USER_CONTINUE_REQ) ProtoReflect() protoreflect.Message {
	mi := &file_ab_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MSG_C_USER_CONTINUE_REQ.ProtoReflect.Descriptor instead.
func (*MSG_C_USER_CONTINUE_REQ) Descriptor() ([]byte, []int) {
	return file_ab_proto_rawDescGZIP(), []int{14}
}

func (x *MSG_C_USER_CONTINUE_REQ) GetBContinue() uint32 {
	if x != nil {
		return x.BContinue
	}
	return 0
}

type MSG_C_GAME_USER_CONTINUE_3_RESP struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BContinue uint32 `protobuf:"varint,1,opt,name=b_continue,json=bContinue,proto3" json:"b_continue,omitempty"` // 0：继续，1：退出
}

func (x *MSG_C_GAME_USER_CONTINUE_3_RESP) Reset() {
	*x = MSG_C_GAME_USER_CONTINUE_3_RESP{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ab_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MSG_C_GAME_USER_CONTINUE_3_RESP) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MSG_C_GAME_USER_CONTINUE_3_RESP) ProtoMessage() {}

func (x *MSG_C_GAME_USER_CONTINUE_3_RESP) ProtoReflect() protoreflect.Message {
	mi := &file_ab_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MSG_C_GAME_USER_CONTINUE_3_RESP.ProtoReflect.Descriptor instead.
func (*MSG_C_GAME_USER_CONTINUE_3_RESP) Descriptor() ([]byte, []int) {
	return file_ab_proto_rawDescGZIP(), []int{15}
}

func (x *MSG_C_GAME_USER_CONTINUE_3_RESP) GetBContinue() uint32 {
	if x != nil {
		return x.BContinue
	}
	return 0
}

type MSG_C_USER_CONTINUE_RESP struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result      uint32 `protobuf:"varint,1,opt,name=result,proto3" json:"result,omitempty"`                              // 0：成功；103：某用户余额不够；10：因为用户连续10次没有下注，所以踢出房间
	PlayersSize uint32 `protobuf:"varint,2,opt,name=players_size,json=playersSize,proto3" json:"players_size,omitempty"` // 用户数量
}

func (x *MSG_C_USER_CONTINUE_RESP) Reset() {
	*x = MSG_C_USER_CONTINUE_RESP{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ab_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MSG_C_USER_CONTINUE_RESP) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MSG_C_USER_CONTINUE_RESP) ProtoMessage() {}

func (x *MSG_C_USER_CONTINUE_RESP) ProtoReflect() protoreflect.Message {
	mi := &file_ab_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MSG_C_USER_CONTINUE_RESP.ProtoReflect.Descriptor instead.
func (*MSG_C_USER_CONTINUE_RESP) Descriptor() ([]byte, []int) {
	return file_ab_proto_rawDescGZIP(), []int{16}
}

func (x *MSG_C_USER_CONTINUE_RESP) GetResult() uint32 {
	if x != nil {
		return x.Result
	}
	return 0
}

func (x *MSG_C_USER_CONTINUE_RESP) GetPlayersSize() uint32 {
	if x != nil {
		return x.PlayersSize
	}
	return 0
}

type MSG_C_USER_BET_OTHER_RESP struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GameUser      *platform.GameUser `protobuf:"bytes,1,opt,name=game_user,json=gameUser,proto3" json:"game_user,omitempty"`                    // 用户信息
	UserBet       *Bet_Info          `protobuf:"bytes,2,opt,name=user_bet,json=userBet,proto3" json:"user_bet,omitempty"`                       // 最近一次请求结果
	UserBetAll    *Bet_Info          `protobuf:"bytes,3,opt,name=user_bet_all,json=userBetAll,proto3" json:"user_bet_all,omitempty"`            // 单个用户累计下注
	AllUserBetAll *Bet_Info          `protobuf:"bytes,4,opt,name=all_user_bet_all,json=allUserBetAll,proto3" json:"all_user_bet_all,omitempty"` // 所有用户累积下注
}

func (x *MSG_C_USER_BET_OTHER_RESP) Reset() {
	*x = MSG_C_USER_BET_OTHER_RESP{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ab_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MSG_C_USER_BET_OTHER_RESP) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MSG_C_USER_BET_OTHER_RESP) ProtoMessage() {}

func (x *MSG_C_USER_BET_OTHER_RESP) ProtoReflect() protoreflect.Message {
	mi := &file_ab_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MSG_C_USER_BET_OTHER_RESP.ProtoReflect.Descriptor instead.
func (*MSG_C_USER_BET_OTHER_RESP) Descriptor() ([]byte, []int) {
	return file_ab_proto_rawDescGZIP(), []int{17}
}

func (x *MSG_C_USER_BET_OTHER_RESP) GetGameUser() *platform.GameUser {
	if x != nil {
		return x.GameUser
	}
	return nil
}

func (x *MSG_C_USER_BET_OTHER_RESP) GetUserBet() *Bet_Info {
	if x != nil {
		return x.UserBet
	}
	return nil
}

func (x *MSG_C_USER_BET_OTHER_RESP) GetUserBetAll() *Bet_Info {
	if x != nil {
		return x.UserBetAll
	}
	return nil
}

func (x *MSG_C_USER_BET_OTHER_RESP) GetAllUserBetAll() *Bet_Info {
	if x != nil {
		return x.AllUserBetAll
	}
	return nil
}

var File_ab_proto protoreflect.FileDescriptor

var file_ab_proto_rawDesc = []byte{
	0x0a, 0x08, 0x61, 0x62, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0f, 0x63, 0x6f, 0x6d, 0x2e,
	0x63, 0x77, 0x2e, 0x63, 0x68, 0x65, 0x73, 0x73, 0x2e, 0x61, 0x62, 0x1a, 0x0e, 0x70, 0x6c, 0x61,
	0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x5d, 0x0a, 0x0e, 0x41,
	0x42, 0x53, 0x74, 0x61, 0x72, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a,
	0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x6c, 0x65,
	0x76, 0x65, 0x6c, 0x12, 0x35, 0x0a, 0x05, 0x75, 0x73, 0x65, 0x72, 0x73, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x77, 0x2e, 0x63, 0x68, 0x65, 0x73,
	0x73, 0x2e, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x47, 0x61, 0x6d, 0x65, 0x55,
	0x73, 0x65, 0x72, 0x52, 0x05, 0x75, 0x73, 0x65, 0x72, 0x73, 0x22, 0x44, 0x0a, 0x0f, 0x41, 0x42,
	0x53, 0x74, 0x61, 0x72, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x16, 0x0a,
	0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x72,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x49, 0x64,
	0x22, 0x2d, 0x0a, 0x10, 0x4d, 0x53, 0x47, 0x5f, 0x43, 0x5f, 0x43, 0x4f, 0x4d, 0x4d, 0x4f, 0x4e,
	0x5f, 0x52, 0x45, 0x51, 0x12, 0x19, 0x0a, 0x08, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x49, 0x64, 0x22,
	0x46, 0x0a, 0x11, 0x4d, 0x53, 0x47, 0x5f, 0x43, 0x5f, 0x43, 0x4f, 0x4d, 0x4d, 0x4f, 0x4e, 0x5f,
	0x52, 0x45, 0x53, 0x50, 0x12, 0x19, 0x0a, 0x08, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x49, 0x64, 0x12,
	0x16, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x3a, 0x0a, 0x09, 0x54, 0x61, 0x62, 0x6c, 0x65,
	0x44, 0x61, 0x74, 0x61, 0x12, 0x19, 0x0a, 0x08, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x49, 0x64, 0x12,
	0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x64,
	0x61, 0x74, 0x61, 0x22, 0xf3, 0x01, 0x0a, 0x08, 0x42, 0x65, 0x74, 0x5f, 0x49, 0x6e, 0x66, 0x6f,
	0x12, 0x14, 0x0a, 0x05, 0x41, 0x6e, 0x64, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x05, 0x41, 0x6e, 0x64, 0x65, 0x72, 0x12, 0x12, 0x0a, 0x05, 0x43, 0x5f, 0x31, 0x5f, 0x35, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x43, 0x31, 0x35, 0x12, 0x14, 0x0a, 0x06, 0x43, 0x5f,
	0x36, 0x5f, 0x31, 0x30, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x43, 0x36, 0x31, 0x30,
	0x12, 0x16, 0x0a, 0x07, 0x43, 0x5f, 0x31, 0x31, 0x5f, 0x31, 0x35, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x05, 0x43, 0x31, 0x31, 0x31, 0x35, 0x12, 0x16, 0x0a, 0x07, 0x43, 0x5f, 0x31, 0x36,
	0x5f, 0x32, 0x35, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x43, 0x31, 0x36, 0x32, 0x35,
	0x12, 0x16, 0x0a, 0x07, 0x43, 0x5f, 0x32, 0x36, 0x5f, 0x33, 0x30, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x05, 0x43, 0x32, 0x36, 0x33, 0x30, 0x12, 0x16, 0x0a, 0x07, 0x43, 0x5f, 0x33, 0x31,
	0x5f, 0x33, 0x35, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x43, 0x33, 0x31, 0x33, 0x35,
	0x12, 0x16, 0x0a, 0x07, 0x43, 0x5f, 0x33, 0x36, 0x5f, 0x34, 0x30, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x05, 0x43, 0x33, 0x36, 0x34, 0x30, 0x12, 0x19, 0x0a, 0x08, 0x43, 0x5f, 0x34, 0x31,
	0x6d, 0x6f, 0x72, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x43, 0x34, 0x31, 0x6d,
	0x6f, 0x72, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x42, 0x61, 0x68, 0x61, 0x72, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x05, 0x42, 0x61, 0x68, 0x61, 0x72, 0x22, 0xaf, 0x04, 0x0a, 0x1b, 0x4d, 0x53,
	0x47, 0x5f, 0x43, 0x5f, 0x47, 0x45, 0x54, 0x5f, 0x54, 0x41, 0x42, 0x4c, 0x45, 0x5f, 0x53, 0x54,
	0x41, 0x54, 0x55, 0x53, 0x5f, 0x52, 0x45, 0x53, 0x50, 0x12, 0x41, 0x0a, 0x0a, 0x6c, 0x65, 0x76,
	0x65, 0x6c, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e,
	0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x77, 0x2e, 0x63, 0x68, 0x65, 0x73, 0x73, 0x2e, 0x70, 0x6c, 0x61,
	0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x41, 0x42, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x44, 0x65, 0x73,
	0x63, 0x52, 0x09, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x44, 0x65, 0x73, 0x63, 0x12, 0x12, 0x0a, 0x04,
	0x63, 0x68, 0x69, 0x70, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x04, 0x63, 0x68, 0x69, 0x70,
	0x12, 0x39, 0x0a, 0x0a, 0x67, 0x61, 0x6d, 0x65, 0x5f, 0x70, 0x68, 0x61, 0x73, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x1a, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x77, 0x2e, 0x63, 0x68,
	0x65, 0x73, 0x73, 0x2e, 0x61, 0x62, 0x2e, 0x47, 0x61, 0x6d, 0x65, 0x50, 0x68, 0x61, 0x73, 0x65,
	0x52, 0x09, 0x67, 0x61, 0x6d, 0x65, 0x50, 0x68, 0x61, 0x73, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x70,
	0x6c, 0x61, 0x79, 0x65, 0x72, 0x73, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x0b, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x73, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x10,
	0x0a, 0x03, 0x4b, 0x65, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x4b, 0x65, 0x79,
	0x12, 0x34, 0x0a, 0x08, 0x73, 0x65, 0x6c, 0x66, 0x5f, 0x62, 0x65, 0x74, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x19, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x77, 0x2e, 0x63, 0x68, 0x65, 0x73,
	0x73, 0x2e, 0x61, 0x62, 0x2e, 0x42, 0x65, 0x74, 0x5f, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x07, 0x73,
	0x65, 0x6c, 0x66, 0x42, 0x65, 0x74, 0x12, 0x32, 0x0a, 0x07, 0x61, 0x6c, 0x6c, 0x5f, 0x62, 0x65,
	0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x77,
	0x2e, 0x63, 0x68, 0x65, 0x73, 0x73, 0x2e, 0x61, 0x62, 0x2e, 0x42, 0x65, 0x74, 0x5f, 0x49, 0x6e,
	0x66, 0x6f, 0x52, 0x06, 0x61, 0x6c, 0x6c, 0x42, 0x65, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x61,
	0x72, 0x64, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x05, 0x63, 0x61, 0x72, 0x64, 0x73,
	0x12, 0x26, 0x0a, 0x0f, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x63, 0x61,
	0x72, 0x64, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x6c, 0x61, 0x73, 0x74, 0x54,
	0x69, 0x6d, 0x65, 0x43, 0x61, 0x72, 0x64, 0x73, 0x12, 0x25, 0x0a, 0x0e, 0x68, 0x69, 0x73, 0x74,
	0x72, 0x6f, 0x79, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0d,
	0x52, 0x0d, 0x68, 0x69, 0x73, 0x74, 0x72, 0x6f, 0x79, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12,
	0x1b, 0x0a, 0x09, 0x68, 0x69, 0x73, 0x74, 0x72, 0x6f, 0x79, 0x5f, 0x43, 0x18, 0x0b, 0x20, 0x03,
	0x28, 0x0d, 0x52, 0x08, 0x68, 0x69, 0x73, 0x74, 0x72, 0x6f, 0x79, 0x43, 0x12, 0x17, 0x0a, 0x07,
	0x67, 0x61, 0x6d, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x67,
	0x61, 0x6d, 0x65, 0x49, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x63, 0x68, 0x69, 0x70, 0x5f, 0x74, 0x65,
	0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x63, 0x68,
	0x69, 0x70, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x68, 0x69,
	0x73, 0x74, 0x72, 0x6f, 0x79, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x0e, 0x20, 0x03, 0x28, 0x0d, 0x52,
	0x0a, 0x68, 0x69, 0x73, 0x74, 0x72, 0x6f, 0x79, 0x4b, 0x65, 0x79, 0x22, 0x2f, 0x0a, 0x17, 0x4d,
	0x53, 0x47, 0x5f, 0x43, 0x5f, 0x47, 0x41, 0x4d, 0x45, 0x5f, 0x52, 0x45, 0x41, 0x44, 0x59, 0x5f,
	0x33, 0x5f, 0x52, 0x45, 0x53, 0x50, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x22, 0x49, 0x0a, 0x13,
	0x4d, 0x53, 0x47, 0x5f, 0x43, 0x5f, 0x47, 0x41, 0x4d, 0x45, 0x5f, 0x4b, 0x45, 0x59, 0x5f, 0x52,
	0x45, 0x53, 0x50, 0x12, 0x19, 0x0a, 0x08, 0x6b, 0x65, 0x79, 0x5f, 0x63, 0x61, 0x72, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x6b, 0x65, 0x79, 0x43, 0x61, 0x72, 0x64, 0x12, 0x17,
	0x0a, 0x07, 0x67, 0x61, 0x6d, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x67, 0x61, 0x6d, 0x65, 0x49, 0x64, 0x22, 0x2e, 0x0a, 0x16, 0x4d, 0x53, 0x47, 0x5f, 0x43,
	0x5f, 0x47, 0x41, 0x4d, 0x45, 0x5f, 0x4e, 0x4f, 0x54, 0x49, 0x43, 0x45, 0x5f, 0x52, 0x45, 0x53,
	0x50, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x05, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x22, 0x47, 0x0a, 0x19, 0x4d, 0x53, 0x47, 0x5f, 0x43,
	0x5f, 0x47, 0x41, 0x4d, 0x45, 0x5f, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x41, 0x52, 0x44, 0x53, 0x5f,
	0x52, 0x45, 0x53, 0x50, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x61, 0x72, 0x64, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0d, 0x52, 0x05, 0x63, 0x61, 0x72, 0x64, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69,
	0x6d, 0x65, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x74, 0x69, 0x6d, 0x65, 0x73,
	0x22, 0xb2, 0x01, 0x0a, 0x16, 0x4d, 0x53, 0x47, 0x5f, 0x43, 0x5f, 0x47, 0x41, 0x4d, 0x45, 0x5f,
	0x53, 0x45, 0x54, 0x54, 0x4c, 0x45, 0x5f, 0x52, 0x45, 0x53, 0x50, 0x12, 0x3a, 0x0a, 0x0b, 0x75,
	0x73, 0x65, 0x72, 0x5f, 0x73, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x19, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x77, 0x2e, 0x63, 0x68, 0x65, 0x73, 0x73, 0x2e,
	0x61, 0x62, 0x2e, 0x42, 0x65, 0x74, 0x5f, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0a, 0x75, 0x73, 0x65,
	0x72, 0x53, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x12, 0x40, 0x0a, 0x0e, 0x66, 0x69, 0x6e, 0x61, 0x6c,
	0x6c, 0x79, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x19, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x77, 0x2e, 0x63, 0x68, 0x65, 0x73, 0x73, 0x2e, 0x61,
	0x62, 0x2e, 0x42, 0x65, 0x74, 0x5f, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0d, 0x66, 0x69, 0x6e, 0x61,
	0x6c, 0x6c, 0x79, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x75, 0x72,
	0x72, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x63, 0x75, 0x72,
	0x72, 0x65, 0x6e, 0x63, 0x79, 0x22, 0x4a, 0x0a, 0x12, 0x4d, 0x53, 0x47, 0x5f, 0x43, 0x5f, 0x55,
	0x53, 0x45, 0x52, 0x5f, 0x42, 0x45, 0x54, 0x5f, 0x52, 0x45, 0x51, 0x12, 0x34, 0x0a, 0x08, 0x75,
	0x73, 0x65, 0x72, 0x5f, 0x62, 0x65, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e,
	0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x77, 0x2e, 0x63, 0x68, 0x65, 0x73, 0x73, 0x2e, 0x61, 0x62, 0x2e,
	0x42, 0x65, 0x74, 0x5f, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x07, 0x75, 0x73, 0x65, 0x72, 0x42, 0x65,
	0x74, 0x22, 0xcf, 0x02, 0x0a, 0x13, 0x4d, 0x53, 0x47, 0x5f, 0x43, 0x5f, 0x55, 0x53, 0x45, 0x52,
	0x5f, 0x42, 0x45, 0x54, 0x5f, 0x52, 0x45, 0x53, 0x50, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x12, 0x34, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x62, 0x65, 0x74, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x77, 0x2e, 0x63, 0x68, 0x65,
	0x73, 0x73, 0x2e, 0x61, 0x62, 0x2e, 0x42, 0x65, 0x74, 0x5f, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x07,
	0x75, 0x73, 0x65, 0x72, 0x42, 0x65, 0x74, 0x12, 0x3b, 0x0a, 0x0c, 0x75, 0x73, 0x65, 0x72, 0x5f,
	0x62, 0x65, 0x74, 0x5f, 0x61, 0x6c, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e,
	0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x77, 0x2e, 0x63, 0x68, 0x65, 0x73, 0x73, 0x2e, 0x61, 0x62, 0x2e,
	0x42, 0x65, 0x74, 0x5f, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0a, 0x75, 0x73, 0x65, 0x72, 0x42, 0x65,
	0x74, 0x41, 0x6c, 0x6c, 0x12, 0x42, 0x0a, 0x10, 0x61, 0x6c, 0x6c, 0x5f, 0x75, 0x73, 0x65, 0x72,
	0x5f, 0x62, 0x65, 0x74, 0x5f, 0x61, 0x6c, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19,
	0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x77, 0x2e, 0x63, 0x68, 0x65, 0x73, 0x73, 0x2e, 0x61, 0x62,
	0x2e, 0x42, 0x65, 0x74, 0x5f, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0d, 0x61, 0x6c, 0x6c, 0x55, 0x73,
	0x65, 0x72, 0x42, 0x65, 0x74, 0x41, 0x6c, 0x6c, 0x12, 0x24, 0x0a, 0x0e, 0x74, 0x69, 0x70, 0x73,
	0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x6e, 0x75, 0x6d, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x0c, 0x74, 0x69, 0x70, 0x73, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x4e, 0x75, 0x6d, 0x12, 0x43,
	0x0a, 0x10, 0x74, 0x69, 0x70, 0x73, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x5f, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63,
	0x77, 0x2e, 0x63, 0x68, 0x65, 0x73, 0x73, 0x2e, 0x61, 0x62, 0x2e, 0x42, 0x65, 0x74, 0x5f, 0x49,
	0x6e, 0x66, 0x6f, 0x52, 0x0e, 0x74, 0x69, 0x70, 0x73, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x22, 0x38, 0x0a, 0x17, 0x4d, 0x53, 0x47, 0x5f, 0x43, 0x5f, 0x55, 0x53, 0x45,
	0x52, 0x5f, 0x43, 0x4f, 0x4e, 0x54, 0x49, 0x4e, 0x55, 0x45, 0x5f, 0x52, 0x45, 0x51, 0x12, 0x1d,
	0x0a, 0x0a, 0x62, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x69, 0x6e, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x09, 0x62, 0x43, 0x6f, 0x6e, 0x74, 0x69, 0x6e, 0x75, 0x65, 0x22, 0x40, 0x0a,
	0x1f, 0x4d, 0x53, 0x47, 0x5f, 0x43, 0x5f, 0x47, 0x41, 0x4d, 0x45, 0x5f, 0x55, 0x53, 0x45, 0x52,
	0x5f, 0x43, 0x4f, 0x4e, 0x54, 0x49, 0x4e, 0x55, 0x45, 0x5f, 0x33, 0x5f, 0x52, 0x45, 0x53, 0x50,
	0x12, 0x1d, 0x0a, 0x0a, 0x62, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x69, 0x6e, 0x75, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x62, 0x43, 0x6f, 0x6e, 0x74, 0x69, 0x6e, 0x75, 0x65, 0x22,
	0x55, 0x0a, 0x18, 0x4d, 0x53, 0x47, 0x5f, 0x43, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x43, 0x4f,
	0x4e, 0x54, 0x49, 0x4e, 0x55, 0x45, 0x5f, 0x52, 0x45, 0x53, 0x50, 0x12, 0x16, 0x0a, 0x06, 0x72,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x72, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x73, 0x5f, 0x73,
	0x69, 0x7a, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x70, 0x6c, 0x61, 0x79, 0x65,
	0x72, 0x73, 0x53, 0x69, 0x7a, 0x65, 0x22, 0x90, 0x02, 0x0a, 0x19, 0x4d, 0x53, 0x47, 0x5f, 0x43,
	0x5f, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x42, 0x45, 0x54, 0x5f, 0x4f, 0x54, 0x48, 0x45, 0x52, 0x5f,
	0x52, 0x45, 0x53, 0x50, 0x12, 0x3c, 0x0a, 0x09, 0x67, 0x61, 0x6d, 0x65, 0x5f, 0x75, 0x73, 0x65,
	0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x77,
	0x2e, 0x63, 0x68, 0x65, 0x73, 0x73, 0x2e, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e,
	0x47, 0x61, 0x6d, 0x65, 0x55, 0x73, 0x65, 0x72, 0x52, 0x08, 0x67, 0x61, 0x6d, 0x65, 0x55, 0x73,
	0x65, 0x72, 0x12, 0x34, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x62, 0x65, 0x74, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x77, 0x2e, 0x63, 0x68,
	0x65, 0x73, 0x73, 0x2e, 0x61, 0x62, 0x2e, 0x42, 0x65, 0x74, 0x5f, 0x49, 0x6e, 0x66, 0x6f, 0x52,
	0x07, 0x75, 0x73, 0x65, 0x72, 0x42, 0x65, 0x74, 0x12, 0x3b, 0x0a, 0x0c, 0x75, 0x73, 0x65, 0x72,
	0x5f, 0x62, 0x65, 0x74, 0x5f, 0x61, 0x6c, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19,
	0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x77, 0x2e, 0x63, 0x68, 0x65, 0x73, 0x73, 0x2e, 0x61, 0x62,
	0x2e, 0x42, 0x65, 0x74, 0x5f, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0a, 0x75, 0x73, 0x65, 0x72, 0x42,
	0x65, 0x74, 0x41, 0x6c, 0x6c, 0x12, 0x42, 0x0a, 0x10, 0x61, 0x6c, 0x6c, 0x5f, 0x75, 0x73, 0x65,
	0x72, 0x5f, 0x62, 0x65, 0x74, 0x5f, 0x61, 0x6c, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x19, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x77, 0x2e, 0x63, 0x68, 0x65, 0x73, 0x73, 0x2e, 0x61,
	0x62, 0x2e, 0x42, 0x65, 0x74, 0x5f, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0d, 0x61, 0x6c, 0x6c, 0x55,
	0x73, 0x65, 0x72, 0x42, 0x65, 0x74, 0x41, 0x6c, 0x6c, 0x2a, 0x6e, 0x0a, 0x08, 0x41, 0x42, 0x5f,
	0x53, 0x5f, 0x43, 0x6d, 0x64, 0x12, 0x11, 0x0a, 0x0d, 0x43, 0x4d, 0x44, 0x5f, 0x53, 0x5f, 0x49,
	0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x10, 0x00, 0x12, 0x0e, 0x0a, 0x0a, 0x43, 0x4d, 0x44, 0x5f,
	0x53, 0x5f, 0x50, 0x49, 0x4e, 0x47, 0x10, 0x01, 0x12, 0x0e, 0x0a, 0x0a, 0x43, 0x4d, 0x44, 0x5f,
	0x53, 0x5f, 0x50, 0x4f, 0x4e, 0x47, 0x10, 0x02, 0x12, 0x16, 0x0a, 0x12, 0x43, 0x4d, 0x44, 0x5f,
	0x53, 0x5f, 0x41, 0x42, 0x5f, 0x45, 0x4e, 0x54, 0x45, 0x52, 0x5f, 0x52, 0x45, 0x51, 0x10, 0x03,
	0x12, 0x17, 0x0a, 0x13, 0x43, 0x4d, 0x44, 0x5f, 0x53, 0x5f, 0x41, 0x42, 0x5f, 0x45, 0x4e, 0x54,
	0x45, 0x52, 0x5f, 0x52, 0x45, 0x53, 0x50, 0x10, 0x04, 0x2a, 0xae, 0x05, 0x0a, 0x08, 0x41, 0x42,
	0x5f, 0x43, 0x5f, 0x43, 0x6d, 0x64, 0x12, 0x11, 0x0a, 0x0d, 0x43, 0x4d, 0x44, 0x5f, 0x43, 0x5f,
	0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x10, 0x00, 0x12, 0x1e, 0x0a, 0x1a, 0x43, 0x4d, 0x44,
	0x5f, 0x43, 0x5f, 0x47, 0x45, 0x54, 0x5f, 0x54, 0x41, 0x42, 0x4c, 0x45, 0x5f, 0x53, 0x54, 0x41,
	0x54, 0x55, 0x53, 0x5f, 0x52, 0x45, 0x51, 0x10, 0x01, 0x12, 0x1f, 0x0a, 0x1b, 0x43, 0x4d, 0x44,
	0x5f, 0x43, 0x5f, 0x47, 0x45, 0x54, 0x5f, 0x54, 0x41, 0x42, 0x4c, 0x45, 0x5f, 0x53, 0x54, 0x41,
	0x54, 0x55, 0x53, 0x5f, 0x52, 0x45, 0x53, 0x50, 0x10, 0x02, 0x12, 0x1a, 0x0a, 0x16, 0x43, 0x4d,
	0x44, 0x5f, 0x43, 0x5f, 0x47, 0x41, 0x4d, 0x45, 0x5f, 0x52, 0x45, 0x41, 0x44, 0x59, 0x5f, 0x33,
	0x5f, 0x52, 0x45, 0x51, 0x10, 0x05, 0x12, 0x1b, 0x0a, 0x17, 0x43, 0x4d, 0x44, 0x5f, 0x43, 0x5f,
	0x47, 0x41, 0x4d, 0x45, 0x5f, 0x52, 0x45, 0x41, 0x44, 0x59, 0x5f, 0x33, 0x5f, 0x52, 0x45, 0x53,
	0x50, 0x10, 0x06, 0x12, 0x16, 0x0a, 0x12, 0x43, 0x4d, 0x44, 0x5f, 0x43, 0x5f, 0x47, 0x41, 0x4d,
	0x45, 0x5f, 0x4b, 0x45, 0x59, 0x5f, 0x52, 0x45, 0x51, 0x10, 0x07, 0x12, 0x17, 0x0a, 0x13, 0x43,
	0x4d, 0x44, 0x5f, 0x43, 0x5f, 0x47, 0x41, 0x4d, 0x45, 0x5f, 0x4b, 0x45, 0x59, 0x5f, 0x52, 0x45,
	0x53, 0x50, 0x10, 0x08, 0x12, 0x19, 0x0a, 0x15, 0x43, 0x4d, 0x44, 0x5f, 0x43, 0x5f, 0x47, 0x41,
	0x4d, 0x45, 0x5f, 0x4e, 0x4f, 0x54, 0x49, 0x43, 0x45, 0x5f, 0x52, 0x45, 0x51, 0x10, 0x09, 0x12,
	0x1a, 0x0a, 0x16, 0x43, 0x4d, 0x44, 0x5f, 0x43, 0x5f, 0x47, 0x41, 0x4d, 0x45, 0x5f, 0x4e, 0x4f,
	0x54, 0x49, 0x43, 0x45, 0x5f, 0x52, 0x45, 0x53, 0x50, 0x10, 0x0a, 0x12, 0x1c, 0x0a, 0x18, 0x43,
	0x4d, 0x44, 0x5f, 0x43, 0x5f, 0x47, 0x41, 0x4d, 0x45, 0x5f, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x41,
	0x52, 0x44, 0x53, 0x5f, 0x52, 0x45, 0x51, 0x10, 0x0b, 0x12, 0x1d, 0x0a, 0x19, 0x43, 0x4d, 0x44,
	0x5f, 0x43, 0x5f, 0x47, 0x41, 0x4d, 0x45, 0x5f, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x41, 0x52, 0x44,
	0x53, 0x5f, 0x52, 0x45, 0x53, 0x50, 0x10, 0x0c, 0x12, 0x19, 0x0a, 0x15, 0x43, 0x4d, 0x44, 0x5f,
	0x43, 0x5f, 0x47, 0x41, 0x4d, 0x45, 0x5f, 0x53, 0x45, 0x54, 0x54, 0x4c, 0x45, 0x5f, 0x52, 0x45,
	0x51, 0x10, 0x0d, 0x12, 0x1a, 0x0a, 0x16, 0x43, 0x4d, 0x44, 0x5f, 0x43, 0x5f, 0x47, 0x41, 0x4d,
	0x45, 0x5f, 0x53, 0x45, 0x54, 0x54, 0x4c, 0x45, 0x5f, 0x52, 0x45, 0x53, 0x50, 0x10, 0x0e, 0x12,
	0x22, 0x0a, 0x1e, 0x43, 0x4d, 0x44, 0x5f, 0x43, 0x5f, 0x47, 0x41, 0x4d, 0x45, 0x5f, 0x4e, 0x4f,
	0x54, 0x49, 0x43, 0x45, 0x5f, 0x43, 0x4f, 0x4e, 0x49, 0x54, 0x4e, 0x55, 0x45, 0x5f, 0x52, 0x45,
	0x51, 0x10, 0x0f, 0x12, 0x23, 0x0a, 0x1f, 0x43, 0x4d, 0x44, 0x5f, 0x43, 0x5f, 0x47, 0x41, 0x4d,
	0x45, 0x5f, 0x4e, 0x4f, 0x54, 0x49, 0x43, 0x45, 0x5f, 0x43, 0x4f, 0x4e, 0x49, 0x54, 0x4e, 0x55,
	0x45, 0x5f, 0x52, 0x45, 0x53, 0x50, 0x10, 0x10, 0x12, 0x22, 0x0a, 0x1e, 0x43, 0x4d, 0x44, 0x5f,
	0x43, 0x5f, 0x47, 0x41, 0x4d, 0x45, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x43, 0x4f, 0x4e, 0x54,
	0x49, 0x4e, 0x55, 0x45, 0x5f, 0x33, 0x5f, 0x52, 0x45, 0x51, 0x10, 0x11, 0x12, 0x23, 0x0a, 0x1f,
	0x43, 0x4d, 0x44, 0x5f, 0x43, 0x5f, 0x47, 0x41, 0x4d, 0x45, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x5f,
	0x43, 0x4f, 0x4e, 0x54, 0x49, 0x4e, 0x55, 0x45, 0x5f, 0x33, 0x5f, 0x52, 0x45, 0x53, 0x50, 0x10,
	0x12, 0x12, 0x16, 0x0a, 0x12, 0x43, 0x4d, 0x44, 0x5f, 0x43, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x5f,
	0x42, 0x45, 0x54, 0x5f, 0x52, 0x45, 0x51, 0x10, 0x1e, 0x12, 0x17, 0x0a, 0x13, 0x43, 0x4d, 0x44,
	0x5f, 0x43, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x42, 0x45, 0x54, 0x5f, 0x52, 0x45, 0x53, 0x50,
	0x10, 0x1f, 0x12, 0x1b, 0x0a, 0x17, 0x43, 0x4d, 0x44, 0x5f, 0x43, 0x5f, 0x55, 0x53, 0x45, 0x52,
	0x5f, 0x43, 0x4f, 0x4e, 0x54, 0x49, 0x4e, 0x55, 0x45, 0x5f, 0x52, 0x45, 0x51, 0x10, 0x20, 0x12,
	0x1c, 0x0a, 0x18, 0x43, 0x4d, 0x44, 0x5f, 0x43, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x43, 0x4f,
	0x4e, 0x54, 0x49, 0x4e, 0x55, 0x45, 0x5f, 0x52, 0x45, 0x53, 0x50, 0x10, 0x21, 0x12, 0x1c, 0x0a,
	0x18, 0x43, 0x4d, 0x44, 0x5f, 0x43, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x42, 0x45, 0x54, 0x5f,
	0x4f, 0x54, 0x48, 0x45, 0x52, 0x5f, 0x52, 0x45, 0x51, 0x10, 0x22, 0x12, 0x1d, 0x0a, 0x19, 0x43,
	0x4d, 0x44, 0x5f, 0x43, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x42, 0x45, 0x54, 0x5f, 0x4f, 0x54,
	0x48, 0x45, 0x52, 0x5f, 0x52, 0x45, 0x53, 0x50, 0x10, 0x23, 0x2a, 0xa1, 0x01, 0x0a, 0x09, 0x47,
	0x61, 0x6d, 0x65, 0x50, 0x68, 0x61, 0x73, 0x65, 0x12, 0x0f, 0x0a, 0x0b, 0x50, 0x48, 0x53, 0x5f,
	0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x10, 0x00, 0x12, 0x13, 0x0a, 0x0f, 0x50, 0x48, 0x53,
	0x5f, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x52, 0x65, 0x61, 0x64, 0x79, 0x10, 0x01, 0x12, 0x19,
	0x0a, 0x15, 0x50, 0x48, 0x53, 0x5f, 0x47, 0x61, 0x6d, 0x65, 0x5f, 0x44, 0x65, 0x61, 0x6c, 0x5f,
	0x4b, 0x65, 0x79, 0x43, 0x61, 0x72, 0x64, 0x10, 0x02, 0x12, 0x12, 0x0a, 0x0e, 0x50, 0x48, 0x53,
	0x5f, 0x47, 0x61, 0x6d, 0x69, 0x6e, 0x67, 0x5f, 0x42, 0x65, 0x74, 0x10, 0x03, 0x12, 0x13, 0x0a,
	0x0f, 0x50, 0x48, 0x53, 0x5f, 0x47, 0x61, 0x6d, 0x69, 0x6e, 0x67, 0x5f, 0x4f, 0x70, 0x65, 0x6e,
	0x10, 0x05, 0x12, 0x13, 0x0a, 0x0f, 0x50, 0x48, 0x53, 0x5f, 0x47, 0x61, 0x6d, 0x65, 0x5f, 0x53,
	0x65, 0x74, 0x74, 0x6c, 0x65, 0x10, 0x07, 0x12, 0x15, 0x0a, 0x11, 0x50, 0x48, 0x53, 0x5f, 0x47,
	0x61, 0x6d, 0x65, 0x5f, 0x43, 0x6f, 0x6e, 0x74, 0x69, 0x6e, 0x75, 0x65, 0x10, 0x08, 0x42, 0x13,
	0x5a, 0x11, 0x2e, 0x2f, 0x63, 0x6f, 0x6d, 0x2f, 0x63, 0x77, 0x2f, 0x63, 0x68, 0x65, 0x73, 0x73,
	0x2f, 0x61, 0x62, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_ab_proto_rawDescOnce sync.Once
	file_ab_proto_rawDescData = file_ab_proto_rawDesc
)

func file_ab_proto_rawDescGZIP() []byte {
	file_ab_proto_rawDescOnce.Do(func() {
		file_ab_proto_rawDescData = protoimpl.X.CompressGZIP(file_ab_proto_rawDescData)
	})
	return file_ab_proto_rawDescData
}

var file_ab_proto_enumTypes = make([]protoimpl.EnumInfo, 3)
var file_ab_proto_msgTypes = make([]protoimpl.MessageInfo, 18)
var file_ab_proto_goTypes = []interface{}{
	(AB_S_Cmd)(0),                           // 0: com.cw.chess.ab.AB_S_Cmd
	(AB_C_Cmd)(0),                           // 1: com.cw.chess.ab.AB_C_Cmd
	(GamePhase)(0),                          // 2: com.cw.chess.ab.GamePhase
	(*ABStartRequest)(nil),                  // 3: com.cw.chess.ab.ABStartRequest
	(*ABStartResponse)(nil),                 // 4: com.cw.chess.ab.ABStartResponse
	(*MSG_C_COMMON_REQ)(nil),                // 5: com.cw.chess.ab.MSG_C_COMMON_REQ
	(*MSG_C_COMMON_RESP)(nil),               // 6: com.cw.chess.ab.MSG_C_COMMON_RESP
	(*TableData)(nil),                       // 7: com.cw.chess.ab.TableData
	(*Bet_Info)(nil),                        // 8: com.cw.chess.ab.Bet_Info
	(*MSG_C_GET_TABLE_STATUS_RESP)(nil),     // 9: com.cw.chess.ab.MSG_C_GET_TABLE_STATUS_RESP
	(*MSG_C_GAME_READY_3_RESP)(nil),         // 10: com.cw.chess.ab.MSG_C_GAME_READY_3_RESP
	(*MSG_C_GAME_KEY_RESP)(nil),             // 11: com.cw.chess.ab.MSG_C_GAME_KEY_RESP
	(*MSG_C_GAME_NOTICE_RESP)(nil),          // 12: com.cw.chess.ab.MSG_C_GAME_NOTICE_RESP
	(*MSG_C_GAME_OPENCARDS_RESP)(nil),       // 13: com.cw.chess.ab.MSG_C_GAME_OPENCARDS_RESP
	(*MSG_C_GAME_SETTLE_RESP)(nil),          // 14: com.cw.chess.ab.MSG_C_GAME_SETTLE_RESP
	(*MSG_C_USER_BET_REQ)(nil),              // 15: com.cw.chess.ab.MSG_C_USER_BET_REQ
	(*MSG_C_USER_BET_RESP)(nil),             // 16: com.cw.chess.ab.MSG_C_USER_BET_RESP
	(*MSG_C_USER_CONTINUE_REQ)(nil),         // 17: com.cw.chess.ab.MSG_C_USER_CONTINUE_REQ
	(*MSG_C_GAME_USER_CONTINUE_3_RESP)(nil), // 18: com.cw.chess.ab.MSG_C_GAME_USER_CONTINUE_3_RESP
	(*MSG_C_USER_CONTINUE_RESP)(nil),        // 19: com.cw.chess.ab.MSG_C_USER_CONTINUE_RESP
	(*MSG_C_USER_BET_OTHER_RESP)(nil),       // 20: com.cw.chess.ab.MSG_C_USER_BET_OTHER_RESP
	(*platform.GameUser)(nil),               // 21: com.cw.chess.platform.GameUser
	(*platform.ABLevelDesc)(nil),            // 22: com.cw.chess.platform.ABLevelDesc
}
var file_ab_proto_depIdxs = []int32{
	21, // 0: com.cw.chess.ab.ABStartRequest.users:type_name -> com.cw.chess.platform.GameUser
	22, // 1: com.cw.chess.ab.MSG_C_GET_TABLE_STATUS_RESP.level_desc:type_name -> com.cw.chess.platform.ABLevelDesc
	2,  // 2: com.cw.chess.ab.MSG_C_GET_TABLE_STATUS_RESP.game_phase:type_name -> com.cw.chess.ab.GamePhase
	8,  // 3: com.cw.chess.ab.MSG_C_GET_TABLE_STATUS_RESP.self_bet:type_name -> com.cw.chess.ab.Bet_Info
	8,  // 4: com.cw.chess.ab.MSG_C_GET_TABLE_STATUS_RESP.all_bet:type_name -> com.cw.chess.ab.Bet_Info
	8,  // 5: com.cw.chess.ab.MSG_C_GAME_SETTLE_RESP.user_settle:type_name -> com.cw.chess.ab.Bet_Info
	8,  // 6: com.cw.chess.ab.MSG_C_GAME_SETTLE_RESP.finally_result:type_name -> com.cw.chess.ab.Bet_Info
	8,  // 7: com.cw.chess.ab.MSG_C_USER_BET_REQ.user_bet:type_name -> com.cw.chess.ab.Bet_Info
	8,  // 8: com.cw.chess.ab.MSG_C_USER_BET_RESP.user_bet:type_name -> com.cw.chess.ab.Bet_Info
	8,  // 9: com.cw.chess.ab.MSG_C_USER_BET_RESP.user_bet_all:type_name -> com.cw.chess.ab.Bet_Info
	8,  // 10: com.cw.chess.ab.MSG_C_USER_BET_RESP.all_user_bet_all:type_name -> com.cw.chess.ab.Bet_Info
	8,  // 11: com.cw.chess.ab.MSG_C_USER_BET_RESP.tips_limit_value:type_name -> com.cw.chess.ab.Bet_Info
	21, // 12: com.cw.chess.ab.MSG_C_USER_BET_OTHER_RESP.game_user:type_name -> com.cw.chess.platform.GameUser
	8,  // 13: com.cw.chess.ab.MSG_C_USER_BET_OTHER_RESP.user_bet:type_name -> com.cw.chess.ab.Bet_Info
	8,  // 14: com.cw.chess.ab.MSG_C_USER_BET_OTHER_RESP.user_bet_all:type_name -> com.cw.chess.ab.Bet_Info
	8,  // 15: com.cw.chess.ab.MSG_C_USER_BET_OTHER_RESP.all_user_bet_all:type_name -> com.cw.chess.ab.Bet_Info
	16, // [16:16] is the sub-list for method output_type
	16, // [16:16] is the sub-list for method input_type
	16, // [16:16] is the sub-list for extension type_name
	16, // [16:16] is the sub-list for extension extendee
	0,  // [0:16] is the sub-list for field type_name
}

func init() { file_ab_proto_init() }
func file_ab_proto_init() {
	if File_ab_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_ab_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ABStartRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ab_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ABStartResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ab_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MSG_C_COMMON_REQ); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ab_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MSG_C_COMMON_RESP); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ab_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TableData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ab_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Bet_Info); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ab_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MSG_C_GET_TABLE_STATUS_RESP); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ab_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MSG_C_GAME_READY_3_RESP); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ab_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MSG_C_GAME_KEY_RESP); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ab_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MSG_C_GAME_NOTICE_RESP); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ab_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MSG_C_GAME_OPENCARDS_RESP); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ab_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MSG_C_GAME_SETTLE_RESP); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ab_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MSG_C_USER_BET_REQ); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ab_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MSG_C_USER_BET_RESP); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ab_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MSG_C_USER_CONTINUE_REQ); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ab_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MSG_C_GAME_USER_CONTINUE_3_RESP); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ab_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MSG_C_USER_CONTINUE_RESP); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ab_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MSG_C_USER_BET_OTHER_RESP); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_ab_proto_rawDesc,
			NumEnums:      3,
			NumMessages:   18,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_ab_proto_goTypes,
		DependencyIndexes: file_ab_proto_depIdxs,
		EnumInfos:         file_ab_proto_enumTypes,
		MessageInfos:      file_ab_proto_msgTypes,
	}.Build()
	File_ab_proto = out.File
	file_ab_proto_rawDesc = nil
	file_ab_proto_goTypes = nil
	file_ab_proto_depIdxs = nil
}
