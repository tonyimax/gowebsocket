// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.26.0
// 	protoc        v3.12.4
// source: blackred.proto

//尽量不要同时包含多个业务逻辑文件，例如同时包含rummy和teenpatti，可能有些命名会同名，确实有这种情况用命名空间区别

package blackred

import (
	platform "./com/cw/chess/platform"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

//**********************************Teenpatti游戏服务端和服务端通信定义开始********************************
type Blackred_S_Cmd int32

const (
	Blackred_S_Cmd_CMD_S_INVALID             Blackred_S_Cmd = 0
	Blackred_S_Cmd_CMD_S_PING                Blackred_S_Cmd = 1
	Blackred_S_Cmd_CMD_S_PONG                Blackred_S_Cmd = 2
	Blackred_S_Cmd_CMD_S_BLACKRED_ENTER_REQ  Blackred_S_Cmd = 3 // 匹配成功通知ab服务准备开始：ABStartRequest
	Blackred_S_Cmd_CMD_S_BLACKRED_ENTER_RESP Blackred_S_Cmd = 4 // 匹配成功通知ab服务准备开始返回：ABStartResponse
)

// Enum value maps for Blackred_S_Cmd.
var (
	Blackred_S_Cmd_name = map[int32]string{
		0: "CMD_S_INVALID",
		1: "CMD_S_PING",
		2: "CMD_S_PONG",
		3: "CMD_S_BLACKRED_ENTER_REQ",
		4: "CMD_S_BLACKRED_ENTER_RESP",
	}
	Blackred_S_Cmd_value = map[string]int32{
		"CMD_S_INVALID":             0,
		"CMD_S_PING":                1,
		"CMD_S_PONG":                2,
		"CMD_S_BLACKRED_ENTER_REQ":  3,
		"CMD_S_BLACKRED_ENTER_RESP": 4,
	}
)

func (x Blackred_S_Cmd) Enum() *Blackred_S_Cmd {
	p := new(Blackred_S_Cmd)
	*p = x
	return p
}

func (x Blackred_S_Cmd) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Blackred_S_Cmd) Descriptor() protoreflect.EnumDescriptor {
	return file_blackred_proto_enumTypes[0].Descriptor()
}

func (Blackred_S_Cmd) Type() protoreflect.EnumType {
	return &file_blackred_proto_enumTypes[0]
}

func (x Blackred_S_Cmd) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Blackred_S_Cmd.Descriptor instead.
func (Blackred_S_Cmd) EnumDescriptor() ([]byte, []int) {
	return file_blackred_proto_rawDescGZIP(), []int{0}
}

type BlackredCmd int32

const (
	BlackredCmd_CMD_C_INVALID               BlackredCmd = 0
	BlackredCmd_CMD_C_GET_TABLE_STATUS_REQ  BlackredCmd = 1 // 请求获取游戏数据，此协议应该在客户端资源加载完成后请求（通常为刚进游戏，比如匹配成功/断线重连）MSG_C_COMMON_REQ
	BlackredCmd_CMD_C_GET_TABLE_STATUS_RESP BlackredCmd = 2 // 回复：MSG_C_GET_TABLE_STATUS_RESP
	// 以下逻辑会在牌局之间循环
	BlackredCmd_CMD_C_GAME_READY_3_REQ        BlackredCmd = 3  // 无意义
	BlackredCmd_CMD_C_GAME_READY_3_RESP       BlackredCmd = 4  // 通知客户端N秒后开始：MSG_C_GAME_READY_3_RESP
	BlackredCmd_CMD_C_GAME_READY_COMFIRM_REQ  BlackredCmd = 5  // 客户端倒数结束后，通知服务器，（如果用户在倒数3秒内手动退出或者其他原因退出，游戏将取消）（服务器这个状态会维持5秒）MSG_C_COMMON_REQ
	BlackredCmd_CMD_C_GAME_READY_COMFIRM_RESP BlackredCmd = 6  // 无意义（不返回了，如果客户端需要，补一个）
	BlackredCmd_CMD_C_GAME_DEALCARDS_REQ      BlackredCmd = 7  // 无意义
	BlackredCmd_CMD_C_GAME_DEALCARDS_RESP     BlackredCmd = 8  // 出点数：MSG_C_GAME_DEALCARDS_RESP
	BlackredCmd_CMD_C_GAME_START_BET_REQ      BlackredCmd = 9  // 通知开始下注
	BlackredCmd_CMD_C_GAME_START_BET_RESP     BlackredCmd = 10 // 通知开始下注
	BlackredCmd_CMD_C_GAME_BET_REQ            BlackredCmd = 11 // 用户下注请求：MSG_C_GAME_BET_REQ
	BlackredCmd_CMD_C_GAME_BET_RESP           BlackredCmd = 12 // 用户下注广播：MSG_C_GAME_BET_RESP
	BlackredCmd_CMD_C_GAME_SETTLE_REQ         BlackredCmd = 23 //无意义
	BlackredCmd_CMD_C_GAME_SETTLE_RESP        BlackredCmd = 24 // 结算：MSG_C_GAME_SETTLE_RESP
	BlackredCmd_CMD_C_GAME_CONTINUE_REQ       BlackredCmd = 25 // 用户确认继续：MSG_C_COMMON_REQ
	BlackredCmd_CMD_C_GAME_CONTINUE_RESP      BlackredCmd = 26 // 无意义，后续会循环至PHS_Game_Ready（用户会从收到CMD_C_GAME_READY_3_RESP开始）
	BlackredCmd_CMD_C_USER_BET_OTHER_REQ      BlackredCmd = 27 // 无意义
	BlackredCmd_CMD_C_USER_BET_OTHER_RESP     BlackredCmd = 28 // 其他用户下注广播：MSG_C_USER_BET_OTHER_RESP
	// 以下为补充逻辑
	BlackredCmd_CMD_C_CHAT_REQ          BlackredCmd = 62  // 用户请求聊天：MSG_C_CHAT_REQ
	BlackredCmd_CMD_C_CHAT_RESP         BlackredCmd = 63  // 用户请求聊天回复：MSG_C_CHAT_RESP
	BlackredCmd_CMD_C_MATCH_FINISH_REQ  BlackredCmd = 100 // 无意义
	BlackredCmd_CMD_C_MATCH_FINISH_RESP BlackredCmd = 101 // 桌子被解散：MSG_C_MATCH_FINISH_RESP
)

// Enum value maps for BlackredCmd.
var (
	BlackredCmd_name = map[int32]string{
		0:   "CMD_C_INVALID",
		1:   "CMD_C_GET_TABLE_STATUS_REQ",
		2:   "CMD_C_GET_TABLE_STATUS_RESP",
		3:   "CMD_C_GAME_READY_3_REQ",
		4:   "CMD_C_GAME_READY_3_RESP",
		5:   "CMD_C_GAME_READY_COMFIRM_REQ",
		6:   "CMD_C_GAME_READY_COMFIRM_RESP",
		7:   "CMD_C_GAME_DEALCARDS_REQ",
		8:   "CMD_C_GAME_DEALCARDS_RESP",
		9:   "CMD_C_GAME_START_BET_REQ",
		10:  "CMD_C_GAME_START_BET_RESP",
		11:  "CMD_C_GAME_BET_REQ",
		12:  "CMD_C_GAME_BET_RESP",
		23:  "CMD_C_GAME_SETTLE_REQ",
		24:  "CMD_C_GAME_SETTLE_RESP",
		25:  "CMD_C_GAME_CONTINUE_REQ",
		26:  "CMD_C_GAME_CONTINUE_RESP",
		27:  "CMD_C_USER_BET_OTHER_REQ",
		28:  "CMD_C_USER_BET_OTHER_RESP",
		62:  "CMD_C_CHAT_REQ",
		63:  "CMD_C_CHAT_RESP",
		100: "CMD_C_MATCH_FINISH_REQ",
		101: "CMD_C_MATCH_FINISH_RESP",
	}
	BlackredCmd_value = map[string]int32{
		"CMD_C_INVALID":                 0,
		"CMD_C_GET_TABLE_STATUS_REQ":    1,
		"CMD_C_GET_TABLE_STATUS_RESP":   2,
		"CMD_C_GAME_READY_3_REQ":        3,
		"CMD_C_GAME_READY_3_RESP":       4,
		"CMD_C_GAME_READY_COMFIRM_REQ":  5,
		"CMD_C_GAME_READY_COMFIRM_RESP": 6,
		"CMD_C_GAME_DEALCARDS_REQ":      7,
		"CMD_C_GAME_DEALCARDS_RESP":     8,
		"CMD_C_GAME_START_BET_REQ":      9,
		"CMD_C_GAME_START_BET_RESP":     10,
		"CMD_C_GAME_BET_REQ":            11,
		"CMD_C_GAME_BET_RESP":           12,
		"CMD_C_GAME_SETTLE_REQ":         23,
		"CMD_C_GAME_SETTLE_RESP":        24,
		"CMD_C_GAME_CONTINUE_REQ":       25,
		"CMD_C_GAME_CONTINUE_RESP":      26,
		"CMD_C_USER_BET_OTHER_REQ":      27,
		"CMD_C_USER_BET_OTHER_RESP":     28,
		"CMD_C_CHAT_REQ":                62,
		"CMD_C_CHAT_RESP":               63,
		"CMD_C_MATCH_FINISH_REQ":        100,
		"CMD_C_MATCH_FINISH_RESP":       101,
	}
)

func (x BlackredCmd) Enum() *BlackredCmd {
	p := new(BlackredCmd)
	*p = x
	return p
}

func (x BlackredCmd) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (BlackredCmd) Descriptor() protoreflect.EnumDescriptor {
	return file_blackred_proto_enumTypes[1].Descriptor()
}

func (BlackredCmd) Type() protoreflect.EnumType {
	return &file_blackred_proto_enumTypes[1]
}

func (x BlackredCmd) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use BlackredCmd.Descriptor instead.
func (BlackredCmd) EnumDescriptor() ([]byte, []int) {
	return file_blackred_proto_rawDescGZIP(), []int{1}
}

// 定义游戏阶段
type GamePhase int32

const (
	GamePhase_PHS_INVALID        GamePhase = 0 // 无效
	GamePhase_PHS_Game_Ready     GamePhase = 1 // 等待用户确认：客户端3秒倒数，服务器5秒等待，否则会把没有准备的用户踢出
	GamePhase_PHS_Gaming_Beting  GamePhase = 2 // 用户进行操作中...
	GamePhase_PHS_Game_DealCards GamePhase = 3 // 出的牌
	GamePhase_PHS_Game_Settle    GamePhase = 4 // 结算
	GamePhase_PHS_Game_Continue  GamePhase = 5 // 用户确认继续阶段：服务器5秒等待，否则会把没有准备的用户踢出
)

// Enum value maps for GamePhase.
var (
	GamePhase_name = map[int32]string{
		0: "PHS_INVALID",
		1: "PHS_Game_Ready",
		2: "PHS_Gaming_Beting",
		3: "PHS_Game_DealCards",
		4: "PHS_Game_Settle",
		5: "PHS_Game_Continue",
	}
	GamePhase_value = map[string]int32{
		"PHS_INVALID":        0,
		"PHS_Game_Ready":     1,
		"PHS_Gaming_Beting":  2,
		"PHS_Game_DealCards": 3,
		"PHS_Game_Settle":    4,
		"PHS_Game_Continue":  5,
	}
)

func (x GamePhase) Enum() *GamePhase {
	p := new(GamePhase)
	*p = x
	return p
}

func (x GamePhase) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (GamePhase) Descriptor() protoreflect.EnumDescriptor {
	return file_blackred_proto_enumTypes[2].Descriptor()
}

func (GamePhase) Type() protoreflect.EnumType {
	return &file_blackred_proto_enumTypes[2]
}

func (x GamePhase) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use GamePhase.Descriptor instead.
func (GamePhase) EnumDescriptor() ([]byte, []int) {
	return file_blackred_proto_rawDescGZIP(), []int{2}
}

// 这个是匹配服务器告诉teenpatti服务器的请求
type BlackredStartRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Level uint32             `protobuf:"varint,1,opt,name=level,proto3" json:"level,omitempty"`
	User  *platform.GameUser `protobuf:"bytes,2,opt,name=user,proto3" json:"user,omitempty"`
	Rbc   uint32             `protobuf:"varint,3,opt,name=rbc,proto3" json:"rbc,omitempty"` // 是否启用作弊模式：0不启动；1、2启动
}

func (x *BlackredStartRequest) Reset() {
	*x = BlackredStartRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_blackred_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BlackredStartRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BlackredStartRequest) ProtoMessage() {}

func (x *BlackredStartRequest) ProtoReflect() protoreflect.Message {
	mi := &file_blackred_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BlackredStartRequest.ProtoReflect.Descriptor instead.
func (*BlackredStartRequest) Descriptor() ([]byte, []int) {
	return file_blackred_proto_rawDescGZIP(), []int{0}
}

func (x *BlackredStartRequest) GetLevel() uint32 {
	if x != nil {
		return x.Level
	}
	return 0
}

func (x *BlackredStartRequest) GetUser() *platform.GameUser {
	if x != nil {
		return x.User
	}
	return nil
}

func (x *BlackredStartRequest) GetRbc() uint32 {
	if x != nil {
		return x.Rbc
	}
	return 0
}

// 这个是匹配服务器收到teenpatti服务器的回复
type BlackredStartResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result  uint32 `protobuf:"varint,1,opt,name=result,proto3" json:"result,omitempty"`                  // 0：成功；
	TableId uint32 `protobuf:"varint,2,opt,name=table_id,json=tableId,proto3" json:"table_id,omitempty"` // table_id：因为一个服务上有很多个桌子以服务多个用户，这里分配好后就告诉匹配服务，匹配服务再把这个tableid和本服务的id告诉客户端
}

func (x *BlackredStartResponse) Reset() {
	*x = BlackredStartResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_blackred_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BlackredStartResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BlackredStartResponse) ProtoMessage() {}

func (x *BlackredStartResponse) ProtoReflect() protoreflect.Message {
	mi := &file_blackred_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BlackredStartResponse.ProtoReflect.Descriptor instead.
func (*BlackredStartResponse) Descriptor() ([]byte, []int) {
	return file_blackred_proto_rawDescGZIP(), []int{1}
}

func (x *BlackredStartResponse) GetResult() uint32 {
	if x != nil {
		return x.Result
	}
	return 0
}

func (x *BlackredStartResponse) GetTableId() uint32 {
	if x != nil {
		return x.TableId
	}
	return 0
}

// 注：后续所有协议全部采用“tableid+子结构”形式，包括请求和回复
type TableData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TableId uint32 `protobuf:"varint,1,opt,name=table_id,json=tableId,proto3" json:"table_id,omitempty"`
	Data    []byte `protobuf:"bytes,2,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *TableData) Reset() {
	*x = TableData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_blackred_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TableData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TableData) ProtoMessage() {}

func (x *TableData) ProtoReflect() protoreflect.Message {
	mi := &file_blackred_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TableData.ProtoReflect.Descriptor instead.
func (*TableData) Descriptor() ([]byte, []int) {
	return file_blackred_proto_rawDescGZIP(), []int{2}
}

func (x *TableData) GetTableId() uint32 {
	if x != nil {
		return x.TableId
	}
	return 0
}

func (x *TableData) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

// 通用客户端请求
type MSG_C_COMMON_REQ struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *MSG_C_COMMON_REQ) Reset() {
	*x = MSG_C_COMMON_REQ{}
	if protoimpl.UnsafeEnabled {
		mi := &file_blackred_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MSG_C_COMMON_REQ) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MSG_C_COMMON_REQ) ProtoMessage() {}

func (x *MSG_C_COMMON_REQ) ProtoReflect() protoreflect.Message {
	mi := &file_blackred_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MSG_C_COMMON_REQ.ProtoReflect.Descriptor instead.
func (*MSG_C_COMMON_REQ) Descriptor() ([]byte, []int) {
	return file_blackred_proto_rawDescGZIP(), []int{3}
}

// 通用服务端返回
type MSG_C_COMMON_RESP struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result uint32 `protobuf:"varint,2,opt,name=result,proto3" json:"result,omitempty"` // 0：正常
}

func (x *MSG_C_COMMON_RESP) Reset() {
	*x = MSG_C_COMMON_RESP{}
	if protoimpl.UnsafeEnabled {
		mi := &file_blackred_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MSG_C_COMMON_RESP) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MSG_C_COMMON_RESP) ProtoMessage() {}

func (x *MSG_C_COMMON_RESP) ProtoReflect() protoreflect.Message {
	mi := &file_blackred_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MSG_C_COMMON_RESP.ProtoReflect.Descriptor instead.
func (*MSG_C_COMMON_RESP) Descriptor() ([]byte, []int) {
	return file_blackred_proto_rawDescGZIP(), []int{4}
}

func (x *MSG_C_COMMON_RESP) GetResult() uint32 {
	if x != nil {
		return x.Result
	}
	return 0
}

// 桌子的全部信息
type MSG_C_GET_TABLE_STATUS_RESP struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LevelDesc      *platform.BlackredLevelDesc `protobuf:"bytes,1,opt,name=level_desc,json=levelDesc,proto3" json:"level_desc,omitempty"`                                       // 桌子静态数据
	PlayersOnline  uint32                      `protobuf:"varint,2,opt,name=players_online,json=playersOnline,proto3" json:"players_online,omitempty"`                          // 用户数量
	GamePhase      GamePhase                   `protobuf:"varint,3,opt,name=game_phase,json=gamePhase,proto3,enum=com.cw.chess.blackred.GamePhase" json:"game_phase,omitempty"` // 游戏进度状态
	TimeLeft       uint32                      `protobuf:"varint,4,opt,name=time_left,json=timeLeft,proto3" json:"time_left,omitempty"`                                         // 剩余显示时间
	GameUser       *platform.GameUser          `protobuf:"bytes,5,opt,name=game_user,json=gameUser,proto3" json:"game_user,omitempty"`                                          // 自己
	GameID         string                      `protobuf:"bytes,6,opt,name=gameID,proto3" json:"gameID,omitempty"`                                                              // 本局牌局ID
	TotalCurrency0 uint32                      `protobuf:"varint,7,opt,name=total_currency0,json=totalCurrency0,proto3" json:"total_currency0,omitempty"`                       // 所有用户总共下注（方）
	TotalCurrency1 uint32                      `protobuf:"varint,8,opt,name=total_currency1,json=totalCurrency1,proto3" json:"total_currency1,omitempty"`                       // 所有用户总共下注（梅）
	TotalCurrency2 uint32                      `protobuf:"varint,9,opt,name=total_currency2,json=totalCurrency2,proto3" json:"total_currency2,omitempty"`                       // 所有用户总共下注（红）
	TotalCurrency3 uint32                      `protobuf:"varint,10,opt,name=total_currency3,json=totalCurrency3,proto3" json:"total_currency3,omitempty"`                      // 所有用户总共下注（黑）
	TotalCurrency4 uint32                      `protobuf:"varint,11,opt,name=total_currency4,json=totalCurrency4,proto3" json:"total_currency4,omitempty"`                      // 所有用户总共下注（大小王）
	TotalCurrency5 uint32                      `protobuf:"varint,12,opt,name=total_currency5,json=totalCurrency5,proto3" json:"total_currency5,omitempty"`                      // 所有用户总共下注（红色）
	TotalCurrency6 uint32                      `protobuf:"varint,13,opt,name=total_currency6,json=totalCurrency6,proto3" json:"total_currency6,omitempty"`                      // 所有用户总共下注（黑色）
	UserBetValue0  uint32                      `protobuf:"varint,14,opt,name=user_bet_value0,json=userBetValue0,proto3" json:"user_bet_value0,omitempty"`                       // 用户累计下注（方）
	UserBetValue1  uint32                      `protobuf:"varint,15,opt,name=user_bet_value1,json=userBetValue1,proto3" json:"user_bet_value1,omitempty"`                       // 用户累计下注（梅）
	UserBetValue2  uint32                      `protobuf:"varint,16,opt,name=user_bet_value2,json=userBetValue2,proto3" json:"user_bet_value2,omitempty"`                       // 用户累计下注（红）
	UserBetValue3  uint32                      `protobuf:"varint,17,opt,name=user_bet_value3,json=userBetValue3,proto3" json:"user_bet_value3,omitempty"`                       // 用户累计下注（黑）
	UserBetValue4  uint32                      `protobuf:"varint,18,opt,name=user_bet_value4,json=userBetValue4,proto3" json:"user_bet_value4,omitempty"`                       // 用户累计下注（大小王）
	UserBetValue5  uint32                      `protobuf:"varint,19,opt,name=user_bet_value5,json=userBetValue5,proto3" json:"user_bet_value5,omitempty"`                       // 用户累计下注（红色）
	UserBetValue6  uint32                      `protobuf:"varint,20,opt,name=user_bet_value6,json=userBetValue6,proto3" json:"user_bet_value6,omitempty"`                       // 用户累计下注（黑色）
	HistoryNums    []uint32                    `protobuf:"varint,21,rep,packed,name=history_nums,json=historyNums,proto3" json:"history_nums,omitempty"`                        // 历史记录
	Chip           []uint32                    `protobuf:"varint,22,rep,packed,name=chip,proto3" json:"chip,omitempty"`                                                         // /1/5/10/50/100
	TotalTime      uint32                      `protobuf:"varint,23,opt,name=total_time,json=totalTime,proto3" json:"total_time,omitempty"`                                     // 总时长
	Card           uint32                      `protobuf:"varint,24,opt,name=card,proto3" json:"card,omitempty"`
}

func (x *MSG_C_GET_TABLE_STATUS_RESP) Reset() {
	*x = MSG_C_GET_TABLE_STATUS_RESP{}
	if protoimpl.UnsafeEnabled {
		mi := &file_blackred_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MSG_C_GET_TABLE_STATUS_RESP) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MSG_C_GET_TABLE_STATUS_RESP) ProtoMessage() {}

func (x *MSG_C_GET_TABLE_STATUS_RESP) ProtoReflect() protoreflect.Message {
	mi := &file_blackred_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MSG_C_GET_TABLE_STATUS_RESP.ProtoReflect.Descriptor instead.
func (*MSG_C_GET_TABLE_STATUS_RESP) Descriptor() ([]byte, []int) {
	return file_blackred_proto_rawDescGZIP(), []int{5}
}

func (x *MSG_C_GET_TABLE_STATUS_RESP) GetLevelDesc() *platform.BlackredLevelDesc {
	if x != nil {
		return x.LevelDesc
	}
	return nil
}

func (x *MSG_C_GET_TABLE_STATUS_RESP) GetPlayersOnline() uint32 {
	if x != nil {
		return x.PlayersOnline
	}
	return 0
}

func (x *MSG_C_GET_TABLE_STATUS_RESP) GetGamePhase() GamePhase {
	if x != nil {
		return x.GamePhase
	}
	return GamePhase_PHS_INVALID
}

func (x *MSG_C_GET_TABLE_STATUS_RESP) GetTimeLeft() uint32 {
	if x != nil {
		return x.TimeLeft
	}
	return 0
}

func (x *MSG_C_GET_TABLE_STATUS_RESP) GetGameUser() *platform.GameUser {
	if x != nil {
		return x.GameUser
	}
	return nil
}

func (x *MSG_C_GET_TABLE_STATUS_RESP) GetGameID() string {
	if x != nil {
		return x.GameID
	}
	return ""
}

func (x *MSG_C_GET_TABLE_STATUS_RESP) GetTotalCurrency0() uint32 {
	if x != nil {
		return x.TotalCurrency0
	}
	return 0
}

func (x *MSG_C_GET_TABLE_STATUS_RESP) GetTotalCurrency1() uint32 {
	if x != nil {
		return x.TotalCurrency1
	}
	return 0
}

func (x *MSG_C_GET_TABLE_STATUS_RESP) GetTotalCurrency2() uint32 {
	if x != nil {
		return x.TotalCurrency2
	}
	return 0
}

func (x *MSG_C_GET_TABLE_STATUS_RESP) GetTotalCurrency3() uint32 {
	if x != nil {
		return x.TotalCurrency3
	}
	return 0
}

func (x *MSG_C_GET_TABLE_STATUS_RESP) GetTotalCurrency4() uint32 {
	if x != nil {
		return x.TotalCurrency4
	}
	return 0
}

func (x *MSG_C_GET_TABLE_STATUS_RESP) GetTotalCurrency5() uint32 {
	if x != nil {
		return x.TotalCurrency5
	}
	return 0
}

func (x *MSG_C_GET_TABLE_STATUS_RESP) GetTotalCurrency6() uint32 {
	if x != nil {
		return x.TotalCurrency6
	}
	return 0
}

func (x *MSG_C_GET_TABLE_STATUS_RESP) GetUserBetValue0() uint32 {
	if x != nil {
		return x.UserBetValue0
	}
	return 0
}

func (x *MSG_C_GET_TABLE_STATUS_RESP) GetUserBetValue1() uint32 {
	if x != nil {
		return x.UserBetValue1
	}
	return 0
}

func (x *MSG_C_GET_TABLE_STATUS_RESP) GetUserBetValue2() uint32 {
	if x != nil {
		return x.UserBetValue2
	}
	return 0
}

func (x *MSG_C_GET_TABLE_STATUS_RESP) GetUserBetValue3() uint32 {
	if x != nil {
		return x.UserBetValue3
	}
	return 0
}

func (x *MSG_C_GET_TABLE_STATUS_RESP) GetUserBetValue4() uint32 {
	if x != nil {
		return x.UserBetValue4
	}
	return 0
}

func (x *MSG_C_GET_TABLE_STATUS_RESP) GetUserBetValue5() uint32 {
	if x != nil {
		return x.UserBetValue5
	}
	return 0
}

func (x *MSG_C_GET_TABLE_STATUS_RESP) GetUserBetValue6() uint32 {
	if x != nil {
		return x.UserBetValue6
	}
	return 0
}

func (x *MSG_C_GET_TABLE_STATUS_RESP) GetHistoryNums() []uint32 {
	if x != nil {
		return x.HistoryNums
	}
	return nil
}

func (x *MSG_C_GET_TABLE_STATUS_RESP) GetChip() []uint32 {
	if x != nil {
		return x.Chip
	}
	return nil
}

func (x *MSG_C_GET_TABLE_STATUS_RESP) GetTotalTime() uint32 {
	if x != nil {
		return x.TotalTime
	}
	return 0
}

func (x *MSG_C_GET_TABLE_STATUS_RESP) GetCard() uint32 {
	if x != nil {
		return x.Card
	}
	return 0
}

type MSG_C_GAME_READY_3_RESP struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Times         uint32 `protobuf:"varint,1,opt,name=times,proto3" json:"times,omitempty"`                                      //（对于teenpatti来说，业务不需要倒计时，但是技术需要，所以当客户端收到此协议，马上就回复确认包CMD_C_GAME_READY_COMFIRM_REQ，这个时间过后，如果服务器没有收到，会认为用户掉线了）
	PlayersOnline uint32 `protobuf:"varint,2,opt,name=players_online,json=playersOnline,proto3" json:"players_online,omitempty"` // 在线用户数量
}

func (x *MSG_C_GAME_READY_3_RESP) Reset() {
	*x = MSG_C_GAME_READY_3_RESP{}
	if protoimpl.UnsafeEnabled {
		mi := &file_blackred_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MSG_C_GAME_READY_3_RESP) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MSG_C_GAME_READY_3_RESP) ProtoMessage() {}

func (x *MSG_C_GAME_READY_3_RESP) ProtoReflect() protoreflect.Message {
	mi := &file_blackred_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MSG_C_GAME_READY_3_RESP.ProtoReflect.Descriptor instead.
func (*MSG_C_GAME_READY_3_RESP) Descriptor() ([]byte, []int) {
	return file_blackred_proto_rawDescGZIP(), []int{6}
}

func (x *MSG_C_GAME_READY_3_RESP) GetTimes() uint32 {
	if x != nil {
		return x.Times
	}
	return 0
}

func (x *MSG_C_GAME_READY_3_RESP) GetPlayersOnline() uint32 {
	if x != nil {
		return x.PlayersOnline
	}
	return 0
}

// 通知游戏开始下注
type MSG_C_GAME_START_BET_RESP struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TimeLeft      uint32 `protobuf:"varint,1,opt,name=time_left,json=timeLeft,proto3" json:"time_left,omitempty"`                // 操作时间
	GameID        string `protobuf:"bytes,2,opt,name=gameID,proto3" json:"gameID,omitempty"`                                     // 本局牌局ID
	PlayersOnline uint32 `protobuf:"varint,3,opt,name=players_online,json=playersOnline,proto3" json:"players_online,omitempty"` // 在线用户数量
}

func (x *MSG_C_GAME_START_BET_RESP) Reset() {
	*x = MSG_C_GAME_START_BET_RESP{}
	if protoimpl.UnsafeEnabled {
		mi := &file_blackred_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MSG_C_GAME_START_BET_RESP) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MSG_C_GAME_START_BET_RESP) ProtoMessage() {}

func (x *MSG_C_GAME_START_BET_RESP) ProtoReflect() protoreflect.Message {
	mi := &file_blackred_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MSG_C_GAME_START_BET_RESP.ProtoReflect.Descriptor instead.
func (*MSG_C_GAME_START_BET_RESP) Descriptor() ([]byte, []int) {
	return file_blackred_proto_rawDescGZIP(), []int{7}
}

func (x *MSG_C_GAME_START_BET_RESP) GetTimeLeft() uint32 {
	if x != nil {
		return x.TimeLeft
	}
	return 0
}

func (x *MSG_C_GAME_START_BET_RESP) GetGameID() string {
	if x != nil {
		return x.GameID
	}
	return ""
}

func (x *MSG_C_GAME_START_BET_RESP) GetPlayersOnline() uint32 {
	if x != nil {
		return x.PlayersOnline
	}
	return 0
}

type MSG_C_GAME_BET_REQ struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Region   uint32 `protobuf:"varint,1,opt,name=region,proto3" json:"region,omitempty"`                     // 区域0-2
	BetValue uint32 `protobuf:"varint,2,opt,name=bet_value,json=betValue,proto3" json:"bet_value,omitempty"` // 下注的值
}

func (x *MSG_C_GAME_BET_REQ) Reset() {
	*x = MSG_C_GAME_BET_REQ{}
	if protoimpl.UnsafeEnabled {
		mi := &file_blackred_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MSG_C_GAME_BET_REQ) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MSG_C_GAME_BET_REQ) ProtoMessage() {}

func (x *MSG_C_GAME_BET_REQ) ProtoReflect() protoreflect.Message {
	mi := &file_blackred_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MSG_C_GAME_BET_REQ.ProtoReflect.Descriptor instead.
func (*MSG_C_GAME_BET_REQ) Descriptor() ([]byte, []int) {
	return file_blackred_proto_rawDescGZIP(), []int{8}
}

func (x *MSG_C_GAME_BET_REQ) GetRegion() uint32 {
	if x != nil {
		return x.Region
	}
	return 0
}

func (x *MSG_C_GAME_BET_REQ) GetBetValue() uint32 {
	if x != nil {
		return x.BetValue
	}
	return 0
}

type MSG_C_USER_BET_OTHER_RESP struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Region         uint32 `protobuf:"varint,1,opt,name=region,proto3" json:"region,omitempty"`                                       // 下注的区域0-6
	BetValue       uint32 `protobuf:"varint,2,opt,name=bet_value,json=betValue,proto3" json:"bet_value,omitempty"`                   // 下注的值
	TotalCurrency0 uint32 `protobuf:"varint,3,opt,name=total_currency0,json=totalCurrency0,proto3" json:"total_currency0,omitempty"` // 所有用户总共下注（方）
	TotalCurrency1 uint32 `protobuf:"varint,4,opt,name=total_currency1,json=totalCurrency1,proto3" json:"total_currency1,omitempty"` // 所有用户总共下注（梅）
	TotalCurrency2 uint32 `protobuf:"varint,5,opt,name=total_currency2,json=totalCurrency2,proto3" json:"total_currency2,omitempty"` // 所有用户总共下注（红）
	TotalCurrency3 uint32 `protobuf:"varint,6,opt,name=total_currency3,json=totalCurrency3,proto3" json:"total_currency3,omitempty"` // 所有用户总共下注（黑）
	TotalCurrency4 uint32 `protobuf:"varint,7,opt,name=total_currency4,json=totalCurrency4,proto3" json:"total_currency4,omitempty"` // 所有用户总共下注（大小王）
	TotalCurrency5 uint32 `protobuf:"varint,8,opt,name=total_currency5,json=totalCurrency5,proto3" json:"total_currency5,omitempty"` // 所有用户总共下注（红色）
	TotalCurrency6 uint32 `protobuf:"varint,9,opt,name=total_currency6,json=totalCurrency6,proto3" json:"total_currency6,omitempty"` // 所有用户总共下注（黑色）
	PlayersOnline  uint32 `protobuf:"varint,10,opt,name=players_online,json=playersOnline,proto3" json:"players_online,omitempty"`   // 在线用户数量
}

func (x *MSG_C_USER_BET_OTHER_RESP) Reset() {
	*x = MSG_C_USER_BET_OTHER_RESP{}
	if protoimpl.UnsafeEnabled {
		mi := &file_blackred_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MSG_C_USER_BET_OTHER_RESP) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MSG_C_USER_BET_OTHER_RESP) ProtoMessage() {}

func (x *MSG_C_USER_BET_OTHER_RESP) ProtoReflect() protoreflect.Message {
	mi := &file_blackred_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MSG_C_USER_BET_OTHER_RESP.ProtoReflect.Descriptor instead.
func (*MSG_C_USER_BET_OTHER_RESP) Descriptor() ([]byte, []int) {
	return file_blackred_proto_rawDescGZIP(), []int{9}
}

func (x *MSG_C_USER_BET_OTHER_RESP) GetRegion() uint32 {
	if x != nil {
		return x.Region
	}
	return 0
}

func (x *MSG_C_USER_BET_OTHER_RESP) GetBetValue() uint32 {
	if x != nil {
		return x.BetValue
	}
	return 0
}

func (x *MSG_C_USER_BET_OTHER_RESP) GetTotalCurrency0() uint32 {
	if x != nil {
		return x.TotalCurrency0
	}
	return 0
}

func (x *MSG_C_USER_BET_OTHER_RESP) GetTotalCurrency1() uint32 {
	if x != nil {
		return x.TotalCurrency1
	}
	return 0
}

func (x *MSG_C_USER_BET_OTHER_RESP) GetTotalCurrency2() uint32 {
	if x != nil {
		return x.TotalCurrency2
	}
	return 0
}

func (x *MSG_C_USER_BET_OTHER_RESP) GetTotalCurrency3() uint32 {
	if x != nil {
		return x.TotalCurrency3
	}
	return 0
}

func (x *MSG_C_USER_BET_OTHER_RESP) GetTotalCurrency4() uint32 {
	if x != nil {
		return x.TotalCurrency4
	}
	return 0
}

func (x *MSG_C_USER_BET_OTHER_RESP) GetTotalCurrency5() uint32 {
	if x != nil {
		return x.TotalCurrency5
	}
	return 0
}

func (x *MSG_C_USER_BET_OTHER_RESP) GetTotalCurrency6() uint32 {
	if x != nil {
		return x.TotalCurrency6
	}
	return 0
}

func (x *MSG_C_USER_BET_OTHER_RESP) GetPlayersOnline() uint32 {
	if x != nil {
		return x.PlayersOnline
	}
	return 0
}

type MSG_C_GAME_BET_RESP struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GameUser       *platform.GameUser `protobuf:"bytes,1,opt,name=game_user,json=gameUser,proto3" json:"game_user,omitempty"`                     // 下注用户
	Region         uint32             `protobuf:"varint,2,opt,name=region,proto3" json:"region,omitempty"`                                        // 下注的区域0-6
	BetValue       uint32             `protobuf:"varint,3,opt,name=bet_value,json=betValue,proto3" json:"bet_value,omitempty"`                    // 下注的值
	Result         uint32             `protobuf:"varint,4,opt,name=result,proto3" json:"result,omitempty"`                                        // 0：正确；103：用户余额不够；其他错误
	TotalCurrency0 uint32             `protobuf:"varint,5,opt,name=total_currency0,json=totalCurrency0,proto3" json:"total_currency0,omitempty"`  // 所有用户总共下注（方）
	TotalCurrency1 uint32             `protobuf:"varint,6,opt,name=total_currency1,json=totalCurrency1,proto3" json:"total_currency1,omitempty"`  // 所有用户总共下注（梅）
	TotalCurrency2 uint32             `protobuf:"varint,7,opt,name=total_currency2,json=totalCurrency2,proto3" json:"total_currency2,omitempty"`  // 所有用户总共下注（红）
	TotalCurrency3 uint32             `protobuf:"varint,8,opt,name=total_currency3,json=totalCurrency3,proto3" json:"total_currency3,omitempty"`  // 所有用户总共下注（黑）
	TotalCurrency4 uint32             `protobuf:"varint,9,opt,name=total_currency4,json=totalCurrency4,proto3" json:"total_currency4,omitempty"`  // 所有用户总共下注（大小王）
	TotalCurrency5 uint32             `protobuf:"varint,10,opt,name=total_currency5,json=totalCurrency5,proto3" json:"total_currency5,omitempty"` // 所有用户总共下注（红色）
	TotalCurrency6 uint32             `protobuf:"varint,11,opt,name=total_currency6,json=totalCurrency6,proto3" json:"total_currency6,omitempty"` // 所有用户总共下注（黑色）
	UserBetValue0  uint32             `protobuf:"varint,12,opt,name=user_bet_value0,json=userBetValue0,proto3" json:"user_bet_value0,omitempty"`  // 用户累计下注（方）
	UserBetValue1  uint32             `protobuf:"varint,13,opt,name=user_bet_value1,json=userBetValue1,proto3" json:"user_bet_value1,omitempty"`  // 用户累计下注（梅）
	UserBetValue2  uint32             `protobuf:"varint,14,opt,name=user_bet_value2,json=userBetValue2,proto3" json:"user_bet_value2,omitempty"`  // 用户累计下注（红）
	UserBetValue3  uint32             `protobuf:"varint,15,opt,name=user_bet_value3,json=userBetValue3,proto3" json:"user_bet_value3,omitempty"`  // 用户累计下注（黑）
	UserBetValue4  uint32             `protobuf:"varint,16,opt,name=user_bet_value4,json=userBetValue4,proto3" json:"user_bet_value4,omitempty"`  // 用户累计下注（大小王）
	UserBetValue5  uint32             `protobuf:"varint,17,opt,name=user_bet_value5,json=userBetValue5,proto3" json:"user_bet_value5,omitempty"`  // 用户累计下注（红色）
	UserBetValue6  uint32             `protobuf:"varint,18,opt,name=user_bet_value6,json=userBetValue6,proto3" json:"user_bet_value6,omitempty"`  // 用户累计下注（黑色）
	UserCurrency   int32              `protobuf:"varint,19,opt,name=user_currency,json=userCurrency,proto3" json:"user_currency,omitempty"`       // 下注后，用户的剩下的钱
}

func (x *MSG_C_GAME_BET_RESP) Reset() {
	*x = MSG_C_GAME_BET_RESP{}
	if protoimpl.UnsafeEnabled {
		mi := &file_blackred_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MSG_C_GAME_BET_RESP) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MSG_C_GAME_BET_RESP) ProtoMessage() {}

func (x *MSG_C_GAME_BET_RESP) ProtoReflect() protoreflect.Message {
	mi := &file_blackred_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MSG_C_GAME_BET_RESP.ProtoReflect.Descriptor instead.
func (*MSG_C_GAME_BET_RESP) Descriptor() ([]byte, []int) {
	return file_blackred_proto_rawDescGZIP(), []int{10}
}

func (x *MSG_C_GAME_BET_RESP) GetGameUser() *platform.GameUser {
	if x != nil {
		return x.GameUser
	}
	return nil
}

func (x *MSG_C_GAME_BET_RESP) GetRegion() uint32 {
	if x != nil {
		return x.Region
	}
	return 0
}

func (x *MSG_C_GAME_BET_RESP) GetBetValue() uint32 {
	if x != nil {
		return x.BetValue
	}
	return 0
}

func (x *MSG_C_GAME_BET_RESP) GetResult() uint32 {
	if x != nil {
		return x.Result
	}
	return 0
}

func (x *MSG_C_GAME_BET_RESP) GetTotalCurrency0() uint32 {
	if x != nil {
		return x.TotalCurrency0
	}
	return 0
}

func (x *MSG_C_GAME_BET_RESP) GetTotalCurrency1() uint32 {
	if x != nil {
		return x.TotalCurrency1
	}
	return 0
}

func (x *MSG_C_GAME_BET_RESP) GetTotalCurrency2() uint32 {
	if x != nil {
		return x.TotalCurrency2
	}
	return 0
}

func (x *MSG_C_GAME_BET_RESP) GetTotalCurrency3() uint32 {
	if x != nil {
		return x.TotalCurrency3
	}
	return 0
}

func (x *MSG_C_GAME_BET_RESP) GetTotalCurrency4() uint32 {
	if x != nil {
		return x.TotalCurrency4
	}
	return 0
}

func (x *MSG_C_GAME_BET_RESP) GetTotalCurrency5() uint32 {
	if x != nil {
		return x.TotalCurrency5
	}
	return 0
}

func (x *MSG_C_GAME_BET_RESP) GetTotalCurrency6() uint32 {
	if x != nil {
		return x.TotalCurrency6
	}
	return 0
}

func (x *MSG_C_GAME_BET_RESP) GetUserBetValue0() uint32 {
	if x != nil {
		return x.UserBetValue0
	}
	return 0
}

func (x *MSG_C_GAME_BET_RESP) GetUserBetValue1() uint32 {
	if x != nil {
		return x.UserBetValue1
	}
	return 0
}

func (x *MSG_C_GAME_BET_RESP) GetUserBetValue2() uint32 {
	if x != nil {
		return x.UserBetValue2
	}
	return 0
}

func (x *MSG_C_GAME_BET_RESP) GetUserBetValue3() uint32 {
	if x != nil {
		return x.UserBetValue3
	}
	return 0
}

func (x *MSG_C_GAME_BET_RESP) GetUserBetValue4() uint32 {
	if x != nil {
		return x.UserBetValue4
	}
	return 0
}

func (x *MSG_C_GAME_BET_RESP) GetUserBetValue5() uint32 {
	if x != nil {
		return x.UserBetValue5
	}
	return 0
}

func (x *MSG_C_GAME_BET_RESP) GetUserBetValue6() uint32 {
	if x != nil {
		return x.UserBetValue6
	}
	return 0
}

func (x *MSG_C_GAME_BET_RESP) GetUserCurrency() int32 {
	if x != nil {
		return x.UserCurrency
	}
	return 0
}

type MSG_C_GAME_DEALCARDS_RESP struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TimeLeft uint32 `protobuf:"varint,1,opt,name=time_left,json=timeLeft,proto3" json:"time_left,omitempty"` // 等待时间
	Card     uint32 `protobuf:"varint,2,opt,name=card,proto3" json:"card,omitempty"`                         // 结果
	Result1  uint32 `protobuf:"varint,3,opt,name=result1,proto3" json:"result1,omitempty"`                   // 0-4，方梅红黑、大小王区域结果
	Result2  uint32 `protobuf:"varint,4,opt,name=result2,proto3" json:"result2,omitempty"`                   // 红黑，5-红，6-黑
}

func (x *MSG_C_GAME_DEALCARDS_RESP) Reset() {
	*x = MSG_C_GAME_DEALCARDS_RESP{}
	if protoimpl.UnsafeEnabled {
		mi := &file_blackred_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MSG_C_GAME_DEALCARDS_RESP) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MSG_C_GAME_DEALCARDS_RESP) ProtoMessage() {}

func (x *MSG_C_GAME_DEALCARDS_RESP) ProtoReflect() protoreflect.Message {
	mi := &file_blackred_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MSG_C_GAME_DEALCARDS_RESP.ProtoReflect.Descriptor instead.
func (*MSG_C_GAME_DEALCARDS_RESP) Descriptor() ([]byte, []int) {
	return file_blackred_proto_rawDescGZIP(), []int{11}
}

func (x *MSG_C_GAME_DEALCARDS_RESP) GetTimeLeft() uint32 {
	if x != nil {
		return x.TimeLeft
	}
	return 0
}

func (x *MSG_C_GAME_DEALCARDS_RESP) GetCard() uint32 {
	if x != nil {
		return x.Card
	}
	return 0
}

func (x *MSG_C_GAME_DEALCARDS_RESP) GetResult1() uint32 {
	if x != nil {
		return x.Result1
	}
	return 0
}

func (x *MSG_C_GAME_DEALCARDS_RESP) GetResult2() uint32 {
	if x != nil {
		return x.Result2
	}
	return 0
}

// 单个用户结算信息
type UserSettle struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GameUser      *platform.GameUser `protobuf:"bytes,1,opt,name=game_user,json=gameUser,proto3" json:"game_user,omitempty"`                   // 下注用户
	BGame         uint32             `protobuf:"varint,2,opt,name=b_game,json=bGame,proto3" json:"b_game,omitempty"`                           // 用户是否参与
	UserBetValue0 uint32             `protobuf:"varint,3,opt,name=user_bet_value0,json=userBetValue0,proto3" json:"user_bet_value0,omitempty"` // 用户累计下注（方）
	UserBetValue1 uint32             `protobuf:"varint,4,opt,name=user_bet_value1,json=userBetValue1,proto3" json:"user_bet_value1,omitempty"` // 用户累计下注（梅）
	UserBetValue2 uint32             `protobuf:"varint,5,opt,name=user_bet_value2,json=userBetValue2,proto3" json:"user_bet_value2,omitempty"` // 用户累计下注（红）
	UserBetValue3 uint32             `protobuf:"varint,6,opt,name=user_bet_value3,json=userBetValue3,proto3" json:"user_bet_value3,omitempty"` // 用户累计下注（黑）
	UserBetValue4 uint32             `protobuf:"varint,7,opt,name=user_bet_value4,json=userBetValue4,proto3" json:"user_bet_value4,omitempty"` // 用户累计下注（大小王）
	UserBetValue5 uint32             `protobuf:"varint,8,opt,name=user_bet_value5,json=userBetValue5,proto3" json:"user_bet_value5,omitempty"` // 用户累计下注（红色）
	UserBetValue6 uint32             `protobuf:"varint,9,opt,name=user_bet_value6,json=userBetValue6,proto3" json:"user_bet_value6,omitempty"` // 用户累计下注（黑色）
	WinCurrency   int32              `protobuf:"varint,10,opt,name=win_currency,json=winCurrency,proto3" json:"win_currency,omitempty"`        // 用户的金币获得（有正有负）
	UserCurrency  int32              `protobuf:"varint,11,opt,name=user_currency,json=userCurrency,proto3" json:"user_currency,omitempty"`     // 结算后，用户的剩下的钱
	NotBetTimes   int32              `protobuf:"varint,12,opt,name=not_bet_times,json=notBetTimes,proto3" json:"not_bet_times,omitempty"`      // 累计没有下注次数
}

func (x *UserSettle) Reset() {
	*x = UserSettle{}
	if protoimpl.UnsafeEnabled {
		mi := &file_blackred_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserSettle) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserSettle) ProtoMessage() {}

func (x *UserSettle) ProtoReflect() protoreflect.Message {
	mi := &file_blackred_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserSettle.ProtoReflect.Descriptor instead.
func (*UserSettle) Descriptor() ([]byte, []int) {
	return file_blackred_proto_rawDescGZIP(), []int{12}
}

func (x *UserSettle) GetGameUser() *platform.GameUser {
	if x != nil {
		return x.GameUser
	}
	return nil
}

func (x *UserSettle) GetBGame() uint32 {
	if x != nil {
		return x.BGame
	}
	return 0
}

func (x *UserSettle) GetUserBetValue0() uint32 {
	if x != nil {
		return x.UserBetValue0
	}
	return 0
}

func (x *UserSettle) GetUserBetValue1() uint32 {
	if x != nil {
		return x.UserBetValue1
	}
	return 0
}

func (x *UserSettle) GetUserBetValue2() uint32 {
	if x != nil {
		return x.UserBetValue2
	}
	return 0
}

func (x *UserSettle) GetUserBetValue3() uint32 {
	if x != nil {
		return x.UserBetValue3
	}
	return 0
}

func (x *UserSettle) GetUserBetValue4() uint32 {
	if x != nil {
		return x.UserBetValue4
	}
	return 0
}

func (x *UserSettle) GetUserBetValue5() uint32 {
	if x != nil {
		return x.UserBetValue5
	}
	return 0
}

func (x *UserSettle) GetUserBetValue6() uint32 {
	if x != nil {
		return x.UserBetValue6
	}
	return 0
}

func (x *UserSettle) GetWinCurrency() int32 {
	if x != nil {
		return x.WinCurrency
	}
	return 0
}

func (x *UserSettle) GetUserCurrency() int32 {
	if x != nil {
		return x.UserCurrency
	}
	return 0
}

func (x *UserSettle) GetNotBetTimes() int32 {
	if x != nil {
		return x.NotBetTimes
	}
	return 0
}

// 结算
type MSG_C_GAME_SETTLE_RESP struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserSettle  *UserSettle `protobuf:"bytes,1,opt,name=user_settle,json=userSettle,proto3" json:"user_settle,omitempty"`            // 自己的结算
	HistoryNums []uint32    `protobuf:"varint,2,rep,packed,name=history_nums,json=historyNums,proto3" json:"history_nums,omitempty"` // 历史记录
	Card        uint32      `protobuf:"varint,3,opt,name=card,proto3" json:"card,omitempty"`                                         // 结果
	Result1     uint32      `protobuf:"varint,4,opt,name=result1,proto3" json:"result1,omitempty"`                                   // 0-4，方梅红黑、大小王区域结果
	Result2     uint32      `protobuf:"varint,5,opt,name=result2,proto3" json:"result2,omitempty"`                                   // 红黑，5-红，6-黑
}

func (x *MSG_C_GAME_SETTLE_RESP) Reset() {
	*x = MSG_C_GAME_SETTLE_RESP{}
	if protoimpl.UnsafeEnabled {
		mi := &file_blackred_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MSG_C_GAME_SETTLE_RESP) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MSG_C_GAME_SETTLE_RESP) ProtoMessage() {}

func (x *MSG_C_GAME_SETTLE_RESP) ProtoReflect() protoreflect.Message {
	mi := &file_blackred_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MSG_C_GAME_SETTLE_RESP.ProtoReflect.Descriptor instead.
func (*MSG_C_GAME_SETTLE_RESP) Descriptor() ([]byte, []int) {
	return file_blackred_proto_rawDescGZIP(), []int{13}
}

func (x *MSG_C_GAME_SETTLE_RESP) GetUserSettle() *UserSettle {
	if x != nil {
		return x.UserSettle
	}
	return nil
}

func (x *MSG_C_GAME_SETTLE_RESP) GetHistoryNums() []uint32 {
	if x != nil {
		return x.HistoryNums
	}
	return nil
}

func (x *MSG_C_GAME_SETTLE_RESP) GetCard() uint32 {
	if x != nil {
		return x.Card
	}
	return 0
}

func (x *MSG_C_GAME_SETTLE_RESP) GetResult1() uint32 {
	if x != nil {
		return x.Result1
	}
	return 0
}

func (x *MSG_C_GAME_SETTLE_RESP) GetResult2() uint32 {
	if x != nil {
		return x.Result2
	}
	return 0
}

// 用户聊天请求
type MSG_C_CHAT_REQ struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChatType    uint32 `protobuf:"varint,1,opt,name=chat_type,json=chatType,proto3" json:"chat_type,omitempty"`        // 聊天类型1：固定语句聊天；2：自由语句聊天
	Type_1Value string `protobuf:"bytes,2,opt,name=type_1_value,json=type1Value,proto3" json:"type_1_value,omitempty"` // 固定语句聊天的值
	Type_2Value string `protobuf:"bytes,3,opt,name=type_2_value,json=type2Value,proto3" json:"type_2_value,omitempty"` // 自由语句聊天的值
}

func (x *MSG_C_CHAT_REQ) Reset() {
	*x = MSG_C_CHAT_REQ{}
	if protoimpl.UnsafeEnabled {
		mi := &file_blackred_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MSG_C_CHAT_REQ) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MSG_C_CHAT_REQ) ProtoMessage() {}

func (x *MSG_C_CHAT_REQ) ProtoReflect() protoreflect.Message {
	mi := &file_blackred_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MSG_C_CHAT_REQ.ProtoReflect.Descriptor instead.
func (*MSG_C_CHAT_REQ) Descriptor() ([]byte, []int) {
	return file_blackred_proto_rawDescGZIP(), []int{14}
}

func (x *MSG_C_CHAT_REQ) GetChatType() uint32 {
	if x != nil {
		return x.ChatType
	}
	return 0
}

func (x *MSG_C_CHAT_REQ) GetType_1Value() string {
	if x != nil {
		return x.Type_1Value
	}
	return ""
}

func (x *MSG_C_CHAT_REQ) GetType_2Value() string {
	if x != nil {
		return x.Type_2Value
	}
	return ""
}

// 通知客户端桌子将被解散
type MSG_C_MATCH_FINISH_RESP struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TableId uint32 `protobuf:"varint,1,opt,name=table_id,json=tableId,proto3" json:"table_id,omitempty"`
	Reason  uint32 `protobuf:"varint,2,opt,name=reason,proto3" json:"reason,omitempty"`
}

func (x *MSG_C_MATCH_FINISH_RESP) Reset() {
	*x = MSG_C_MATCH_FINISH_RESP{}
	if protoimpl.UnsafeEnabled {
		mi := &file_blackred_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MSG_C_MATCH_FINISH_RESP) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MSG_C_MATCH_FINISH_RESP) ProtoMessage() {}

func (x *MSG_C_MATCH_FINISH_RESP) ProtoReflect() protoreflect.Message {
	mi := &file_blackred_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MSG_C_MATCH_FINISH_RESP.ProtoReflect.Descriptor instead.
func (*MSG_C_MATCH_FINISH_RESP) Descriptor() ([]byte, []int) {
	return file_blackred_proto_rawDescGZIP(), []int{15}
}

func (x *MSG_C_MATCH_FINISH_RESP) GetTableId() uint32 {
	if x != nil {
		return x.TableId
	}
	return 0
}

func (x *MSG_C_MATCH_FINISH_RESP) GetReason() uint32 {
	if x != nil {
		return x.Reason
	}
	return 0
}

var File_blackred_proto protoreflect.FileDescriptor

var file_blackred_proto_rawDesc = []byte{
	0x0a, 0x0e, 0x62, 0x6c, 0x61, 0x63, 0x6b, 0x72, 0x65, 0x64, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x12, 0x15, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x77, 0x2e, 0x63, 0x68, 0x65, 0x73, 0x73, 0x2e, 0x62,
	0x6c, 0x61, 0x63, 0x6b, 0x72, 0x65, 0x64, 0x1a, 0x0e, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72,
	0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x73, 0x0a, 0x14, 0x42, 0x6c, 0x61, 0x63, 0x6b,
	0x72, 0x65, 0x64, 0x53, 0x74, 0x61, 0x72, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x14, 0x0a, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05,
	0x6c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x33, 0x0a, 0x04, 0x75, 0x73, 0x65, 0x72, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x77, 0x2e, 0x63, 0x68, 0x65,
	0x73, 0x73, 0x2e, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x47, 0x61, 0x6d, 0x65,
	0x55, 0x73, 0x65, 0x72, 0x52, 0x04, 0x75, 0x73, 0x65, 0x72, 0x12, 0x10, 0x0a, 0x03, 0x72, 0x62,
	0x63, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x72, 0x62, 0x63, 0x22, 0x4a, 0x0a, 0x15,
	0x42, 0x6c, 0x61, 0x63, 0x6b, 0x72, 0x65, 0x64, 0x53, 0x74, 0x61, 0x72, 0x74, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x19, 0x0a,
	0x08, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x07, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x49, 0x64, 0x22, 0x3a, 0x0a, 0x09, 0x54, 0x61, 0x62, 0x6c,
	0x65, 0x44, 0x61, 0x74, 0x61, 0x12, 0x19, 0x0a, 0x08, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x49, 0x64,
	0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04,
	0x64, 0x61, 0x74, 0x61, 0x22, 0x12, 0x0a, 0x10, 0x4d, 0x53, 0x47, 0x5f, 0x43, 0x5f, 0x43, 0x4f,
	0x4d, 0x4d, 0x4f, 0x4e, 0x5f, 0x52, 0x45, 0x51, 0x22, 0x2b, 0x0a, 0x11, 0x4d, 0x53, 0x47, 0x5f,
	0x43, 0x5f, 0x43, 0x4f, 0x4d, 0x4d, 0x4f, 0x4e, 0x5f, 0x52, 0x45, 0x53, 0x50, 0x12, 0x16, 0x0a,
	0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x72,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0xe2, 0x07, 0x0a, 0x1b, 0x4d, 0x53, 0x47, 0x5f, 0x43, 0x5f,
	0x47, 0x45, 0x54, 0x5f, 0x54, 0x41, 0x42, 0x4c, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53,
	0x5f, 0x52, 0x45, 0x53, 0x50, 0x12, 0x47, 0x0a, 0x0a, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x5f, 0x64,
	0x65, 0x73, 0x63, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x63, 0x6f, 0x6d, 0x2e,
	0x63, 0x77, 0x2e, 0x63, 0x68, 0x65, 0x73, 0x73, 0x2e, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72,
	0x6d, 0x2e, 0x42, 0x6c, 0x61, 0x63, 0x6b, 0x72, 0x65, 0x64, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x44,
	0x65, 0x73, 0x63, 0x52, 0x09, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x44, 0x65, 0x73, 0x63, 0x12, 0x25,
	0x0a, 0x0e, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x73, 0x5f, 0x6f, 0x6e, 0x6c, 0x69, 0x6e, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x73, 0x4f,
	0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x12, 0x3f, 0x0a, 0x0a, 0x67, 0x61, 0x6d, 0x65, 0x5f, 0x70, 0x68,
	0x61, 0x73, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x20, 0x2e, 0x63, 0x6f, 0x6d, 0x2e,
	0x63, 0x77, 0x2e, 0x63, 0x68, 0x65, 0x73, 0x73, 0x2e, 0x62, 0x6c, 0x61, 0x63, 0x6b, 0x72, 0x65,
	0x64, 0x2e, 0x47, 0x61, 0x6d, 0x65, 0x50, 0x68, 0x61, 0x73, 0x65, 0x52, 0x09, 0x67, 0x61, 0x6d,
	0x65, 0x50, 0x68, 0x61, 0x73, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x6c,
	0x65, 0x66, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x74, 0x69, 0x6d, 0x65, 0x4c,
	0x65, 0x66, 0x74, 0x12, 0x3c, 0x0a, 0x09, 0x67, 0x61, 0x6d, 0x65, 0x5f, 0x75, 0x73, 0x65, 0x72,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x77, 0x2e,
	0x63, 0x68, 0x65, 0x73, 0x73, 0x2e, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x47,
	0x61, 0x6d, 0x65, 0x55, 0x73, 0x65, 0x72, 0x52, 0x08, 0x67, 0x61, 0x6d, 0x65, 0x55, 0x73, 0x65,
	0x72, 0x12, 0x16, 0x0a, 0x06, 0x67, 0x61, 0x6d, 0x65, 0x49, 0x44, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x67, 0x61, 0x6d, 0x65, 0x49, 0x44, 0x12, 0x27, 0x0a, 0x0f, 0x74, 0x6f, 0x74,
	0x61, 0x6c, 0x5f, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x30, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x0e, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63,
	0x79, 0x30, 0x12, 0x27, 0x0a, 0x0f, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x63, 0x75, 0x72, 0x72,
	0x65, 0x6e, 0x63, 0x79, 0x31, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x74, 0x6f, 0x74,
	0x61, 0x6c, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x31, 0x12, 0x27, 0x0a, 0x0f, 0x74,
	0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x32, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x43, 0x75, 0x72, 0x72, 0x65,
	0x6e, 0x63, 0x79, 0x32, 0x12, 0x27, 0x0a, 0x0f, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x63, 0x75,
	0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x33, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x74,
	0x6f, 0x74, 0x61, 0x6c, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x33, 0x12, 0x27, 0x0a,
	0x0f, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x34,
	0x18, 0x0b, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x43, 0x75, 0x72,
	0x72, 0x65, 0x6e, 0x63, 0x79, 0x34, 0x12, 0x27, 0x0a, 0x0f, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f,
	0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x35, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x0e, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x35, 0x12,
	0x27, 0x0a, 0x0f, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63,
	0x79, 0x36, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x43,
	0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x36, 0x12, 0x26, 0x0a, 0x0f, 0x75, 0x73, 0x65, 0x72,
	0x5f, 0x62, 0x65, 0x74, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x30, 0x18, 0x0e, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x0d, 0x75, 0x73, 0x65, 0x72, 0x42, 0x65, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x30,
	0x12, 0x26, 0x0a, 0x0f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x62, 0x65, 0x74, 0x5f, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x31, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x75, 0x73, 0x65, 0x72, 0x42,
	0x65, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x31, 0x12, 0x26, 0x0a, 0x0f, 0x75, 0x73, 0x65, 0x72,
	0x5f, 0x62, 0x65, 0x74, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x32, 0x18, 0x10, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x0d, 0x75, 0x73, 0x65, 0x72, 0x42, 0x65, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x32,
	0x12, 0x26, 0x0a, 0x0f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x62, 0x65, 0x74, 0x5f, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x33, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x75, 0x73, 0x65, 0x72, 0x42,
	0x65, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x33, 0x12, 0x26, 0x0a, 0x0f, 0x75, 0x73, 0x65, 0x72,
	0x5f, 0x62, 0x65, 0x74, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x34, 0x18, 0x12, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x0d, 0x75, 0x73, 0x65, 0x72, 0x42, 0x65, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x34,
	0x12, 0x26, 0x0a, 0x0f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x62, 0x65, 0x74, 0x5f, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x35, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x75, 0x73, 0x65, 0x72, 0x42,
	0x65, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x35, 0x12, 0x26, 0x0a, 0x0f, 0x75, 0x73, 0x65, 0x72,
	0x5f, 0x62, 0x65, 0x74, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x36, 0x18, 0x14, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x0d, 0x75, 0x73, 0x65, 0x72, 0x42, 0x65, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x36,
	0x12, 0x21, 0x0a, 0x0c, 0x68, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x5f, 0x6e, 0x75, 0x6d, 0x73,
	0x18, 0x15, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x0b, 0x68, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x4e,
	0x75, 0x6d, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x68, 0x69, 0x70, 0x18, 0x16, 0x20, 0x03, 0x28,
	0x0d, 0x52, 0x04, 0x63, 0x68, 0x69, 0x70, 0x12, 0x1d, 0x0a, 0x0a, 0x74, 0x6f, 0x74, 0x61, 0x6c,
	0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x17, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x74, 0x6f, 0x74,
	0x61, 0x6c, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x61, 0x72, 0x64, 0x18, 0x18,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x63, 0x61, 0x72, 0x64, 0x22, 0x56, 0x0a, 0x17, 0x4d, 0x53,
	0x47, 0x5f, 0x43, 0x5f, 0x47, 0x41, 0x4d, 0x45, 0x5f, 0x52, 0x45, 0x41, 0x44, 0x59, 0x5f, 0x33,
	0x5f, 0x52, 0x45, 0x53, 0x50, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x12, 0x25, 0x0a, 0x0e, 0x70,
	0x6c, 0x61, 0x79, 0x65, 0x72, 0x73, 0x5f, 0x6f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x0d, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x73, 0x4f, 0x6e, 0x6c, 0x69,
	0x6e, 0x65, 0x22, 0x77, 0x0a, 0x19, 0x4d, 0x53, 0x47, 0x5f, 0x43, 0x5f, 0x47, 0x41, 0x4d, 0x45,
	0x5f, 0x53, 0x54, 0x41, 0x52, 0x54, 0x5f, 0x42, 0x45, 0x54, 0x5f, 0x52, 0x45, 0x53, 0x50, 0x12,
	0x1b, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x6c, 0x65, 0x66, 0x74, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x08, 0x74, 0x69, 0x6d, 0x65, 0x4c, 0x65, 0x66, 0x74, 0x12, 0x16, 0x0a, 0x06,
	0x67, 0x61, 0x6d, 0x65, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x67, 0x61,
	0x6d, 0x65, 0x49, 0x44, 0x12, 0x25, 0x0a, 0x0e, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x73, 0x5f,
	0x6f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x70, 0x6c,
	0x61, 0x79, 0x65, 0x72, 0x73, 0x4f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x22, 0x49, 0x0a, 0x12, 0x4d,
	0x53, 0x47, 0x5f, 0x43, 0x5f, 0x47, 0x41, 0x4d, 0x45, 0x5f, 0x42, 0x45, 0x54, 0x5f, 0x52, 0x45,
	0x51, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x06, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x12, 0x1b, 0x0a, 0x09, 0x62, 0x65, 0x74,
	0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x62, 0x65,
	0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x96, 0x03, 0x0a, 0x19, 0x4d, 0x53, 0x47, 0x5f, 0x43,
	0x5f, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x42, 0x45, 0x54, 0x5f, 0x4f, 0x54, 0x48, 0x45, 0x52, 0x5f,
	0x52, 0x45, 0x53, 0x50, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x12, 0x1b, 0x0a, 0x09,
	0x62, 0x65, 0x74, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x08, 0x62, 0x65, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x27, 0x0a, 0x0f, 0x74, 0x6f, 0x74,
	0x61, 0x6c, 0x5f, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x30, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x0e, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63,
	0x79, 0x30, 0x12, 0x27, 0x0a, 0x0f, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x63, 0x75, 0x72, 0x72,
	0x65, 0x6e, 0x63, 0x79, 0x31, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x74, 0x6f, 0x74,
	0x61, 0x6c, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x31, 0x12, 0x27, 0x0a, 0x0f, 0x74,
	0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x32, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x43, 0x75, 0x72, 0x72, 0x65,
	0x6e, 0x63, 0x79, 0x32, 0x12, 0x27, 0x0a, 0x0f, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x63, 0x75,
	0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x33, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x74,
	0x6f, 0x74, 0x61, 0x6c, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x33, 0x12, 0x27, 0x0a,
	0x0f, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x34,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x43, 0x75, 0x72,
	0x72, 0x65, 0x6e, 0x63, 0x79, 0x34, 0x12, 0x27, 0x0a, 0x0f, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f,
	0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x35, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x0e, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x35, 0x12,
	0x27, 0x0a, 0x0f, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63,
	0x79, 0x36, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x43,
	0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x36, 0x12, 0x25, 0x0a, 0x0e, 0x70, 0x6c, 0x61, 0x79,
	0x65, 0x72, 0x73, 0x5f, 0x6f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x0d, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x73, 0x4f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x22,
	0xfc, 0x05, 0x0a, 0x13, 0x4d, 0x53, 0x47, 0x5f, 0x43, 0x5f, 0x47, 0x41, 0x4d, 0x45, 0x5f, 0x42,
	0x45, 0x54, 0x5f, 0x52, 0x45, 0x53, 0x50, 0x12, 0x3c, 0x0a, 0x09, 0x67, 0x61, 0x6d, 0x65, 0x5f,
	0x75, 0x73, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x63, 0x6f, 0x6d,
	0x2e, 0x63, 0x77, 0x2e, 0x63, 0x68, 0x65, 0x73, 0x73, 0x2e, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f,
	0x72, 0x6d, 0x2e, 0x47, 0x61, 0x6d, 0x65, 0x55, 0x73, 0x65, 0x72, 0x52, 0x08, 0x67, 0x61, 0x6d,
	0x65, 0x55, 0x73, 0x65, 0x72, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x12, 0x1b, 0x0a,
	0x09, 0x62, 0x65, 0x74, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x08, 0x62, 0x65, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x12, 0x27, 0x0a, 0x0f, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x63, 0x75, 0x72, 0x72,
	0x65, 0x6e, 0x63, 0x79, 0x30, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x74, 0x6f, 0x74,
	0x61, 0x6c, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x30, 0x12, 0x27, 0x0a, 0x0f, 0x74,
	0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x31, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x43, 0x75, 0x72, 0x72, 0x65,
	0x6e, 0x63, 0x79, 0x31, 0x12, 0x27, 0x0a, 0x0f, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x63, 0x75,
	0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x32, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x74,
	0x6f, 0x74, 0x61, 0x6c, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x32, 0x12, 0x27, 0x0a,
	0x0f, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x33,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x43, 0x75, 0x72,
	0x72, 0x65, 0x6e, 0x63, 0x79, 0x33, 0x12, 0x27, 0x0a, 0x0f, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f,
	0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x34, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x0e, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x34, 0x12,
	0x27, 0x0a, 0x0f, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63,
	0x79, 0x35, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x43,
	0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x35, 0x12, 0x27, 0x0a, 0x0f, 0x74, 0x6f, 0x74, 0x61,
	0x6c, 0x5f, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x36, 0x18, 0x0b, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x0e, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79,
	0x36, 0x12, 0x26, 0x0a, 0x0f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x62, 0x65, 0x74, 0x5f, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x30, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x75, 0x73, 0x65, 0x72,
	0x42, 0x65, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x30, 0x12, 0x26, 0x0a, 0x0f, 0x75, 0x73, 0x65,
	0x72, 0x5f, 0x62, 0x65, 0x74, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x31, 0x18, 0x0d, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x0d, 0x75, 0x73, 0x65, 0x72, 0x42, 0x65, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x31, 0x12, 0x26, 0x0a, 0x0f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x62, 0x65, 0x74, 0x5f, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x32, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x75, 0x73, 0x65, 0x72,
	0x42, 0x65, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x32, 0x12, 0x26, 0x0a, 0x0f, 0x75, 0x73, 0x65,
	0x72, 0x5f, 0x62, 0x65, 0x74, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x33, 0x18, 0x0f, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x0d, 0x75, 0x73, 0x65, 0x72, 0x42, 0x65, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x33, 0x12, 0x26, 0x0a, 0x0f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x62, 0x65, 0x74, 0x5f, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x34, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x75, 0x73, 0x65, 0x72,
	0x42, 0x65, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x34, 0x12, 0x26, 0x0a, 0x0f, 0x75, 0x73, 0x65,
	0x72, 0x5f, 0x62, 0x65, 0x74, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x35, 0x18, 0x11, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x0d, 0x75, 0x73, 0x65, 0x72, 0x42, 0x65, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x35, 0x12, 0x26, 0x0a, 0x0f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x62, 0x65, 0x74, 0x5f, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x36, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x75, 0x73, 0x65, 0x72,
	0x42, 0x65, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x36, 0x12, 0x23, 0x0a, 0x0d, 0x75, 0x73, 0x65,
	0x72, 0x5f, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x13, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x0c, 0x75, 0x73, 0x65, 0x72, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x22, 0x80,
	0x01, 0x0a, 0x19, 0x4d, 0x53, 0x47, 0x5f, 0x43, 0x5f, 0x47, 0x41, 0x4d, 0x45, 0x5f, 0x44, 0x45,
	0x41, 0x4c, 0x43, 0x41, 0x52, 0x44, 0x53, 0x5f, 0x52, 0x45, 0x53, 0x50, 0x12, 0x1b, 0x0a, 0x09,
	0x74, 0x69, 0x6d, 0x65, 0x5f, 0x6c, 0x65, 0x66, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x08, 0x74, 0x69, 0x6d, 0x65, 0x4c, 0x65, 0x66, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x61, 0x72,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x63, 0x61, 0x72, 0x64, 0x12, 0x18, 0x0a,
	0x07, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x31, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07,
	0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x31, 0x12, 0x18, 0x0a, 0x07, 0x72, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x32, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x32, 0x22, 0xe5, 0x03, 0x0a, 0x0a, 0x55, 0x73, 0x65, 0x72, 0x53, 0x65, 0x74, 0x74, 0x6c, 0x65,
	0x12, 0x3c, 0x0a, 0x09, 0x67, 0x61, 0x6d, 0x65, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x77, 0x2e, 0x63, 0x68, 0x65,
	0x73, 0x73, 0x2e, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x47, 0x61, 0x6d, 0x65,
	0x55, 0x73, 0x65, 0x72, 0x52, 0x08, 0x67, 0x61, 0x6d, 0x65, 0x55, 0x73, 0x65, 0x72, 0x12, 0x15,
	0x0a, 0x06, 0x62, 0x5f, 0x67, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05,
	0x62, 0x47, 0x61, 0x6d, 0x65, 0x12, 0x26, 0x0a, 0x0f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x62, 0x65,
	0x74, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x30, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d,
	0x75, 0x73, 0x65, 0x72, 0x42, 0x65, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x30, 0x12, 0x26, 0x0a,
	0x0f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x62, 0x65, 0x74, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x31,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x75, 0x73, 0x65, 0x72, 0x42, 0x65, 0x74, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x31, 0x12, 0x26, 0x0a, 0x0f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x62, 0x65,
	0x74, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x32, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d,
	0x75, 0x73, 0x65, 0x72, 0x42, 0x65, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x32, 0x12, 0x26, 0x0a,
	0x0f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x62, 0x65, 0x74, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x33,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x75, 0x73, 0x65, 0x72, 0x42, 0x65, 0x74, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x33, 0x12, 0x26, 0x0a, 0x0f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x62, 0x65,
	0x74, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x34, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d,
	0x75, 0x73, 0x65, 0x72, 0x42, 0x65, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x34, 0x12, 0x26, 0x0a,
	0x0f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x62, 0x65, 0x74, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x35,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x75, 0x73, 0x65, 0x72, 0x42, 0x65, 0x74, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x35, 0x12, 0x26, 0x0a, 0x0f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x62, 0x65,
	0x74, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x36, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d,
	0x75, 0x73, 0x65, 0x72, 0x42, 0x65, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x36, 0x12, 0x21, 0x0a,
	0x0c, 0x77, 0x69, 0x6e, 0x5f, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x0b, 0x77, 0x69, 0x6e, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79,
	0x12, 0x23, 0x0a, 0x0d, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63,
	0x79, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x75, 0x73, 0x65, 0x72, 0x43, 0x75, 0x72,
	0x72, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x22, 0x0a, 0x0d, 0x6e, 0x6f, 0x74, 0x5f, 0x62, 0x65, 0x74,
	0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x6e, 0x6f,
	0x74, 0x42, 0x65, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x22, 0xc7, 0x01, 0x0a, 0x16, 0x4d, 0x53,
	0x47, 0x5f, 0x43, 0x5f, 0x47, 0x41, 0x4d, 0x45, 0x5f, 0x53, 0x45, 0x54, 0x54, 0x4c, 0x45, 0x5f,
	0x52, 0x45, 0x53, 0x50, 0x12, 0x42, 0x0a, 0x0b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x73, 0x65, 0x74,
	0x74, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x63, 0x6f, 0x6d, 0x2e,
	0x63, 0x77, 0x2e, 0x63, 0x68, 0x65, 0x73, 0x73, 0x2e, 0x62, 0x6c, 0x61, 0x63, 0x6b, 0x72, 0x65,
	0x64, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x53, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x52, 0x0a, 0x75, 0x73,
	0x65, 0x72, 0x53, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x68, 0x69, 0x73, 0x74,
	0x6f, 0x72, 0x79, 0x5f, 0x6e, 0x75, 0x6d, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x0b,
	0x68, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x4e, 0x75, 0x6d, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x63,
	0x61, 0x72, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x63, 0x61, 0x72, 0x64, 0x12,
	0x18, 0x0a, 0x07, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x31, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x07, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x31, 0x12, 0x18, 0x0a, 0x07, 0x72, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x32, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x72, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x32, 0x22, 0x71, 0x0a, 0x0e, 0x4d, 0x53, 0x47, 0x5f, 0x43, 0x5f, 0x43, 0x48, 0x41,
	0x54, 0x5f, 0x52, 0x45, 0x51, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x68, 0x61, 0x74, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x63, 0x68, 0x61, 0x74, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x20, 0x0a, 0x0c, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x31, 0x5f, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x74, 0x79, 0x70, 0x65, 0x31, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x12, 0x20, 0x0a, 0x0c, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x32, 0x5f, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x74, 0x79, 0x70, 0x65,
	0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x4c, 0x0a, 0x17, 0x4d, 0x53, 0x47, 0x5f, 0x43, 0x5f,
	0x4d, 0x41, 0x54, 0x43, 0x48, 0x5f, 0x46, 0x49, 0x4e, 0x49, 0x53, 0x48, 0x5f, 0x52, 0x45, 0x53,
	0x50, 0x12, 0x19, 0x0a, 0x08, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x07, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06,
	0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x72, 0x65,
	0x61, 0x73, 0x6f, 0x6e, 0x2a, 0x80, 0x01, 0x0a, 0x0e, 0x42, 0x6c, 0x61, 0x63, 0x6b, 0x72, 0x65,
	0x64, 0x5f, 0x53, 0x5f, 0x43, 0x6d, 0x64, 0x12, 0x11, 0x0a, 0x0d, 0x43, 0x4d, 0x44, 0x5f, 0x53,
	0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x10, 0x00, 0x12, 0x0e, 0x0a, 0x0a, 0x43, 0x4d,
	0x44, 0x5f, 0x53, 0x5f, 0x50, 0x49, 0x4e, 0x47, 0x10, 0x01, 0x12, 0x0e, 0x0a, 0x0a, 0x43, 0x4d,
	0x44, 0x5f, 0x53, 0x5f, 0x50, 0x4f, 0x4e, 0x47, 0x10, 0x02, 0x12, 0x1c, 0x0a, 0x18, 0x43, 0x4d,
	0x44, 0x5f, 0x53, 0x5f, 0x42, 0x4c, 0x41, 0x43, 0x4b, 0x52, 0x45, 0x44, 0x5f, 0x45, 0x4e, 0x54,
	0x45, 0x52, 0x5f, 0x52, 0x45, 0x51, 0x10, 0x03, 0x12, 0x1d, 0x0a, 0x19, 0x43, 0x4d, 0x44, 0x5f,
	0x53, 0x5f, 0x42, 0x4c, 0x41, 0x43, 0x4b, 0x52, 0x45, 0x44, 0x5f, 0x45, 0x4e, 0x54, 0x45, 0x52,
	0x5f, 0x52, 0x45, 0x53, 0x50, 0x10, 0x04, 0x2a, 0x9b, 0x05, 0x0a, 0x0b, 0x42, 0x6c, 0x61, 0x63,
	0x6b, 0x72, 0x65, 0x64, 0x43, 0x6d, 0x64, 0x12, 0x11, 0x0a, 0x0d, 0x43, 0x4d, 0x44, 0x5f, 0x43,
	0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x10, 0x00, 0x12, 0x1e, 0x0a, 0x1a, 0x43, 0x4d,
	0x44, 0x5f, 0x43, 0x5f, 0x47, 0x45, 0x54, 0x5f, 0x54, 0x41, 0x42, 0x4c, 0x45, 0x5f, 0x53, 0x54,
	0x41, 0x54, 0x55, 0x53, 0x5f, 0x52, 0x45, 0x51, 0x10, 0x01, 0x12, 0x1f, 0x0a, 0x1b, 0x43, 0x4d,
	0x44, 0x5f, 0x43, 0x5f, 0x47, 0x45, 0x54, 0x5f, 0x54, 0x41, 0x42, 0x4c, 0x45, 0x5f, 0x53, 0x54,
	0x41, 0x54, 0x55, 0x53, 0x5f, 0x52, 0x45, 0x53, 0x50, 0x10, 0x02, 0x12, 0x1a, 0x0a, 0x16, 0x43,
	0x4d, 0x44, 0x5f, 0x43, 0x5f, 0x47, 0x41, 0x4d, 0x45, 0x5f, 0x52, 0x45, 0x41, 0x44, 0x59, 0x5f,
	0x33, 0x5f, 0x52, 0x45, 0x51, 0x10, 0x03, 0x12, 0x1b, 0x0a, 0x17, 0x43, 0x4d, 0x44, 0x5f, 0x43,
	0x5f, 0x47, 0x41, 0x4d, 0x45, 0x5f, 0x52, 0x45, 0x41, 0x44, 0x59, 0x5f, 0x33, 0x5f, 0x52, 0x45,
	0x53, 0x50, 0x10, 0x04, 0x12, 0x20, 0x0a, 0x1c, 0x43, 0x4d, 0x44, 0x5f, 0x43, 0x5f, 0x47, 0x41,
	0x4d, 0x45, 0x5f, 0x52, 0x45, 0x41, 0x44, 0x59, 0x5f, 0x43, 0x4f, 0x4d, 0x46, 0x49, 0x52, 0x4d,
	0x5f, 0x52, 0x45, 0x51, 0x10, 0x05, 0x12, 0x21, 0x0a, 0x1d, 0x43, 0x4d, 0x44, 0x5f, 0x43, 0x5f,
	0x47, 0x41, 0x4d, 0x45, 0x5f, 0x52, 0x45, 0x41, 0x44, 0x59, 0x5f, 0x43, 0x4f, 0x4d, 0x46, 0x49,
	0x52, 0x4d, 0x5f, 0x52, 0x45, 0x53, 0x50, 0x10, 0x06, 0x12, 0x1c, 0x0a, 0x18, 0x43, 0x4d, 0x44,
	0x5f, 0x43, 0x5f, 0x47, 0x41, 0x4d, 0x45, 0x5f, 0x44, 0x45, 0x41, 0x4c, 0x43, 0x41, 0x52, 0x44,
	0x53, 0x5f, 0x52, 0x45, 0x51, 0x10, 0x07, 0x12, 0x1d, 0x0a, 0x19, 0x43, 0x4d, 0x44, 0x5f, 0x43,
	0x5f, 0x47, 0x41, 0x4d, 0x45, 0x5f, 0x44, 0x45, 0x41, 0x4c, 0x43, 0x41, 0x52, 0x44, 0x53, 0x5f,
	0x52, 0x45, 0x53, 0x50, 0x10, 0x08, 0x12, 0x1c, 0x0a, 0x18, 0x43, 0x4d, 0x44, 0x5f, 0x43, 0x5f,
	0x47, 0x41, 0x4d, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x52, 0x54, 0x5f, 0x42, 0x45, 0x54, 0x5f, 0x52,
	0x45, 0x51, 0x10, 0x09, 0x12, 0x1d, 0x0a, 0x19, 0x43, 0x4d, 0x44, 0x5f, 0x43, 0x5f, 0x47, 0x41,
	0x4d, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x52, 0x54, 0x5f, 0x42, 0x45, 0x54, 0x5f, 0x52, 0x45, 0x53,
	0x50, 0x10, 0x0a, 0x12, 0x16, 0x0a, 0x12, 0x43, 0x4d, 0x44, 0x5f, 0x43, 0x5f, 0x47, 0x41, 0x4d,
	0x45, 0x5f, 0x42, 0x45, 0x54, 0x5f, 0x52, 0x45, 0x51, 0x10, 0x0b, 0x12, 0x17, 0x0a, 0x13, 0x43,
	0x4d, 0x44, 0x5f, 0x43, 0x5f, 0x47, 0x41, 0x4d, 0x45, 0x5f, 0x42, 0x45, 0x54, 0x5f, 0x52, 0x45,
	0x53, 0x50, 0x10, 0x0c, 0x12, 0x19, 0x0a, 0x15, 0x43, 0x4d, 0x44, 0x5f, 0x43, 0x5f, 0x47, 0x41,
	0x4d, 0x45, 0x5f, 0x53, 0x45, 0x54, 0x54, 0x4c, 0x45, 0x5f, 0x52, 0x45, 0x51, 0x10, 0x17, 0x12,
	0x1a, 0x0a, 0x16, 0x43, 0x4d, 0x44, 0x5f, 0x43, 0x5f, 0x47, 0x41, 0x4d, 0x45, 0x5f, 0x53, 0x45,
	0x54, 0x54, 0x4c, 0x45, 0x5f, 0x52, 0x45, 0x53, 0x50, 0x10, 0x18, 0x12, 0x1b, 0x0a, 0x17, 0x43,
	0x4d, 0x44, 0x5f, 0x43, 0x5f, 0x47, 0x41, 0x4d, 0x45, 0x5f, 0x43, 0x4f, 0x4e, 0x54, 0x49, 0x4e,
	0x55, 0x45, 0x5f, 0x52, 0x45, 0x51, 0x10, 0x19, 0x12, 0x1c, 0x0a, 0x18, 0x43, 0x4d, 0x44, 0x5f,
	0x43, 0x5f, 0x47, 0x41, 0x4d, 0x45, 0x5f, 0x43, 0x4f, 0x4e, 0x54, 0x49, 0x4e, 0x55, 0x45, 0x5f,
	0x52, 0x45, 0x53, 0x50, 0x10, 0x1a, 0x12, 0x1c, 0x0a, 0x18, 0x43, 0x4d, 0x44, 0x5f, 0x43, 0x5f,
	0x55, 0x53, 0x45, 0x52, 0x5f, 0x42, 0x45, 0x54, 0x5f, 0x4f, 0x54, 0x48, 0x45, 0x52, 0x5f, 0x52,
	0x45, 0x51, 0x10, 0x1b, 0x12, 0x1d, 0x0a, 0x19, 0x43, 0x4d, 0x44, 0x5f, 0x43, 0x5f, 0x55, 0x53,
	0x45, 0x52, 0x5f, 0x42, 0x45, 0x54, 0x5f, 0x4f, 0x54, 0x48, 0x45, 0x52, 0x5f, 0x52, 0x45, 0x53,
	0x50, 0x10, 0x1c, 0x12, 0x12, 0x0a, 0x0e, 0x43, 0x4d, 0x44, 0x5f, 0x43, 0x5f, 0x43, 0x48, 0x41,
	0x54, 0x5f, 0x52, 0x45, 0x51, 0x10, 0x3e, 0x12, 0x13, 0x0a, 0x0f, 0x43, 0x4d, 0x44, 0x5f, 0x43,
	0x5f, 0x43, 0x48, 0x41, 0x54, 0x5f, 0x52, 0x45, 0x53, 0x50, 0x10, 0x3f, 0x12, 0x1a, 0x0a, 0x16,
	0x43, 0x4d, 0x44, 0x5f, 0x43, 0x5f, 0x4d, 0x41, 0x54, 0x43, 0x48, 0x5f, 0x46, 0x49, 0x4e, 0x49,
	0x53, 0x48, 0x5f, 0x52, 0x45, 0x51, 0x10, 0x64, 0x12, 0x1b, 0x0a, 0x17, 0x43, 0x4d, 0x44, 0x5f,
	0x43, 0x5f, 0x4d, 0x41, 0x54, 0x43, 0x48, 0x5f, 0x46, 0x49, 0x4e, 0x49, 0x53, 0x48, 0x5f, 0x52,
	0x45, 0x53, 0x50, 0x10, 0x65, 0x2a, 0x8b, 0x01, 0x0a, 0x09, 0x47, 0x61, 0x6d, 0x65, 0x50, 0x68,
	0x61, 0x73, 0x65, 0x12, 0x0f, 0x0a, 0x0b, 0x50, 0x48, 0x53, 0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c,
	0x49, 0x44, 0x10, 0x00, 0x12, 0x12, 0x0a, 0x0e, 0x50, 0x48, 0x53, 0x5f, 0x47, 0x61, 0x6d, 0x65,
	0x5f, 0x52, 0x65, 0x61, 0x64, 0x79, 0x10, 0x01, 0x12, 0x15, 0x0a, 0x11, 0x50, 0x48, 0x53, 0x5f,
	0x47, 0x61, 0x6d, 0x69, 0x6e, 0x67, 0x5f, 0x42, 0x65, 0x74, 0x69, 0x6e, 0x67, 0x10, 0x02, 0x12,
	0x16, 0x0a, 0x12, 0x50, 0x48, 0x53, 0x5f, 0x47, 0x61, 0x6d, 0x65, 0x5f, 0x44, 0x65, 0x61, 0x6c,
	0x43, 0x61, 0x72, 0x64, 0x73, 0x10, 0x03, 0x12, 0x13, 0x0a, 0x0f, 0x50, 0x48, 0x53, 0x5f, 0x47,
	0x61, 0x6d, 0x65, 0x5f, 0x53, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x10, 0x04, 0x12, 0x15, 0x0a, 0x11,
	0x50, 0x48, 0x53, 0x5f, 0x47, 0x61, 0x6d, 0x65, 0x5f, 0x43, 0x6f, 0x6e, 0x74, 0x69, 0x6e, 0x75,
	0x65, 0x10, 0x05, 0x42, 0x19, 0x5a, 0x17, 0x2e, 0x2f, 0x63, 0x6f, 0x6d, 0x2f, 0x63, 0x77, 0x2f,
	0x63, 0x68, 0x65, 0x73, 0x73, 0x2f, 0x62, 0x6c, 0x61, 0x63, 0x6b, 0x72, 0x65, 0x64, 0x62, 0x06,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_blackred_proto_rawDescOnce sync.Once
	file_blackred_proto_rawDescData = file_blackred_proto_rawDesc
)

func file_blackred_proto_rawDescGZIP() []byte {
	file_blackred_proto_rawDescOnce.Do(func() {
		file_blackred_proto_rawDescData = protoimpl.X.CompressGZIP(file_blackred_proto_rawDescData)
	})
	return file_blackred_proto_rawDescData
}

var file_blackred_proto_enumTypes = make([]protoimpl.EnumInfo, 3)
var file_blackred_proto_msgTypes = make([]protoimpl.MessageInfo, 16)
var file_blackred_proto_goTypes = []interface{}{
	(Blackred_S_Cmd)(0),                 // 0: com.cw.chess.blackred.Blackred_S_Cmd
	(BlackredCmd)(0),                    // 1: com.cw.chess.blackred.BlackredCmd
	(GamePhase)(0),                      // 2: com.cw.chess.blackred.GamePhase
	(*BlackredStartRequest)(nil),        // 3: com.cw.chess.blackred.BlackredStartRequest
	(*BlackredStartResponse)(nil),       // 4: com.cw.chess.blackred.BlackredStartResponse
	(*TableData)(nil),                   // 5: com.cw.chess.blackred.TableData
	(*MSG_C_COMMON_REQ)(nil),            // 6: com.cw.chess.blackred.MSG_C_COMMON_REQ
	(*MSG_C_COMMON_RESP)(nil),           // 7: com.cw.chess.blackred.MSG_C_COMMON_RESP
	(*MSG_C_GET_TABLE_STATUS_RESP)(nil), // 8: com.cw.chess.blackred.MSG_C_GET_TABLE_STATUS_RESP
	(*MSG_C_GAME_READY_3_RESP)(nil),     // 9: com.cw.chess.blackred.MSG_C_GAME_READY_3_RESP
	(*MSG_C_GAME_START_BET_RESP)(nil),   // 10: com.cw.chess.blackred.MSG_C_GAME_START_BET_RESP
	(*MSG_C_GAME_BET_REQ)(nil),          // 11: com.cw.chess.blackred.MSG_C_GAME_BET_REQ
	(*MSG_C_USER_BET_OTHER_RESP)(nil),   // 12: com.cw.chess.blackred.MSG_C_USER_BET_OTHER_RESP
	(*MSG_C_GAME_BET_RESP)(nil),         // 13: com.cw.chess.blackred.MSG_C_GAME_BET_RESP
	(*MSG_C_GAME_DEALCARDS_RESP)(nil),   // 14: com.cw.chess.blackred.MSG_C_GAME_DEALCARDS_RESP
	(*UserSettle)(nil),                  // 15: com.cw.chess.blackred.UserSettle
	(*MSG_C_GAME_SETTLE_RESP)(nil),      // 16: com.cw.chess.blackred.MSG_C_GAME_SETTLE_RESP
	(*MSG_C_CHAT_REQ)(nil),              // 17: com.cw.chess.blackred.MSG_C_CHAT_REQ
	(*MSG_C_MATCH_FINISH_RESP)(nil),     // 18: com.cw.chess.blackred.MSG_C_MATCH_FINISH_RESP
	(*platform.GameUser)(nil),           // 19: com.cw.chess.platform.GameUser
	(*platform.BlackredLevelDesc)(nil),  // 20: com.cw.chess.platform.BlackredLevelDesc
}
var file_blackred_proto_depIdxs = []int32{
	19, // 0: com.cw.chess.blackred.BlackredStartRequest.user:type_name -> com.cw.chess.platform.GameUser
	20, // 1: com.cw.chess.blackred.MSG_C_GET_TABLE_STATUS_RESP.level_desc:type_name -> com.cw.chess.platform.BlackredLevelDesc
	2,  // 2: com.cw.chess.blackred.MSG_C_GET_TABLE_STATUS_RESP.game_phase:type_name -> com.cw.chess.blackred.GamePhase
	19, // 3: com.cw.chess.blackred.MSG_C_GET_TABLE_STATUS_RESP.game_user:type_name -> com.cw.chess.platform.GameUser
	19, // 4: com.cw.chess.blackred.MSG_C_GAME_BET_RESP.game_user:type_name -> com.cw.chess.platform.GameUser
	19, // 5: com.cw.chess.blackred.UserSettle.game_user:type_name -> com.cw.chess.platform.GameUser
	15, // 6: com.cw.chess.blackred.MSG_C_GAME_SETTLE_RESP.user_settle:type_name -> com.cw.chess.blackred.UserSettle
	7,  // [7:7] is the sub-list for method output_type
	7,  // [7:7] is the sub-list for method input_type
	7,  // [7:7] is the sub-list for extension type_name
	7,  // [7:7] is the sub-list for extension extendee
	0,  // [0:7] is the sub-list for field type_name
}

func init() { file_blackred_proto_init() }
func file_blackred_proto_init() {
	if File_blackred_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_blackred_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BlackredStartRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_blackred_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BlackredStartResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_blackred_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TableData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_blackred_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MSG_C_COMMON_REQ); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_blackred_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MSG_C_COMMON_RESP); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_blackred_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MSG_C_GET_TABLE_STATUS_RESP); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_blackred_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MSG_C_GAME_READY_3_RESP); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_blackred_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MSG_C_GAME_START_BET_RESP); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_blackred_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MSG_C_GAME_BET_REQ); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_blackred_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MSG_C_USER_BET_OTHER_RESP); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_blackred_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MSG_C_GAME_BET_RESP); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_blackred_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MSG_C_GAME_DEALCARDS_RESP); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_blackred_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserSettle); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_blackred_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MSG_C_GAME_SETTLE_RESP); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_blackred_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MSG_C_CHAT_REQ); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_blackred_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MSG_C_MATCH_FINISH_RESP); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_blackred_proto_rawDesc,
			NumEnums:      3,
			NumMessages:   16,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_blackred_proto_goTypes,
		DependencyIndexes: file_blackred_proto_depIdxs,
		EnumInfos:         file_blackred_proto_enumTypes,
		MessageInfos:      file_blackred_proto_msgTypes,
	}.Build()
	File_blackred_proto = out.File
	file_blackred_proto_rawDesc = nil
	file_blackred_proto_goTypes = nil
	file_blackred_proto_depIdxs = nil
}
