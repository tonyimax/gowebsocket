// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.26.0
// 	protoc        v3.12.4
// source: rapidteenpatti.proto

//尽量不要同时包含多个业务逻辑文件，例如同时包含rummy和teenpatti，可能有些命名会同名，确实有这种情况用命名空间区别

package rapidteenpatti

import (
	platform "./com/cw/chess/platform"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

//**********************************rapidteenpatti游戏服务端和服务端通信定义开始********************************
type RapidTeenpatti_S_Cmd int32

const (
	RapidTeenpatti_S_Cmd_CMD_S_INVALID        RapidTeenpatti_S_Cmd = 0
	RapidTeenpatti_S_Cmd_CMD_S_PING           RapidTeenpatti_S_Cmd = 1
	RapidTeenpatti_S_Cmd_CMD_S_PONG           RapidTeenpatti_S_Cmd = 2
	RapidTeenpatti_S_Cmd_CMD_S_RTP_START_REQ  RapidTeenpatti_S_Cmd = 3 // 匹配成功通知rapidteenpatti服务准备开始：MSG_S_RTP_START_REQ
	RapidTeenpatti_S_Cmd_CMD_S_RTP_START_RESP RapidTeenpatti_S_Cmd = 4 // 匹配成功通知rapidteenpatti服务准备开始返回：MSG_S_RTP_START_RESP
)

// Enum value maps for RapidTeenpatti_S_Cmd.
var (
	RapidTeenpatti_S_Cmd_name = map[int32]string{
		0: "CMD_S_INVALID",
		1: "CMD_S_PING",
		2: "CMD_S_PONG",
		3: "CMD_S_RTP_START_REQ",
		4: "CMD_S_RTP_START_RESP",
	}
	RapidTeenpatti_S_Cmd_value = map[string]int32{
		"CMD_S_INVALID":        0,
		"CMD_S_PING":           1,
		"CMD_S_PONG":           2,
		"CMD_S_RTP_START_REQ":  3,
		"CMD_S_RTP_START_RESP": 4,
	}
)

func (x RapidTeenpatti_S_Cmd) Enum() *RapidTeenpatti_S_Cmd {
	p := new(RapidTeenpatti_S_Cmd)
	*p = x
	return p
}

func (x RapidTeenpatti_S_Cmd) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RapidTeenpatti_S_Cmd) Descriptor() protoreflect.EnumDescriptor {
	return file_rapidteenpatti_proto_enumTypes[0].Descriptor()
}

func (RapidTeenpatti_S_Cmd) Type() protoreflect.EnumType {
	return &file_rapidteenpatti_proto_enumTypes[0]
}

func (x RapidTeenpatti_S_Cmd) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RapidTeenpatti_S_Cmd.Descriptor instead.
func (RapidTeenpatti_S_Cmd) EnumDescriptor() ([]byte, []int) {
	return file_rapidteenpatti_proto_rawDescGZIP(), []int{0}
}

//**********************************rapidteenpatti游戏客户端和服务端通信定义 开始********************************
type RapidTPCmd int32

const (
	RapidTPCmd_CMD_C_INVALID               RapidTPCmd = 0
	RapidTPCmd_CMD_C_GET_TABLE_STATUS_REQ  RapidTPCmd = 1 // 请求获取游戏数据，此协议应该在客户端资源加载完成后请求（通常为刚进游戏，比如匹配成功/断线重连）MSG_C_COMMON_REQ
	RapidTPCmd_CMD_C_GET_TABLE_STATUS_RESP RapidTPCmd = 2 // 回复：MSG_C_GET_TABLE_STATUS_RESP
	RapidTPCmd_CMD_C_MATCH_READY_REQ       RapidTPCmd = 3 // 通过匹配后，客户端告诉服务器资源已经加载好了（所有人全部加载完成，才会正式开始）：MSG_C_COMMON_REQ
	RapidTPCmd_CMD_C_MATCH_READY_RESP      RapidTPCmd = 4 // 返回请求，MSG_C_COMMON_RESP
	RapidTPCmd_CMD_C_MATCH_FINISH_REQ      RapidTPCmd = 5 // 无意义
	RapidTPCmd_CMD_C_MATCH_FINISH_RESP     RapidTPCmd = 6 // 桌子被解散：MSG_C_MATCH_FINISH_RESP
	// 以下逻辑会在牌局之间循环
	RapidTPCmd_CMD_C_GAME_READY_3_REQ        RapidTPCmd = 20 // 无意义
	RapidTPCmd_CMD_C_GAME_READY_3_RESP       RapidTPCmd = 21 // 通知客户端N秒后开始：MSG_C_GAME_READY_3_RESP
	RapidTPCmd_CMD_C_GAME_READY_COMFIRM_REQ  RapidTPCmd = 22 // 客户端倒数结束后，通知服务器，（如果用户在倒数3秒内手动退出或者其他原因退出，游戏将取消）（服务器这个状态会维持5秒）MSG_C_COMMON_REQ
	RapidTPCmd_CMD_C_GAME_READY_COMFIRM_RESP RapidTPCmd = 23 // 无意义（不返回了，如果客户端需要，补一个）
	RapidTPCmd_CMD_C_GAME_DEALCARDS_REQ      RapidTPCmd = 24 // 无意义
	RapidTPCmd_CMD_C_GAME_DEALCARDS_RESP     RapidTPCmd = 25 // 游戏发牌（此事件会在所有用户发送完CMD_C_GAME_READY_COMFIRM_REQ就执行）：MSG_C_GAME_DEALCARDS_RESP，此状态为PHS_Game_DealCards，状态会维持用户数量*2秒
	RapidTPCmd_CMD_C_GAME_SETTLE_REQ         RapidTPCmd = 26 // 无意义
	RapidTPCmd_CMD_C_GAME_SETTLE_RESP        RapidTPCmd = 27
	RapidTPCmd_CMD_C_GAME_CONTINUE_REQ       RapidTPCmd = 28 // 用户确认继续：MSG_C_COMMON_REQ
	RapidTPCmd_CMD_C_GAME_CONTINUE_RESP      RapidTPCmd = 29 // 无意义，后续会循环至PHS_Game_Ready（用户会从收到CMD_C_GAME_READY_3_RESP开始）, 如果局数已经满了，客户端会收到MSG_C_MATCH_FINISH_RESP协议，reason=104
	RapidTPCmd_CMD_C_CHAT_REQ                RapidTPCmd = 62 // 用户请求聊天：MSG_C_CHAT_REQ
	RapidTPCmd_CMD_C_CHAT_RESP               RapidTPCmd = 63 // 用户请求聊天回复：MSG_C_CHAT_RESP
)

// Enum value maps for RapidTPCmd.
var (
	RapidTPCmd_name = map[int32]string{
		0:  "CMD_C_INVALID",
		1:  "CMD_C_GET_TABLE_STATUS_REQ",
		2:  "CMD_C_GET_TABLE_STATUS_RESP",
		3:  "CMD_C_MATCH_READY_REQ",
		4:  "CMD_C_MATCH_READY_RESP",
		5:  "CMD_C_MATCH_FINISH_REQ",
		6:  "CMD_C_MATCH_FINISH_RESP",
		20: "CMD_C_GAME_READY_3_REQ",
		21: "CMD_C_GAME_READY_3_RESP",
		22: "CMD_C_GAME_READY_COMFIRM_REQ",
		23: "CMD_C_GAME_READY_COMFIRM_RESP",
		24: "CMD_C_GAME_DEALCARDS_REQ",
		25: "CMD_C_GAME_DEALCARDS_RESP",
		26: "CMD_C_GAME_SETTLE_REQ",
		27: "CMD_C_GAME_SETTLE_RESP",
		28: "CMD_C_GAME_CONTINUE_REQ",
		29: "CMD_C_GAME_CONTINUE_RESP",
		62: "CMD_C_CHAT_REQ",
		63: "CMD_C_CHAT_RESP",
	}
	RapidTPCmd_value = map[string]int32{
		"CMD_C_INVALID":                 0,
		"CMD_C_GET_TABLE_STATUS_REQ":    1,
		"CMD_C_GET_TABLE_STATUS_RESP":   2,
		"CMD_C_MATCH_READY_REQ":         3,
		"CMD_C_MATCH_READY_RESP":        4,
		"CMD_C_MATCH_FINISH_REQ":        5,
		"CMD_C_MATCH_FINISH_RESP":       6,
		"CMD_C_GAME_READY_3_REQ":        20,
		"CMD_C_GAME_READY_3_RESP":       21,
		"CMD_C_GAME_READY_COMFIRM_REQ":  22,
		"CMD_C_GAME_READY_COMFIRM_RESP": 23,
		"CMD_C_GAME_DEALCARDS_REQ":      24,
		"CMD_C_GAME_DEALCARDS_RESP":     25,
		"CMD_C_GAME_SETTLE_REQ":         26,
		"CMD_C_GAME_SETTLE_RESP":        27,
		"CMD_C_GAME_CONTINUE_REQ":       28,
		"CMD_C_GAME_CONTINUE_RESP":      29,
		"CMD_C_CHAT_REQ":                62,
		"CMD_C_CHAT_RESP":               63,
	}
)

func (x RapidTPCmd) Enum() *RapidTPCmd {
	p := new(RapidTPCmd)
	*p = x
	return p
}

func (x RapidTPCmd) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RapidTPCmd) Descriptor() protoreflect.EnumDescriptor {
	return file_rapidteenpatti_proto_enumTypes[1].Descriptor()
}

func (RapidTPCmd) Type() protoreflect.EnumType {
	return &file_rapidteenpatti_proto_enumTypes[1]
}

func (x RapidTPCmd) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RapidTPCmd.Descriptor instead.
func (RapidTPCmd) EnumDescriptor() ([]byte, []int) {
	return file_rapidteenpatti_proto_rawDescGZIP(), []int{1}
}

// 牌型定义
type PokersType int32

const (
	PokersType_PT_High          PokersType = 0 // 高牌
	PokersType_PT_Pair          PokersType = 1 // 对子
	PokersType_PT_Colour        PokersType = 2 // 同花
	PokersType_PT_Sequence      PokersType = 3 // 顺子
	PokersType_PT_Pure_Sequence PokersType = 4 // 同花顺
	PokersType_PT_Set           PokersType = 5 // set
)

// Enum value maps for PokersType.
var (
	PokersType_name = map[int32]string{
		0: "PT_High",
		1: "PT_Pair",
		2: "PT_Colour",
		3: "PT_Sequence",
		4: "PT_Pure_Sequence",
		5: "PT_Set",
	}
	PokersType_value = map[string]int32{
		"PT_High":          0,
		"PT_Pair":          1,
		"PT_Colour":        2,
		"PT_Sequence":      3,
		"PT_Pure_Sequence": 4,
		"PT_Set":           5,
	}
)

func (x PokersType) Enum() *PokersType {
	p := new(PokersType)
	*p = x
	return p
}

func (x PokersType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PokersType) Descriptor() protoreflect.EnumDescriptor {
	return file_rapidteenpatti_proto_enumTypes[2].Descriptor()
}

func (PokersType) Type() protoreflect.EnumType {
	return &file_rapidteenpatti_proto_enumTypes[2]
}

func (x PokersType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PokersType.Descriptor instead.
func (PokersType) EnumDescriptor() ([]byte, []int) {
	return file_rapidteenpatti_proto_rawDescGZIP(), []int{2}
}

// 定义游戏阶段
type GamePhase int32

const (
	GamePhase_PHS_INVALID        GamePhase = 0 // 无效
	GamePhase_PHS_Match_Ready    GamePhase = 1 // 等待资源加载：服务器10秒等待，否则解散桌子
	GamePhase_PHS_Game_Ready     GamePhase = 2 // 等待用户确认：客户端3秒倒数，服务器5秒等待，否则会把没有准备的用户踢出
	GamePhase_PHS_Game_DealCards GamePhase = 3 // 发牌
	GamePhase_PHS_Game_Settle    GamePhase = 4 // 结算
	GamePhase_PHS_Game_Continue  GamePhase = 5 // 用户确认继续阶段：服务器5秒等待，否则会把没有准备的用户踢出
)

// Enum value maps for GamePhase.
var (
	GamePhase_name = map[int32]string{
		0: "PHS_INVALID",
		1: "PHS_Match_Ready",
		2: "PHS_Game_Ready",
		3: "PHS_Game_DealCards",
		4: "PHS_Game_Settle",
		5: "PHS_Game_Continue",
	}
	GamePhase_value = map[string]int32{
		"PHS_INVALID":        0,
		"PHS_Match_Ready":    1,
		"PHS_Game_Ready":     2,
		"PHS_Game_DealCards": 3,
		"PHS_Game_Settle":    4,
		"PHS_Game_Continue":  5,
	}
)

func (x GamePhase) Enum() *GamePhase {
	p := new(GamePhase)
	*p = x
	return p
}

func (x GamePhase) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (GamePhase) Descriptor() protoreflect.EnumDescriptor {
	return file_rapidteenpatti_proto_enumTypes[3].Descriptor()
}

func (GamePhase) Type() protoreflect.EnumType {
	return &file_rapidteenpatti_proto_enumTypes[3]
}

func (x GamePhase) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use GamePhase.Descriptor instead.
func (GamePhase) EnumDescriptor() ([]byte, []int) {
	return file_rapidteenpatti_proto_rawDescGZIP(), []int{3}
}

// 这个是匹配服务器告诉teenpatti服务器的请求
type MSG_S_RTP_START_REQ struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Level uint32               `protobuf:"varint,1,opt,name=level,proto3" json:"level,omitempty"`
	Users []*platform.GameUser `protobuf:"bytes,2,rep,name=users,proto3" json:"users,omitempty"`
	Rbc   uint32               `protobuf:"varint,3,opt,name=rbc,proto3" json:"rbc,omitempty"`
}

func (x *MSG_S_RTP_START_REQ) Reset() {
	*x = MSG_S_RTP_START_REQ{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rapidteenpatti_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MSG_S_RTP_START_REQ) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MSG_S_RTP_START_REQ) ProtoMessage() {}

func (x *MSG_S_RTP_START_REQ) ProtoReflect() protoreflect.Message {
	mi := &file_rapidteenpatti_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MSG_S_RTP_START_REQ.ProtoReflect.Descriptor instead.
func (*MSG_S_RTP_START_REQ) Descriptor() ([]byte, []int) {
	return file_rapidteenpatti_proto_rawDescGZIP(), []int{0}
}

func (x *MSG_S_RTP_START_REQ) GetLevel() uint32 {
	if x != nil {
		return x.Level
	}
	return 0
}

func (x *MSG_S_RTP_START_REQ) GetUsers() []*platform.GameUser {
	if x != nil {
		return x.Users
	}
	return nil
}

func (x *MSG_S_RTP_START_REQ) GetRbc() uint32 {
	if x != nil {
		return x.Rbc
	}
	return 0
}

// 这个是匹配服务器收到teenpatti服务器的回复
type MSG_S_RTP_START_RESP struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result  uint32 `protobuf:"varint,1,opt,name=result,proto3" json:"result,omitempty"`                  // 0：成功；
	TableId uint32 `protobuf:"varint,2,opt,name=table_id,json=tableId,proto3" json:"table_id,omitempty"` // table_id：因为一个服务上有很多个桌子以服务多个用户，这里分配好后就告诉匹配服务，匹配服务再把这个tableid和本服务的id告诉客户端
}

func (x *MSG_S_RTP_START_RESP) Reset() {
	*x = MSG_S_RTP_START_RESP{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rapidteenpatti_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MSG_S_RTP_START_RESP) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MSG_S_RTP_START_RESP) ProtoMessage() {}

func (x *MSG_S_RTP_START_RESP) ProtoReflect() protoreflect.Message {
	mi := &file_rapidteenpatti_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MSG_S_RTP_START_RESP.ProtoReflect.Descriptor instead.
func (*MSG_S_RTP_START_RESP) Descriptor() ([]byte, []int) {
	return file_rapidteenpatti_proto_rawDescGZIP(), []int{1}
}

func (x *MSG_S_RTP_START_RESP) GetResult() uint32 {
	if x != nil {
		return x.Result
	}
	return 0
}

func (x *MSG_S_RTP_START_RESP) GetTableId() uint32 {
	if x != nil {
		return x.TableId
	}
	return 0
}

// 注：后续所有协议全部采用“tableid+子结构”形式，包括请求和回复
type TableData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TableId uint32 `protobuf:"varint,1,opt,name=table_id,json=tableId,proto3" json:"table_id,omitempty"`
	Data    []byte `protobuf:"bytes,2,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *TableData) Reset() {
	*x = TableData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rapidteenpatti_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TableData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TableData) ProtoMessage() {}

func (x *TableData) ProtoReflect() protoreflect.Message {
	mi := &file_rapidteenpatti_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TableData.ProtoReflect.Descriptor instead.
func (*TableData) Descriptor() ([]byte, []int) {
	return file_rapidteenpatti_proto_rawDescGZIP(), []int{2}
}

func (x *TableData) GetTableId() uint32 {
	if x != nil {
		return x.TableId
	}
	return 0
}

func (x *TableData) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

// 通知客户端桌子将被解散
type MSG_C_MATCH_FINISH_RESP struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TableId uint32 `protobuf:"varint,1,opt,name=table_id,json=tableId,proto3" json:"table_id,omitempty"`
	Reason  uint32 `protobuf:"varint,2,opt,name=reason,proto3" json:"reason,omitempty"`
}

func (x *MSG_C_MATCH_FINISH_RESP) Reset() {
	*x = MSG_C_MATCH_FINISH_RESP{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rapidteenpatti_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MSG_C_MATCH_FINISH_RESP) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MSG_C_MATCH_FINISH_RESP) ProtoMessage() {}

func (x *MSG_C_MATCH_FINISH_RESP) ProtoReflect() protoreflect.Message {
	mi := &file_rapidteenpatti_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MSG_C_MATCH_FINISH_RESP.ProtoReflect.Descriptor instead.
func (*MSG_C_MATCH_FINISH_RESP) Descriptor() ([]byte, []int) {
	return file_rapidteenpatti_proto_rawDescGZIP(), []int{3}
}

func (x *MSG_C_MATCH_FINISH_RESP) GetTableId() uint32 {
	if x != nil {
		return x.TableId
	}
	return 0
}

func (x *MSG_C_MATCH_FINISH_RESP) GetReason() uint32 {
	if x != nil {
		return x.Reason
	}
	return 0
}

// 通用客户端请求
type MSG_C_COMMON_REQ struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *MSG_C_COMMON_REQ) Reset() {
	*x = MSG_C_COMMON_REQ{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rapidteenpatti_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MSG_C_COMMON_REQ) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MSG_C_COMMON_REQ) ProtoMessage() {}

func (x *MSG_C_COMMON_REQ) ProtoReflect() protoreflect.Message {
	mi := &file_rapidteenpatti_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MSG_C_COMMON_REQ.ProtoReflect.Descriptor instead.
func (*MSG_C_COMMON_REQ) Descriptor() ([]byte, []int) {
	return file_rapidteenpatti_proto_rawDescGZIP(), []int{4}
}

// 通用服务端返回
type MSG_C_COMMON_RESP struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result uint32 `protobuf:"varint,2,opt,name=result,proto3" json:"result,omitempty"` // 0：正常
}

func (x *MSG_C_COMMON_RESP) Reset() {
	*x = MSG_C_COMMON_RESP{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rapidteenpatti_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MSG_C_COMMON_RESP) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MSG_C_COMMON_RESP) ProtoMessage() {}

func (x *MSG_C_COMMON_RESP) ProtoReflect() protoreflect.Message {
	mi := &file_rapidteenpatti_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MSG_C_COMMON_RESP.ProtoReflect.Descriptor instead.
func (*MSG_C_COMMON_RESP) Descriptor() ([]byte, []int) {
	return file_rapidteenpatti_proto_rawDescGZIP(), []int{5}
}

func (x *MSG_C_COMMON_RESP) GetResult() uint32 {
	if x != nil {
		return x.Result
	}
	return 0
}

// 座位上用户的游戏数据
type UserGameStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BUser uint32     `protobuf:"varint,1,opt,name=b_user,json=bUser,proto3" json:"b_user,omitempty"`                          // 此座位是否有人：0：没有人；1：有人
	BGame uint32     `protobuf:"varint,2,opt,name=b_game,json=bGame,proto3" json:"b_game,omitempty"`                          // 此座位是否参与本局游戏：0：不参与；1：参与（不参与的情况可能是刚进入游戏，或者没有钱站起等等）
	Cards []uint32   `protobuf:"varint,3,rep,packed,name=cards,proto3" json:"cards,omitempty"`                                // 座位上的牌
	PT    PokersType `protobuf:"varint,4,opt,name=PT,proto3,enum=com.cw.chess.rapidteenpatti.PokersType" json:"PT,omitempty"` // 牌型
	Score uint32     `protobuf:"varint,5,opt,name=score,proto3" json:"score,omitempty"`                                       // 牌分
}

func (x *UserGameStatus) Reset() {
	*x = UserGameStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rapidteenpatti_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserGameStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserGameStatus) ProtoMessage() {}

func (x *UserGameStatus) ProtoReflect() protoreflect.Message {
	mi := &file_rapidteenpatti_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserGameStatus.ProtoReflect.Descriptor instead.
func (*UserGameStatus) Descriptor() ([]byte, []int) {
	return file_rapidteenpatti_proto_rawDescGZIP(), []int{6}
}

func (x *UserGameStatus) GetBUser() uint32 {
	if x != nil {
		return x.BUser
	}
	return 0
}

func (x *UserGameStatus) GetBGame() uint32 {
	if x != nil {
		return x.BGame
	}
	return 0
}

func (x *UserGameStatus) GetCards() []uint32 {
	if x != nil {
		return x.Cards
	}
	return nil
}

func (x *UserGameStatus) GetPT() PokersType {
	if x != nil {
		return x.PT
	}
	return PokersType_PT_High
}

func (x *UserGameStatus) GetScore() uint32 {
	if x != nil {
		return x.Score
	}
	return 0
}

// 座位用户的全部状态和属性
type ChairStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChairIndex     uint32             `protobuf:"varint,1,opt,name=chair_index,json=chairIndex,proto3" json:"chair_index,omitempty"`              // 座位index
	UserAttir      *platform.GameUser `protobuf:"bytes,2,opt,name=user_attir,json=userAttir,proto3" json:"user_attir,omitempty"`                  // 用户的属性
	UserGameStatus *UserGameStatus    `protobuf:"bytes,3,opt,name=user_game_status,json=userGameStatus,proto3" json:"user_game_status,omitempty"` // 用户的游戏状态
}

func (x *ChairStatus) Reset() {
	*x = ChairStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rapidteenpatti_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChairStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChairStatus) ProtoMessage() {}

func (x *ChairStatus) ProtoReflect() protoreflect.Message {
	mi := &file_rapidteenpatti_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChairStatus.ProtoReflect.Descriptor instead.
func (*ChairStatus) Descriptor() ([]byte, []int) {
	return file_rapidteenpatti_proto_rawDescGZIP(), []int{7}
}

func (x *ChairStatus) GetChairIndex() uint32 {
	if x != nil {
		return x.ChairIndex
	}
	return 0
}

func (x *ChairStatus) GetUserAttir() *platform.GameUser {
	if x != nil {
		return x.UserAttir
	}
	return nil
}

func (x *ChairStatus) GetUserGameStatus() *UserGameStatus {
	if x != nil {
		return x.UserGameStatus
	}
	return nil
}

type MSG_C_GAME_READY_3_RESP struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Times uint32 `protobuf:"varint,1,opt,name=times,proto3" json:"times,omitempty"` //（对于teenpatti来说，业务不需要倒计时，但是技术需要，所以当客户端收到此协议，马上就回复确认包CMD_C_GAME_READY_COMFIRM_REQ，这个时间过后，如果服务器没有收到，会认为用户掉线了）
}

func (x *MSG_C_GAME_READY_3_RESP) Reset() {
	*x = MSG_C_GAME_READY_3_RESP{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rapidteenpatti_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MSG_C_GAME_READY_3_RESP) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MSG_C_GAME_READY_3_RESP) ProtoMessage() {}

func (x *MSG_C_GAME_READY_3_RESP) ProtoReflect() protoreflect.Message {
	mi := &file_rapidteenpatti_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MSG_C_GAME_READY_3_RESP.ProtoReflect.Descriptor instead.
func (*MSG_C_GAME_READY_3_RESP) Descriptor() ([]byte, []int) {
	return file_rapidteenpatti_proto_rawDescGZIP(), []int{8}
}

func (x *MSG_C_GAME_READY_3_RESP) GetTimes() uint32 {
	if x != nil {
		return x.Times
	}
	return 0
}

// 桌子的全部信息
type MSG_C_GET_TABLE_STATUS_RESP struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LevelDesc *platform.RapidTeenpattiLevelDesc `protobuf:"bytes,1,opt,name=level_desc,json=levelDesc,proto3" json:"level_desc,omitempty"`                                             // 桌子静态数据
	GamePhase GamePhase                         `protobuf:"varint,2,opt,name=game_phase,json=gamePhase,proto3,enum=com.cw.chess.rapidteenpatti.GamePhase" json:"game_phase,omitempty"` // 游戏进度状态
	Charis    []*ChairStatus                    `protobuf:"bytes,3,rep,name=charis,proto3" json:"charis,omitempty"`                                                                    // 座位属性
	SelfIndex uint32                            `protobuf:"varint,4,opt,name=self_index,json=selfIndex,proto3" json:"self_index,omitempty"`                                            // 自己的座位
	GameID    string                            `protobuf:"bytes,5,opt,name=gameID,proto3" json:"gameID,omitempty"`                                                                    // 本局牌局ID
	Dealer    uint32                            `protobuf:"varint,6,opt,name=dealer,proto3" json:"dealer,omitempty"`                                                                   // 庄家位置
	RoundId   uint32                            `protobuf:"varint,7,opt,name=round_id,json=roundId,proto3" json:"round_id,omitempty"`                                                  // 轮次
}

func (x *MSG_C_GET_TABLE_STATUS_RESP) Reset() {
	*x = MSG_C_GET_TABLE_STATUS_RESP{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rapidteenpatti_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MSG_C_GET_TABLE_STATUS_RESP) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MSG_C_GET_TABLE_STATUS_RESP) ProtoMessage() {}

func (x *MSG_C_GET_TABLE_STATUS_RESP) ProtoReflect() protoreflect.Message {
	mi := &file_rapidteenpatti_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MSG_C_GET_TABLE_STATUS_RESP.ProtoReflect.Descriptor instead.
func (*MSG_C_GET_TABLE_STATUS_RESP) Descriptor() ([]byte, []int) {
	return file_rapidteenpatti_proto_rawDescGZIP(), []int{9}
}

func (x *MSG_C_GET_TABLE_STATUS_RESP) GetLevelDesc() *platform.RapidTeenpattiLevelDesc {
	if x != nil {
		return x.LevelDesc
	}
	return nil
}

func (x *MSG_C_GET_TABLE_STATUS_RESP) GetGamePhase() GamePhase {
	if x != nil {
		return x.GamePhase
	}
	return GamePhase_PHS_INVALID
}

func (x *MSG_C_GET_TABLE_STATUS_RESP) GetCharis() []*ChairStatus {
	if x != nil {
		return x.Charis
	}
	return nil
}

func (x *MSG_C_GET_TABLE_STATUS_RESP) GetSelfIndex() uint32 {
	if x != nil {
		return x.SelfIndex
	}
	return 0
}

func (x *MSG_C_GET_TABLE_STATUS_RESP) GetGameID() string {
	if x != nil {
		return x.GameID
	}
	return ""
}

func (x *MSG_C_GET_TABLE_STATUS_RESP) GetDealer() uint32 {
	if x != nil {
		return x.Dealer
	}
	return 0
}

func (x *MSG_C_GET_TABLE_STATUS_RESP) GetRoundId() uint32 {
	if x != nil {
		return x.RoundId
	}
	return 0
}

// 通知游戏开始(状态会维持用户数量*2秒)
type MSG_C_GAME_DEALCARDS_RESP struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GameID  string         `protobuf:"bytes,1,opt,name=gameID,proto3" json:"gameID,omitempty"`                   // 本局牌局ID
	Charis  []*ChairStatus `protobuf:"bytes,2,rep,name=charis,proto3" json:"charis,omitempty"`                   // 座位上参与的人数，如果是2人局，则会有2个数据，如果是6人局，有6个数据
	Dealer  uint32         `protobuf:"varint,3,opt,name=dealer,proto3" json:"dealer,omitempty"`                  // 本局dealer（庄家）
	RoundId uint32         `protobuf:"varint,4,opt,name=round_id,json=roundId,proto3" json:"round_id,omitempty"` // 轮次
}

func (x *MSG_C_GAME_DEALCARDS_RESP) Reset() {
	*x = MSG_C_GAME_DEALCARDS_RESP{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rapidteenpatti_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MSG_C_GAME_DEALCARDS_RESP) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MSG_C_GAME_DEALCARDS_RESP) ProtoMessage() {}

func (x *MSG_C_GAME_DEALCARDS_RESP) ProtoReflect() protoreflect.Message {
	mi := &file_rapidteenpatti_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MSG_C_GAME_DEALCARDS_RESP.ProtoReflect.Descriptor instead.
func (*MSG_C_GAME_DEALCARDS_RESP) Descriptor() ([]byte, []int) {
	return file_rapidteenpatti_proto_rawDescGZIP(), []int{10}
}

func (x *MSG_C_GAME_DEALCARDS_RESP) GetGameID() string {
	if x != nil {
		return x.GameID
	}
	return ""
}

func (x *MSG_C_GAME_DEALCARDS_RESP) GetCharis() []*ChairStatus {
	if x != nil {
		return x.Charis
	}
	return nil
}

func (x *MSG_C_GAME_DEALCARDS_RESP) GetDealer() uint32 {
	if x != nil {
		return x.Dealer
	}
	return 0
}

func (x *MSG_C_GAME_DEALCARDS_RESP) GetRoundId() uint32 {
	if x != nil {
		return x.RoundId
	}
	return 0
}

// 单个用户结算信息
type UserSettle struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChairIndex  uint32 `protobuf:"varint,1,opt,name=chair_index,json=chairIndex,proto3" json:"chair_index,omitempty"`    // 座位编号
	BGame       uint32 `protobuf:"varint,2,opt,name=b_game,json=bGame,proto3" json:"b_game,omitempty"`                   // 用户是否参与
	WinCurrency int32  `protobuf:"varint,3,opt,name=win_currency,json=winCurrency,proto3" json:"win_currency,omitempty"` // 用户的金币获得（有正有负）
}

func (x *UserSettle) Reset() {
	*x = UserSettle{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rapidteenpatti_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserSettle) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserSettle) ProtoMessage() {}

func (x *UserSettle) ProtoReflect() protoreflect.Message {
	mi := &file_rapidteenpatti_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserSettle.ProtoReflect.Descriptor instead.
func (*UserSettle) Descriptor() ([]byte, []int) {
	return file_rapidteenpatti_proto_rawDescGZIP(), []int{11}
}

func (x *UserSettle) GetChairIndex() uint32 {
	if x != nil {
		return x.ChairIndex
	}
	return 0
}

func (x *UserSettle) GetBGame() uint32 {
	if x != nil {
		return x.BGame
	}
	return 0
}

func (x *UserSettle) GetWinCurrency() int32 {
	if x != nil {
		return x.WinCurrency
	}
	return 0
}

// 结算
type MSG_C_GAME_SETTLE_RESP struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	WinIndex    uint32        `protobuf:"varint,1,opt,name=win_index,json=winIndex,proto3" json:"win_index,omitempty"` // 胜利的位置
	UsersSettle []*UserSettle `protobuf:"bytes,2,rep,name=users_settle,json=usersSettle,proto3" json:"users_settle,omitempty"`
}

func (x *MSG_C_GAME_SETTLE_RESP) Reset() {
	*x = MSG_C_GAME_SETTLE_RESP{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rapidteenpatti_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MSG_C_GAME_SETTLE_RESP) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MSG_C_GAME_SETTLE_RESP) ProtoMessage() {}

func (x *MSG_C_GAME_SETTLE_RESP) ProtoReflect() protoreflect.Message {
	mi := &file_rapidteenpatti_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MSG_C_GAME_SETTLE_RESP.ProtoReflect.Descriptor instead.
func (*MSG_C_GAME_SETTLE_RESP) Descriptor() ([]byte, []int) {
	return file_rapidteenpatti_proto_rawDescGZIP(), []int{12}
}

func (x *MSG_C_GAME_SETTLE_RESP) GetWinIndex() uint32 {
	if x != nil {
		return x.WinIndex
	}
	return 0
}

func (x *MSG_C_GAME_SETTLE_RESP) GetUsersSettle() []*UserSettle {
	if x != nil {
		return x.UsersSettle
	}
	return nil
}

// 用户聊天请求
type MSG_C_CHAT_REQ struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChatType    uint32 `protobuf:"varint,1,opt,name=chat_type,json=chatType,proto3" json:"chat_type,omitempty"`        // 聊天类型1：固定语句聊天；2：自由语句聊天
	Type_1Value string `protobuf:"bytes,2,opt,name=type_1_value,json=type1Value,proto3" json:"type_1_value,omitempty"` // 固定语句聊天的值
	Type_2Value string `protobuf:"bytes,3,opt,name=type_2_value,json=type2Value,proto3" json:"type_2_value,omitempty"` // 自由语句聊天的值
}

func (x *MSG_C_CHAT_REQ) Reset() {
	*x = MSG_C_CHAT_REQ{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rapidteenpatti_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MSG_C_CHAT_REQ) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MSG_C_CHAT_REQ) ProtoMessage() {}

func (x *MSG_C_CHAT_REQ) ProtoReflect() protoreflect.Message {
	mi := &file_rapidteenpatti_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MSG_C_CHAT_REQ.ProtoReflect.Descriptor instead.
func (*MSG_C_CHAT_REQ) Descriptor() ([]byte, []int) {
	return file_rapidteenpatti_proto_rawDescGZIP(), []int{13}
}

func (x *MSG_C_CHAT_REQ) GetChatType() uint32 {
	if x != nil {
		return x.ChatType
	}
	return 0
}

func (x *MSG_C_CHAT_REQ) GetType_1Value() string {
	if x != nil {
		return x.Type_1Value
	}
	return ""
}

func (x *MSG_C_CHAT_REQ) GetType_2Value() string {
	if x != nil {
		return x.Type_2Value
	}
	return ""
}

// 用户聊天请求
type MSG_C_CHAT_RESP struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChatIndex   uint32 `protobuf:"varint,1,opt,name=chat_index,json=chatIndex,proto3" json:"chat_index,omitempty"`     // 聊天的座位ID
	ChatType    uint32 `protobuf:"varint,2,opt,name=chat_type,json=chatType,proto3" json:"chat_type,omitempty"`        // 聊天类型1：固定语句聊天；2：自由语句聊天
	Type_1Value string `protobuf:"bytes,3,opt,name=type_1_value,json=type1Value,proto3" json:"type_1_value,omitempty"` // 固定语句聊天的值
	Type_2Value string `protobuf:"bytes,4,opt,name=type_2_value,json=type2Value,proto3" json:"type_2_value,omitempty"` // 自由语句聊天的值
}

func (x *MSG_C_CHAT_RESP) Reset() {
	*x = MSG_C_CHAT_RESP{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rapidteenpatti_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MSG_C_CHAT_RESP) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MSG_C_CHAT_RESP) ProtoMessage() {}

func (x *MSG_C_CHAT_RESP) ProtoReflect() protoreflect.Message {
	mi := &file_rapidteenpatti_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MSG_C_CHAT_RESP.ProtoReflect.Descriptor instead.
func (*MSG_C_CHAT_RESP) Descriptor() ([]byte, []int) {
	return file_rapidteenpatti_proto_rawDescGZIP(), []int{14}
}

func (x *MSG_C_CHAT_RESP) GetChatIndex() uint32 {
	if x != nil {
		return x.ChatIndex
	}
	return 0
}

func (x *MSG_C_CHAT_RESP) GetChatType() uint32 {
	if x != nil {
		return x.ChatType
	}
	return 0
}

func (x *MSG_C_CHAT_RESP) GetType_1Value() string {
	if x != nil {
		return x.Type_1Value
	}
	return ""
}

func (x *MSG_C_CHAT_RESP) GetType_2Value() string {
	if x != nil {
		return x.Type_2Value
	}
	return ""
}

var File_rapidteenpatti_proto protoreflect.FileDescriptor

var file_rapidteenpatti_proto_rawDesc = []byte{
	0x0a, 0x14, 0x72, 0x61, 0x70, 0x69, 0x64, 0x74, 0x65, 0x65, 0x6e, 0x70, 0x61, 0x74, 0x74, 0x69,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x1b, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x77, 0x2e, 0x63,
	0x68, 0x65, 0x73, 0x73, 0x2e, 0x72, 0x61, 0x70, 0x69, 0x64, 0x74, 0x65, 0x65, 0x6e, 0x70, 0x61,
	0x74, 0x74, 0x69, 0x1a, 0x0e, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x22, 0x74, 0x0a, 0x13, 0x4d, 0x53, 0x47, 0x5f, 0x53, 0x5f, 0x52, 0x54, 0x50,
	0x5f, 0x53, 0x54, 0x41, 0x52, 0x54, 0x5f, 0x52, 0x45, 0x51, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x65,
	0x76, 0x65, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c,
	0x12, 0x35, 0x0a, 0x05, 0x75, 0x73, 0x65, 0x72, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x1f, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x77, 0x2e, 0x63, 0x68, 0x65, 0x73, 0x73, 0x2e, 0x70,
	0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x47, 0x61, 0x6d, 0x65, 0x55, 0x73, 0x65, 0x72,
	0x52, 0x05, 0x75, 0x73, 0x65, 0x72, 0x73, 0x12, 0x10, 0x0a, 0x03, 0x72, 0x62, 0x63, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x72, 0x62, 0x63, 0x22, 0x49, 0x0a, 0x14, 0x4d, 0x53, 0x47,
	0x5f, 0x53, 0x5f, 0x52, 0x54, 0x50, 0x5f, 0x53, 0x54, 0x41, 0x52, 0x54, 0x5f, 0x52, 0x45, 0x53,
	0x50, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x74, 0x61, 0x62,
	0x6c, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x74, 0x61, 0x62,
	0x6c, 0x65, 0x49, 0x64, 0x22, 0x3a, 0x0a, 0x09, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x44, 0x61, 0x74,
	0x61, 0x12, 0x19, 0x0a, 0x08, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x07, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04,
	0x64, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61,
	0x22, 0x4c, 0x0a, 0x17, 0x4d, 0x53, 0x47, 0x5f, 0x43, 0x5f, 0x4d, 0x41, 0x54, 0x43, 0x48, 0x5f,
	0x46, 0x49, 0x4e, 0x49, 0x53, 0x48, 0x5f, 0x52, 0x45, 0x53, 0x50, 0x12, 0x19, 0x0a, 0x08, 0x74,
	0x61, 0x62, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x74,
	0x61, 0x62, 0x6c, 0x65, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x22, 0x12,
	0x0a, 0x10, 0x4d, 0x53, 0x47, 0x5f, 0x43, 0x5f, 0x43, 0x4f, 0x4d, 0x4d, 0x4f, 0x4e, 0x5f, 0x52,
	0x45, 0x51, 0x22, 0x2b, 0x0a, 0x11, 0x4d, 0x53, 0x47, 0x5f, 0x43, 0x5f, 0x43, 0x4f, 0x4d, 0x4d,
	0x4f, 0x4e, 0x5f, 0x52, 0x45, 0x53, 0x50, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22,
	0xa3, 0x01, 0x0a, 0x0e, 0x55, 0x73, 0x65, 0x72, 0x47, 0x61, 0x6d, 0x65, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x12, 0x15, 0x0a, 0x06, 0x62, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x05, 0x62, 0x55, 0x73, 0x65, 0x72, 0x12, 0x15, 0x0a, 0x06, 0x62, 0x5f, 0x67,
	0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x62, 0x47, 0x61, 0x6d, 0x65,
	0x12, 0x14, 0x0a, 0x05, 0x63, 0x61, 0x72, 0x64, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0d, 0x52,
	0x05, 0x63, 0x61, 0x72, 0x64, 0x73, 0x12, 0x37, 0x0a, 0x02, 0x50, 0x54, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x27, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x77, 0x2e, 0x63, 0x68, 0x65, 0x73,
	0x73, 0x2e, 0x72, 0x61, 0x70, 0x69, 0x64, 0x74, 0x65, 0x65, 0x6e, 0x70, 0x61, 0x74, 0x74, 0x69,
	0x2e, 0x50, 0x6f, 0x6b, 0x65, 0x72, 0x73, 0x54, 0x79, 0x70, 0x65, 0x52, 0x02, 0x50, 0x54, 0x12,
	0x14, 0x0a, 0x05, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05,
	0x73, 0x63, 0x6f, 0x72, 0x65, 0x22, 0xc5, 0x01, 0x0a, 0x0b, 0x43, 0x68, 0x61, 0x69, 0x72, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x68, 0x61, 0x69, 0x72, 0x5f, 0x69,
	0x6e, 0x64, 0x65, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x63, 0x68, 0x61, 0x69,
	0x72, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x3e, 0x0a, 0x0a, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61,
	0x74, 0x74, 0x69, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x63, 0x6f, 0x6d,
	0x2e, 0x63, 0x77, 0x2e, 0x63, 0x68, 0x65, 0x73, 0x73, 0x2e, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f,
	0x72, 0x6d, 0x2e, 0x47, 0x61, 0x6d, 0x65, 0x55, 0x73, 0x65, 0x72, 0x52, 0x09, 0x75, 0x73, 0x65,
	0x72, 0x41, 0x74, 0x74, 0x69, 0x72, 0x12, 0x55, 0x0a, 0x10, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x67,
	0x61, 0x6d, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x2b, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x77, 0x2e, 0x63, 0x68, 0x65, 0x73, 0x73, 0x2e,
	0x72, 0x61, 0x70, 0x69, 0x64, 0x74, 0x65, 0x65, 0x6e, 0x70, 0x61, 0x74, 0x74, 0x69, 0x2e, 0x55,
	0x73, 0x65, 0x72, 0x47, 0x61, 0x6d, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x0e, 0x75,
	0x73, 0x65, 0x72, 0x47, 0x61, 0x6d, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x2f, 0x0a,
	0x17, 0x4d, 0x53, 0x47, 0x5f, 0x43, 0x5f, 0x47, 0x41, 0x4d, 0x45, 0x5f, 0x52, 0x45, 0x41, 0x44,
	0x59, 0x5f, 0x33, 0x5f, 0x52, 0x45, 0x53, 0x50, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x6d, 0x65,
	0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x22, 0xdf,
	0x02, 0x0a, 0x1b, 0x4d, 0x53, 0x47, 0x5f, 0x43, 0x5f, 0x47, 0x45, 0x54, 0x5f, 0x54, 0x41, 0x42,
	0x4c, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x52, 0x45, 0x53, 0x50, 0x12, 0x4d,
	0x0a, 0x0a, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x77, 0x2e, 0x63, 0x68, 0x65, 0x73,
	0x73, 0x2e, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x52, 0x61, 0x70, 0x69, 0x64,
	0x54, 0x65, 0x65, 0x6e, 0x70, 0x61, 0x74, 0x74, 0x69, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x44, 0x65,
	0x73, 0x63, 0x52, 0x09, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x44, 0x65, 0x73, 0x63, 0x12, 0x45, 0x0a,
	0x0a, 0x67, 0x61, 0x6d, 0x65, 0x5f, 0x70, 0x68, 0x61, 0x73, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x26, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x77, 0x2e, 0x63, 0x68, 0x65, 0x73, 0x73,
	0x2e, 0x72, 0x61, 0x70, 0x69, 0x64, 0x74, 0x65, 0x65, 0x6e, 0x70, 0x61, 0x74, 0x74, 0x69, 0x2e,
	0x47, 0x61, 0x6d, 0x65, 0x50, 0x68, 0x61, 0x73, 0x65, 0x52, 0x09, 0x67, 0x61, 0x6d, 0x65, 0x50,
	0x68, 0x61, 0x73, 0x65, 0x12, 0x40, 0x0a, 0x06, 0x63, 0x68, 0x61, 0x72, 0x69, 0x73, 0x18, 0x03,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x77, 0x2e, 0x63, 0x68,
	0x65, 0x73, 0x73, 0x2e, 0x72, 0x61, 0x70, 0x69, 0x64, 0x74, 0x65, 0x65, 0x6e, 0x70, 0x61, 0x74,
	0x74, 0x69, 0x2e, 0x43, 0x68, 0x61, 0x69, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06,
	0x63, 0x68, 0x61, 0x72, 0x69, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x65, 0x6c, 0x66, 0x5f, 0x69,
	0x6e, 0x64, 0x65, 0x78, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x73, 0x65, 0x6c, 0x66,
	0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x16, 0x0a, 0x06, 0x67, 0x61, 0x6d, 0x65, 0x49, 0x44, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x67, 0x61, 0x6d, 0x65, 0x49, 0x44, 0x12, 0x16, 0x0a,
	0x06, 0x64, 0x65, 0x61, 0x6c, 0x65, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x64,
	0x65, 0x61, 0x6c, 0x65, 0x72, 0x12, 0x19, 0x0a, 0x08, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x5f, 0x69,
	0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x49, 0x64,
	0x22, 0xa8, 0x01, 0x0a, 0x19, 0x4d, 0x53, 0x47, 0x5f, 0x43, 0x5f, 0x47, 0x41, 0x4d, 0x45, 0x5f,
	0x44, 0x45, 0x41, 0x4c, 0x43, 0x41, 0x52, 0x44, 0x53, 0x5f, 0x52, 0x45, 0x53, 0x50, 0x12, 0x16,
	0x0a, 0x06, 0x67, 0x61, 0x6d, 0x65, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x67, 0x61, 0x6d, 0x65, 0x49, 0x44, 0x12, 0x40, 0x0a, 0x06, 0x63, 0x68, 0x61, 0x72, 0x69, 0x73,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x77, 0x2e,
	0x63, 0x68, 0x65, 0x73, 0x73, 0x2e, 0x72, 0x61, 0x70, 0x69, 0x64, 0x74, 0x65, 0x65, 0x6e, 0x70,
	0x61, 0x74, 0x74, 0x69, 0x2e, 0x43, 0x68, 0x61, 0x69, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x52, 0x06, 0x63, 0x68, 0x61, 0x72, 0x69, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x64, 0x65, 0x61, 0x6c,
	0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x64, 0x65, 0x61, 0x6c, 0x65, 0x72,
	0x12, 0x19, 0x0a, 0x08, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x07, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x49, 0x64, 0x22, 0x67, 0x0a, 0x0a, 0x55,
	0x73, 0x65, 0x72, 0x53, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x68, 0x61,
	0x69, 0x72, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a,
	0x63, 0x68, 0x61, 0x69, 0x72, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x15, 0x0a, 0x06, 0x62, 0x5f,
	0x67, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x62, 0x47, 0x61, 0x6d,
	0x65, 0x12, 0x21, 0x0a, 0x0c, 0x77, 0x69, 0x6e, 0x5f, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63,
	0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x77, 0x69, 0x6e, 0x43, 0x75, 0x72, 0x72,
	0x65, 0x6e, 0x63, 0x79, 0x22, 0x81, 0x01, 0x0a, 0x16, 0x4d, 0x53, 0x47, 0x5f, 0x43, 0x5f, 0x47,
	0x41, 0x4d, 0x45, 0x5f, 0x53, 0x45, 0x54, 0x54, 0x4c, 0x45, 0x5f, 0x52, 0x45, 0x53, 0x50, 0x12,
	0x1b, 0x0a, 0x09, 0x77, 0x69, 0x6e, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x08, 0x77, 0x69, 0x6e, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x4a, 0x0a, 0x0c,
	0x75, 0x73, 0x65, 0x72, 0x73, 0x5f, 0x73, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x27, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x77, 0x2e, 0x63, 0x68, 0x65, 0x73,
	0x73, 0x2e, 0x72, 0x61, 0x70, 0x69, 0x64, 0x74, 0x65, 0x65, 0x6e, 0x70, 0x61, 0x74, 0x74, 0x69,
	0x2e, 0x55, 0x73, 0x65, 0x72, 0x53, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x52, 0x0b, 0x75, 0x73, 0x65,
	0x72, 0x73, 0x53, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x22, 0x71, 0x0a, 0x0e, 0x4d, 0x53, 0x47, 0x5f,
	0x43, 0x5f, 0x43, 0x48, 0x41, 0x54, 0x5f, 0x52, 0x45, 0x51, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x68,
	0x61, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x63,
	0x68, 0x61, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x20, 0x0a, 0x0c, 0x74, 0x79, 0x70, 0x65, 0x5f,
	0x31, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x74,
	0x79, 0x70, 0x65, 0x31, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x20, 0x0a, 0x0c, 0x74, 0x79, 0x70,
	0x65, 0x5f, 0x32, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0a, 0x74, 0x79, 0x70, 0x65, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x91, 0x01, 0x0a, 0x0f,
	0x4d, 0x53, 0x47, 0x5f, 0x43, 0x5f, 0x43, 0x48, 0x41, 0x54, 0x5f, 0x52, 0x45, 0x53, 0x50, 0x12,
	0x1d, 0x0a, 0x0a, 0x63, 0x68, 0x61, 0x74, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x09, 0x63, 0x68, 0x61, 0x74, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x1b,
	0x0a, 0x09, 0x63, 0x68, 0x61, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x08, 0x63, 0x68, 0x61, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x20, 0x0a, 0x0c, 0x74,
	0x79, 0x70, 0x65, 0x5f, 0x31, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0a, 0x74, 0x79, 0x70, 0x65, 0x31, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x20, 0x0a,
	0x0c, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x32, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x74, 0x79, 0x70, 0x65, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x2a,
	0x7c, 0x0a, 0x14, 0x52, 0x61, 0x70, 0x69, 0x64, 0x54, 0x65, 0x65, 0x6e, 0x70, 0x61, 0x74, 0x74,
	0x69, 0x5f, 0x53, 0x5f, 0x43, 0x6d, 0x64, 0x12, 0x11, 0x0a, 0x0d, 0x43, 0x4d, 0x44, 0x5f, 0x53,
	0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x10, 0x00, 0x12, 0x0e, 0x0a, 0x0a, 0x43, 0x4d,
	0x44, 0x5f, 0x53, 0x5f, 0x50, 0x49, 0x4e, 0x47, 0x10, 0x01, 0x12, 0x0e, 0x0a, 0x0a, 0x43, 0x4d,
	0x44, 0x5f, 0x53, 0x5f, 0x50, 0x4f, 0x4e, 0x47, 0x10, 0x02, 0x12, 0x17, 0x0a, 0x13, 0x43, 0x4d,
	0x44, 0x5f, 0x53, 0x5f, 0x52, 0x54, 0x50, 0x5f, 0x53, 0x54, 0x41, 0x52, 0x54, 0x5f, 0x52, 0x45,
	0x51, 0x10, 0x03, 0x12, 0x18, 0x0a, 0x14, 0x43, 0x4d, 0x44, 0x5f, 0x53, 0x5f, 0x52, 0x54, 0x50,
	0x5f, 0x53, 0x54, 0x41, 0x52, 0x54, 0x5f, 0x52, 0x45, 0x53, 0x50, 0x10, 0x04, 0x2a, 0xa6, 0x04,
	0x0a, 0x0a, 0x52, 0x61, 0x70, 0x69, 0x64, 0x54, 0x50, 0x43, 0x6d, 0x64, 0x12, 0x11, 0x0a, 0x0d,
	0x43, 0x4d, 0x44, 0x5f, 0x43, 0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x10, 0x00, 0x12,
	0x1e, 0x0a, 0x1a, 0x43, 0x4d, 0x44, 0x5f, 0x43, 0x5f, 0x47, 0x45, 0x54, 0x5f, 0x54, 0x41, 0x42,
	0x4c, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x52, 0x45, 0x51, 0x10, 0x01, 0x12,
	0x1f, 0x0a, 0x1b, 0x43, 0x4d, 0x44, 0x5f, 0x43, 0x5f, 0x47, 0x45, 0x54, 0x5f, 0x54, 0x41, 0x42,
	0x4c, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x52, 0x45, 0x53, 0x50, 0x10, 0x02,
	0x12, 0x19, 0x0a, 0x15, 0x43, 0x4d, 0x44, 0x5f, 0x43, 0x5f, 0x4d, 0x41, 0x54, 0x43, 0x48, 0x5f,
	0x52, 0x45, 0x41, 0x44, 0x59, 0x5f, 0x52, 0x45, 0x51, 0x10, 0x03, 0x12, 0x1a, 0x0a, 0x16, 0x43,
	0x4d, 0x44, 0x5f, 0x43, 0x5f, 0x4d, 0x41, 0x54, 0x43, 0x48, 0x5f, 0x52, 0x45, 0x41, 0x44, 0x59,
	0x5f, 0x52, 0x45, 0x53, 0x50, 0x10, 0x04, 0x12, 0x1a, 0x0a, 0x16, 0x43, 0x4d, 0x44, 0x5f, 0x43,
	0x5f, 0x4d, 0x41, 0x54, 0x43, 0x48, 0x5f, 0x46, 0x49, 0x4e, 0x49, 0x53, 0x48, 0x5f, 0x52, 0x45,
	0x51, 0x10, 0x05, 0x12, 0x1b, 0x0a, 0x17, 0x43, 0x4d, 0x44, 0x5f, 0x43, 0x5f, 0x4d, 0x41, 0x54,
	0x43, 0x48, 0x5f, 0x46, 0x49, 0x4e, 0x49, 0x53, 0x48, 0x5f, 0x52, 0x45, 0x53, 0x50, 0x10, 0x06,
	0x12, 0x1a, 0x0a, 0x16, 0x43, 0x4d, 0x44, 0x5f, 0x43, 0x5f, 0x47, 0x41, 0x4d, 0x45, 0x5f, 0x52,
	0x45, 0x41, 0x44, 0x59, 0x5f, 0x33, 0x5f, 0x52, 0x45, 0x51, 0x10, 0x14, 0x12, 0x1b, 0x0a, 0x17,
	0x43, 0x4d, 0x44, 0x5f, 0x43, 0x5f, 0x47, 0x41, 0x4d, 0x45, 0x5f, 0x52, 0x45, 0x41, 0x44, 0x59,
	0x5f, 0x33, 0x5f, 0x52, 0x45, 0x53, 0x50, 0x10, 0x15, 0x12, 0x20, 0x0a, 0x1c, 0x43, 0x4d, 0x44,
	0x5f, 0x43, 0x5f, 0x47, 0x41, 0x4d, 0x45, 0x5f, 0x52, 0x45, 0x41, 0x44, 0x59, 0x5f, 0x43, 0x4f,
	0x4d, 0x46, 0x49, 0x52, 0x4d, 0x5f, 0x52, 0x45, 0x51, 0x10, 0x16, 0x12, 0x21, 0x0a, 0x1d, 0x43,
	0x4d, 0x44, 0x5f, 0x43, 0x5f, 0x47, 0x41, 0x4d, 0x45, 0x5f, 0x52, 0x45, 0x41, 0x44, 0x59, 0x5f,
	0x43, 0x4f, 0x4d, 0x46, 0x49, 0x52, 0x4d, 0x5f, 0x52, 0x45, 0x53, 0x50, 0x10, 0x17, 0x12, 0x1c,
	0x0a, 0x18, 0x43, 0x4d, 0x44, 0x5f, 0x43, 0x5f, 0x47, 0x41, 0x4d, 0x45, 0x5f, 0x44, 0x45, 0x41,
	0x4c, 0x43, 0x41, 0x52, 0x44, 0x53, 0x5f, 0x52, 0x45, 0x51, 0x10, 0x18, 0x12, 0x1d, 0x0a, 0x19,
	0x43, 0x4d, 0x44, 0x5f, 0x43, 0x5f, 0x47, 0x41, 0x4d, 0x45, 0x5f, 0x44, 0x45, 0x41, 0x4c, 0x43,
	0x41, 0x52, 0x44, 0x53, 0x5f, 0x52, 0x45, 0x53, 0x50, 0x10, 0x19, 0x12, 0x19, 0x0a, 0x15, 0x43,
	0x4d, 0x44, 0x5f, 0x43, 0x5f, 0x47, 0x41, 0x4d, 0x45, 0x5f, 0x53, 0x45, 0x54, 0x54, 0x4c, 0x45,
	0x5f, 0x52, 0x45, 0x51, 0x10, 0x1a, 0x12, 0x1a, 0x0a, 0x16, 0x43, 0x4d, 0x44, 0x5f, 0x43, 0x5f,
	0x47, 0x41, 0x4d, 0x45, 0x5f, 0x53, 0x45, 0x54, 0x54, 0x4c, 0x45, 0x5f, 0x52, 0x45, 0x53, 0x50,
	0x10, 0x1b, 0x12, 0x1b, 0x0a, 0x17, 0x43, 0x4d, 0x44, 0x5f, 0x43, 0x5f, 0x47, 0x41, 0x4d, 0x45,
	0x5f, 0x43, 0x4f, 0x4e, 0x54, 0x49, 0x4e, 0x55, 0x45, 0x5f, 0x52, 0x45, 0x51, 0x10, 0x1c, 0x12,
	0x1c, 0x0a, 0x18, 0x43, 0x4d, 0x44, 0x5f, 0x43, 0x5f, 0x47, 0x41, 0x4d, 0x45, 0x5f, 0x43, 0x4f,
	0x4e, 0x54, 0x49, 0x4e, 0x55, 0x45, 0x5f, 0x52, 0x45, 0x53, 0x50, 0x10, 0x1d, 0x12, 0x12, 0x0a,
	0x0e, 0x43, 0x4d, 0x44, 0x5f, 0x43, 0x5f, 0x43, 0x48, 0x41, 0x54, 0x5f, 0x52, 0x45, 0x51, 0x10,
	0x3e, 0x12, 0x13, 0x0a, 0x0f, 0x43, 0x4d, 0x44, 0x5f, 0x43, 0x5f, 0x43, 0x48, 0x41, 0x54, 0x5f,
	0x52, 0x45, 0x53, 0x50, 0x10, 0x3f, 0x2a, 0x68, 0x0a, 0x0a, 0x50, 0x6f, 0x6b, 0x65, 0x72, 0x73,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x0b, 0x0a, 0x07, 0x50, 0x54, 0x5f, 0x48, 0x69, 0x67, 0x68, 0x10,
	0x00, 0x12, 0x0b, 0x0a, 0x07, 0x50, 0x54, 0x5f, 0x50, 0x61, 0x69, 0x72, 0x10, 0x01, 0x12, 0x0d,
	0x0a, 0x09, 0x50, 0x54, 0x5f, 0x43, 0x6f, 0x6c, 0x6f, 0x75, 0x72, 0x10, 0x02, 0x12, 0x0f, 0x0a,
	0x0b, 0x50, 0x54, 0x5f, 0x53, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x10, 0x03, 0x12, 0x14,
	0x0a, 0x10, 0x50, 0x54, 0x5f, 0x50, 0x75, 0x72, 0x65, 0x5f, 0x53, 0x65, 0x71, 0x75, 0x65, 0x6e,
	0x63, 0x65, 0x10, 0x04, 0x12, 0x0a, 0x0a, 0x06, 0x50, 0x54, 0x5f, 0x53, 0x65, 0x74, 0x10, 0x05,
	0x2a, 0x89, 0x01, 0x0a, 0x09, 0x47, 0x61, 0x6d, 0x65, 0x50, 0x68, 0x61, 0x73, 0x65, 0x12, 0x0f,
	0x0a, 0x0b, 0x50, 0x48, 0x53, 0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x10, 0x00, 0x12,
	0x13, 0x0a, 0x0f, 0x50, 0x48, 0x53, 0x5f, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x52, 0x65, 0x61,
	0x64, 0x79, 0x10, 0x01, 0x12, 0x12, 0x0a, 0x0e, 0x50, 0x48, 0x53, 0x5f, 0x47, 0x61, 0x6d, 0x65,
	0x5f, 0x52, 0x65, 0x61, 0x64, 0x79, 0x10, 0x02, 0x12, 0x16, 0x0a, 0x12, 0x50, 0x48, 0x53, 0x5f,
	0x47, 0x61, 0x6d, 0x65, 0x5f, 0x44, 0x65, 0x61, 0x6c, 0x43, 0x61, 0x72, 0x64, 0x73, 0x10, 0x03,
	0x12, 0x13, 0x0a, 0x0f, 0x50, 0x48, 0x53, 0x5f, 0x47, 0x61, 0x6d, 0x65, 0x5f, 0x53, 0x65, 0x74,
	0x74, 0x6c, 0x65, 0x10, 0x04, 0x12, 0x15, 0x0a, 0x11, 0x50, 0x48, 0x53, 0x5f, 0x47, 0x61, 0x6d,
	0x65, 0x5f, 0x43, 0x6f, 0x6e, 0x74, 0x69, 0x6e, 0x75, 0x65, 0x10, 0x05, 0x42, 0x1f, 0x5a, 0x1d,
	0x2e, 0x2f, 0x63, 0x6f, 0x6d, 0x2f, 0x63, 0x77, 0x2f, 0x63, 0x68, 0x65, 0x73, 0x73, 0x2f, 0x72,
	0x61, 0x70, 0x69, 0x64, 0x74, 0x65, 0x65, 0x6e, 0x70, 0x61, 0x74, 0x74, 0x69, 0x62, 0x06, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_rapidteenpatti_proto_rawDescOnce sync.Once
	file_rapidteenpatti_proto_rawDescData = file_rapidteenpatti_proto_rawDesc
)

func file_rapidteenpatti_proto_rawDescGZIP() []byte {
	file_rapidteenpatti_proto_rawDescOnce.Do(func() {
		file_rapidteenpatti_proto_rawDescData = protoimpl.X.CompressGZIP(file_rapidteenpatti_proto_rawDescData)
	})
	return file_rapidteenpatti_proto_rawDescData
}

var file_rapidteenpatti_proto_enumTypes = make([]protoimpl.EnumInfo, 4)
var file_rapidteenpatti_proto_msgTypes = make([]protoimpl.MessageInfo, 15)
var file_rapidteenpatti_proto_goTypes = []interface{}{
	(RapidTeenpatti_S_Cmd)(0),                // 0: com.cw.chess.rapidteenpatti.RapidTeenpatti_S_Cmd
	(RapidTPCmd)(0),                          // 1: com.cw.chess.rapidteenpatti.RapidTPCmd
	(PokersType)(0),                          // 2: com.cw.chess.rapidteenpatti.PokersType
	(GamePhase)(0),                           // 3: com.cw.chess.rapidteenpatti.GamePhase
	(*MSG_S_RTP_START_REQ)(nil),              // 4: com.cw.chess.rapidteenpatti.MSG_S_RTP_START_REQ
	(*MSG_S_RTP_START_RESP)(nil),             // 5: com.cw.chess.rapidteenpatti.MSG_S_RTP_START_RESP
	(*TableData)(nil),                        // 6: com.cw.chess.rapidteenpatti.TableData
	(*MSG_C_MATCH_FINISH_RESP)(nil),          // 7: com.cw.chess.rapidteenpatti.MSG_C_MATCH_FINISH_RESP
	(*MSG_C_COMMON_REQ)(nil),                 // 8: com.cw.chess.rapidteenpatti.MSG_C_COMMON_REQ
	(*MSG_C_COMMON_RESP)(nil),                // 9: com.cw.chess.rapidteenpatti.MSG_C_COMMON_RESP
	(*UserGameStatus)(nil),                   // 10: com.cw.chess.rapidteenpatti.UserGameStatus
	(*ChairStatus)(nil),                      // 11: com.cw.chess.rapidteenpatti.ChairStatus
	(*MSG_C_GAME_READY_3_RESP)(nil),          // 12: com.cw.chess.rapidteenpatti.MSG_C_GAME_READY_3_RESP
	(*MSG_C_GET_TABLE_STATUS_RESP)(nil),      // 13: com.cw.chess.rapidteenpatti.MSG_C_GET_TABLE_STATUS_RESP
	(*MSG_C_GAME_DEALCARDS_RESP)(nil),        // 14: com.cw.chess.rapidteenpatti.MSG_C_GAME_DEALCARDS_RESP
	(*UserSettle)(nil),                       // 15: com.cw.chess.rapidteenpatti.UserSettle
	(*MSG_C_GAME_SETTLE_RESP)(nil),           // 16: com.cw.chess.rapidteenpatti.MSG_C_GAME_SETTLE_RESP
	(*MSG_C_CHAT_REQ)(nil),                   // 17: com.cw.chess.rapidteenpatti.MSG_C_CHAT_REQ
	(*MSG_C_CHAT_RESP)(nil),                  // 18: com.cw.chess.rapidteenpatti.MSG_C_CHAT_RESP
	(*platform.GameUser)(nil),                // 19: com.cw.chess.platform.GameUser
	(*platform.RapidTeenpattiLevelDesc)(nil), // 20: com.cw.chess.platform.RapidTeenpattiLevelDesc
}
var file_rapidteenpatti_proto_depIdxs = []int32{
	19, // 0: com.cw.chess.rapidteenpatti.MSG_S_RTP_START_REQ.users:type_name -> com.cw.chess.platform.GameUser
	2,  // 1: com.cw.chess.rapidteenpatti.UserGameStatus.PT:type_name -> com.cw.chess.rapidteenpatti.PokersType
	19, // 2: com.cw.chess.rapidteenpatti.ChairStatus.user_attir:type_name -> com.cw.chess.platform.GameUser
	10, // 3: com.cw.chess.rapidteenpatti.ChairStatus.user_game_status:type_name -> com.cw.chess.rapidteenpatti.UserGameStatus
	20, // 4: com.cw.chess.rapidteenpatti.MSG_C_GET_TABLE_STATUS_RESP.level_desc:type_name -> com.cw.chess.platform.RapidTeenpattiLevelDesc
	3,  // 5: com.cw.chess.rapidteenpatti.MSG_C_GET_TABLE_STATUS_RESP.game_phase:type_name -> com.cw.chess.rapidteenpatti.GamePhase
	11, // 6: com.cw.chess.rapidteenpatti.MSG_C_GET_TABLE_STATUS_RESP.charis:type_name -> com.cw.chess.rapidteenpatti.ChairStatus
	11, // 7: com.cw.chess.rapidteenpatti.MSG_C_GAME_DEALCARDS_RESP.charis:type_name -> com.cw.chess.rapidteenpatti.ChairStatus
	15, // 8: com.cw.chess.rapidteenpatti.MSG_C_GAME_SETTLE_RESP.users_settle:type_name -> com.cw.chess.rapidteenpatti.UserSettle
	9,  // [9:9] is the sub-list for method output_type
	9,  // [9:9] is the sub-list for method input_type
	9,  // [9:9] is the sub-list for extension type_name
	9,  // [9:9] is the sub-list for extension extendee
	0,  // [0:9] is the sub-list for field type_name
}

func init() { file_rapidteenpatti_proto_init() }
func file_rapidteenpatti_proto_init() {
	if File_rapidteenpatti_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_rapidteenpatti_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MSG_S_RTP_START_REQ); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rapidteenpatti_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MSG_S_RTP_START_RESP); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rapidteenpatti_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TableData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rapidteenpatti_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MSG_C_MATCH_FINISH_RESP); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rapidteenpatti_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MSG_C_COMMON_REQ); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rapidteenpatti_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MSG_C_COMMON_RESP); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rapidteenpatti_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserGameStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rapidteenpatti_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChairStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rapidteenpatti_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MSG_C_GAME_READY_3_RESP); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rapidteenpatti_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MSG_C_GET_TABLE_STATUS_RESP); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rapidteenpatti_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MSG_C_GAME_DEALCARDS_RESP); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rapidteenpatti_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserSettle); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rapidteenpatti_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MSG_C_GAME_SETTLE_RESP); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rapidteenpatti_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MSG_C_CHAT_REQ); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rapidteenpatti_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MSG_C_CHAT_RESP); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_rapidteenpatti_proto_rawDesc,
			NumEnums:      4,
			NumMessages:   15,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_rapidteenpatti_proto_goTypes,
		DependencyIndexes: file_rapidteenpatti_proto_depIdxs,
		EnumInfos:         file_rapidteenpatti_proto_enumTypes,
		MessageInfos:      file_rapidteenpatti_proto_msgTypes,
	}.Build()
	File_rapidteenpatti_proto = out.File
	file_rapidteenpatti_proto_rawDesc = nil
	file_rapidteenpatti_proto_goTypes = nil
	file_rapidteenpatti_proto_depIdxs = nil
}
