// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.26.0
// 	protoc        v3.12.4
// source: rummy.proto

package rummy

import (
	platform "./com/cw/chess/platform"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

//rummy游戏客户端和服务端通信定义
type Rummy2_C_Cmd int32

const (
	Rummy2_C_Cmd_CMD_C_INVALID               Rummy2_C_Cmd = 0
	Rummy2_C_Cmd_CMD_C_GET_TABLE_STATUS_REQ  Rummy2_C_Cmd = 1 // 请求获取游戏数据，此协议应该在客户端资源加载完成后请求（通常为刚进游戏，比如匹配成功/断线重连）MSG_C_COMMON_REQ
	Rummy2_C_Cmd_CMD_C_GET_TABLE_STATUS_RESP Rummy2_C_Cmd = 2 // 回复：MSG_C_GET_TABLE_STATUS_RESP
	Rummy2_C_Cmd_CMD_C_MATCH_READY_REQ       Rummy2_C_Cmd = 3 // 通过匹配后，客户端告诉服务器资源已经加载好了（所有人全部加载完成，才会正式开始）：MSG_C_COMMON_REQ
	Rummy2_C_Cmd_CMD_C_MATCH_READY_RESP      Rummy2_C_Cmd = 4 // 返回请求，MSG_C_COMMON_RESP
	// 以下逻辑会在牌局之间循环
	Rummy2_C_Cmd_CMD_C_GAME_READY_3_REQ        Rummy2_C_Cmd = 5   // 无意义
	Rummy2_C_Cmd_CMD_C_GAME_READY_3_RESP       Rummy2_C_Cmd = 6   // 通知客户端3秒后开始：MSG_C_GAME_READY_3_RESP
	Rummy2_C_Cmd_CMD_C_GAME_READY_COMFIRM_REQ  Rummy2_C_Cmd = 7   // 客户端倒数结束后，通知服务器，（如果用户在倒数3秒内手动退出或者其他原因退出，游戏将取消）（服务器这个状态会维持5秒）MSG_C_COMMON_REQ
	Rummy2_C_Cmd_CMD_C_GAME_READY_COMFIRM_RESP Rummy2_C_Cmd = 8   // 无意义（不返回了，如果客户端需要，补一个）
	Rummy2_C_Cmd_CMD_C_GAME_DEALCARDS_REQ      Rummy2_C_Cmd = 9   // 无意义
	Rummy2_C_Cmd_CMD_C_GAME_DEALCARDS_RESP     Rummy2_C_Cmd = 10  // 发牌：MSG_C_GAME_DEALCARDS_RESP
	Rummy2_C_Cmd_CMD_C_GAME_CARDS_RESET_REQ    Rummy2_C_Cmd = 11  // 无意义
	Rummy2_C_Cmd_CMD_C_GAME_CARDS_RESET_RESP   Rummy2_C_Cmd = 12  // 通知客户端牌库重置了，MSG_C_GAME_CARDS_RESET_RESP
	Rummy2_C_Cmd_CMD_C_GAME_NOTICE_REQ         Rummy2_C_Cmd = 13  // 无意义
	Rummy2_C_Cmd_CMD_C_GAME_NOTICE_RESP        Rummy2_C_Cmd = 14  // 提示用户进行操作：MSG_C_GAME_NOTICE_RESP
	Rummy2_C_Cmd_CMD_C_GAME_USER_CHOICE_REQ    Rummy2_C_Cmd = 15  // 用户请求摸牌：MSG_C_GAME_USER_CHOICE_REQ
	Rummy2_C_Cmd_CMD_C_GAME_USER_CHOICE_RESP   Rummy2_C_Cmd = 16  // 用户请求摸牌（用户用户不操作，时间到了系统会自动下发）：MSG_C_GAME_USER_CHOICE_RESP
	Rummy2_C_Cmd_CMD_C_GAME_USER_OUT_REQ       Rummy2_C_Cmd = 17  // 用户出牌：MSG_C_GAME_USER_OUT_REQ
	Rummy2_C_Cmd_CMD_C_GAME_USER_OUT_RESP      Rummy2_C_Cmd = 18  // 用户出牌：MSG_C_GAME_USER_OUT_RESP
	Rummy2_C_Cmd_CMD_C_GAME_AI_SCORE_REQ       Rummy2_C_Cmd = 19  // 请求智能分组并算分：MSG_C_COMMON_REQ
	Rummy2_C_Cmd_CMD_C_GAME_AI_SCORE_RESP      Rummy2_C_Cmd = 20  // 请求智能分组并算分：MSG_C_GAME_AI_SCORE_RESP
	Rummy2_C_Cmd_CMD_C_GAME_DROP_REQ           Rummy2_C_Cmd = 21  // 棋牌协议：MSG_C_COMMON_REQ
	Rummy2_C_Cmd_CMD_C_GAME_DROP_RESP          Rummy2_C_Cmd = 22  // 棋牌协议：MSG_C_GAME_DROP_RESP
	Rummy2_C_Cmd_CMD_C_GAME_SETTLE_REQ         Rummy2_C_Cmd = 23  // 无意义
	Rummy2_C_Cmd_CMD_C_GAME_SETTLE_RESP        Rummy2_C_Cmd = 24  // 结算：MSG_C_GAME_SETTLE_RESP
	Rummy2_C_Cmd_CMD_C_GAME_CONTINUE_REQ       Rummy2_C_Cmd = 25  // 用户确认继续：MSG_C_GAME_CONTINUE_REQ
	Rummy2_C_Cmd_CMD_C_GAME_CONTINUE_RESP      Rummy2_C_Cmd = 26  // 无意义，后续会循环至PHS_Game_Ready结算（用户会从收到CMD_C_GAME_READY_3_RESP开始）
	Rummy2_C_Cmd_CMD_C_GAME_WIN_REQ            Rummy2_C_Cmd = 27  // 用户请求胡牌：MSG_C_GAME_WIN_REQ
	Rummy2_C_Cmd_CMD_C_GAME_WIN_RESP           Rummy2_C_Cmd = 28  // 用户请求胡牌：MSG_C_GAME_WIN_RESP
	Rummy2_C_Cmd_CMD_C_GAME_POSE_REQ           Rummy2_C_Cmd = 29  // 用户请求摆牌：MSG_C_GAME_POSE_REQ
	Rummy2_C_Cmd_CMD_C_GAME_POSE_RESP          Rummy2_C_Cmd = 30  // 用户请求摆牌：MSG_C_GAME_POSE_RESP
	Rummy2_C_Cmd_CMD_C_GAME_NOTICE_POSE_REQ    Rummy2_C_Cmd = 31  // 无意义
	Rummy2_C_Cmd_CMD_C_GAME_NOTICE_POSE_RESP   Rummy2_C_Cmd = 32  // 提示用户摆牌：MSG_C_COMMON_RESP
	Rummy2_C_Cmd_CMD_C_GAME_QUIT_SCORE_REQ     Rummy2_C_Cmd = 60  // 如果用户在游戏中退出，那么要扣多少分：MSG_C_COMMON_REQ
	Rummy2_C_Cmd_CMD_C_GAME_QUIT_SCORE_RESP    Rummy2_C_Cmd = 61  // 如果用户在游戏中退出，那么要扣多少分：MSG_C_GAME_QUIT_SCORE_RESP
	Rummy2_C_Cmd_CMD_C_CHAT_REQ                Rummy2_C_Cmd = 62  // 用户请求聊天：MSG_C_CHAT_REQ
	Rummy2_C_Cmd_CMD_C_CHAT_RESP               Rummy2_C_Cmd = 63  // 用户请求聊天回复：MSG_C_CHAT_RESP
	Rummy2_C_Cmd_CMD_C_MATCH_FINISH_REQ        Rummy2_C_Cmd = 100 // 无意义
	Rummy2_C_Cmd_CMD_C_MATCH_FINISH_RESP       Rummy2_C_Cmd = 101 // 桌子被解散：MSG_C_MATCH_FINISH_RESP
)

// Enum value maps for Rummy2_C_Cmd.
var (
	Rummy2_C_Cmd_name = map[int32]string{
		0:   "CMD_C_INVALID",
		1:   "CMD_C_GET_TABLE_STATUS_REQ",
		2:   "CMD_C_GET_TABLE_STATUS_RESP",
		3:   "CMD_C_MATCH_READY_REQ",
		4:   "CMD_C_MATCH_READY_RESP",
		5:   "CMD_C_GAME_READY_3_REQ",
		6:   "CMD_C_GAME_READY_3_RESP",
		7:   "CMD_C_GAME_READY_COMFIRM_REQ",
		8:   "CMD_C_GAME_READY_COMFIRM_RESP",
		9:   "CMD_C_GAME_DEALCARDS_REQ",
		10:  "CMD_C_GAME_DEALCARDS_RESP",
		11:  "CMD_C_GAME_CARDS_RESET_REQ",
		12:  "CMD_C_GAME_CARDS_RESET_RESP",
		13:  "CMD_C_GAME_NOTICE_REQ",
		14:  "CMD_C_GAME_NOTICE_RESP",
		15:  "CMD_C_GAME_USER_CHOICE_REQ",
		16:  "CMD_C_GAME_USER_CHOICE_RESP",
		17:  "CMD_C_GAME_USER_OUT_REQ",
		18:  "CMD_C_GAME_USER_OUT_RESP",
		19:  "CMD_C_GAME_AI_SCORE_REQ",
		20:  "CMD_C_GAME_AI_SCORE_RESP",
		21:  "CMD_C_GAME_DROP_REQ",
		22:  "CMD_C_GAME_DROP_RESP",
		23:  "CMD_C_GAME_SETTLE_REQ",
		24:  "CMD_C_GAME_SETTLE_RESP",
		25:  "CMD_C_GAME_CONTINUE_REQ",
		26:  "CMD_C_GAME_CONTINUE_RESP",
		27:  "CMD_C_GAME_WIN_REQ",
		28:  "CMD_C_GAME_WIN_RESP",
		29:  "CMD_C_GAME_POSE_REQ",
		30:  "CMD_C_GAME_POSE_RESP",
		31:  "CMD_C_GAME_NOTICE_POSE_REQ",
		32:  "CMD_C_GAME_NOTICE_POSE_RESP",
		60:  "CMD_C_GAME_QUIT_SCORE_REQ",
		61:  "CMD_C_GAME_QUIT_SCORE_RESP",
		62:  "CMD_C_CHAT_REQ",
		63:  "CMD_C_CHAT_RESP",
		100: "CMD_C_MATCH_FINISH_REQ",
		101: "CMD_C_MATCH_FINISH_RESP",
	}
	Rummy2_C_Cmd_value = map[string]int32{
		"CMD_C_INVALID":                 0,
		"CMD_C_GET_TABLE_STATUS_REQ":    1,
		"CMD_C_GET_TABLE_STATUS_RESP":   2,
		"CMD_C_MATCH_READY_REQ":         3,
		"CMD_C_MATCH_READY_RESP":        4,
		"CMD_C_GAME_READY_3_REQ":        5,
		"CMD_C_GAME_READY_3_RESP":       6,
		"CMD_C_GAME_READY_COMFIRM_REQ":  7,
		"CMD_C_GAME_READY_COMFIRM_RESP": 8,
		"CMD_C_GAME_DEALCARDS_REQ":      9,
		"CMD_C_GAME_DEALCARDS_RESP":     10,
		"CMD_C_GAME_CARDS_RESET_REQ":    11,
		"CMD_C_GAME_CARDS_RESET_RESP":   12,
		"CMD_C_GAME_NOTICE_REQ":         13,
		"CMD_C_GAME_NOTICE_RESP":        14,
		"CMD_C_GAME_USER_CHOICE_REQ":    15,
		"CMD_C_GAME_USER_CHOICE_RESP":   16,
		"CMD_C_GAME_USER_OUT_REQ":       17,
		"CMD_C_GAME_USER_OUT_RESP":      18,
		"CMD_C_GAME_AI_SCORE_REQ":       19,
		"CMD_C_GAME_AI_SCORE_RESP":      20,
		"CMD_C_GAME_DROP_REQ":           21,
		"CMD_C_GAME_DROP_RESP":          22,
		"CMD_C_GAME_SETTLE_REQ":         23,
		"CMD_C_GAME_SETTLE_RESP":        24,
		"CMD_C_GAME_CONTINUE_REQ":       25,
		"CMD_C_GAME_CONTINUE_RESP":      26,
		"CMD_C_GAME_WIN_REQ":            27,
		"CMD_C_GAME_WIN_RESP":           28,
		"CMD_C_GAME_POSE_REQ":           29,
		"CMD_C_GAME_POSE_RESP":          30,
		"CMD_C_GAME_NOTICE_POSE_REQ":    31,
		"CMD_C_GAME_NOTICE_POSE_RESP":   32,
		"CMD_C_GAME_QUIT_SCORE_REQ":     60,
		"CMD_C_GAME_QUIT_SCORE_RESP":    61,
		"CMD_C_CHAT_REQ":                62,
		"CMD_C_CHAT_RESP":               63,
		"CMD_C_MATCH_FINISH_REQ":        100,
		"CMD_C_MATCH_FINISH_RESP":       101,
	}
)

func (x Rummy2_C_Cmd) Enum() *Rummy2_C_Cmd {
	p := new(Rummy2_C_Cmd)
	*p = x
	return p
}

func (x Rummy2_C_Cmd) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Rummy2_C_Cmd) Descriptor() protoreflect.EnumDescriptor {
	return file_rummy_proto_enumTypes[0].Descriptor()
}

func (Rummy2_C_Cmd) Type() protoreflect.EnumType {
	return &file_rummy_proto_enumTypes[0]
}

func (x Rummy2_C_Cmd) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Rummy2_C_Cmd.Descriptor instead.
func (Rummy2_C_Cmd) EnumDescriptor() ([]byte, []int) {
	return file_rummy_proto_rawDescGZIP(), []int{0}
}

// 桌子的进度状态：
type GamePhase int32

const (
	GamePhase_PHS_INVALID         GamePhase = 0 // 无效值
	GamePhase_PHS_Match_Ready     GamePhase = 1 // 等待资源加载：服务器10秒等待，否则解散桌子
	GamePhase_PHS_Game_Ready      GamePhase = 2 // 等待用户确认：客户端3秒倒数，服务器5秒等待，否则解散桌子
	GamePhase_PHS_Game_DealCards  GamePhase = 3 // 发牌过程：固定3秒
	GamePhase_PHS_Game_ActionCard GamePhase = 4 // 用户选择摸牌
	GamePhase_PHS_Game_OutCard    GamePhase = 5 // 用户选择出牌（摸牌+出牌合计20秒，如果用户不操作，会在第19秒自动摸牌，第20秒自动出牌）
	GamePhase_PHS_Game_NextUser   GamePhase = 6 // 每次出牌后，留1秒给用户播放动画，之后循环到PHS_Game_ActionCard状态（或者跳出到结束状态）
	GamePhase_PHS_Game_Pose       GamePhase = 7 // 用户如果胡牌，其他用户要选择如果摆牌：10秒，如果用户是drop，则跳过此步骤，直接到结算
	GamePhase_PHS_Game_Settle     GamePhase = 8 // 结算，5秒
	GamePhase_PHS_Game_Continue   GamePhase = 9 // 用户确认继续阶段
)

// Enum value maps for GamePhase.
var (
	GamePhase_name = map[int32]string{
		0: "PHS_INVALID",
		1: "PHS_Match_Ready",
		2: "PHS_Game_Ready",
		3: "PHS_Game_DealCards",
		4: "PHS_Game_ActionCard",
		5: "PHS_Game_OutCard",
		6: "PHS_Game_NextUser",
		7: "PHS_Game_Pose",
		8: "PHS_Game_Settle",
		9: "PHS_Game_Continue",
	}
	GamePhase_value = map[string]int32{
		"PHS_INVALID":         0,
		"PHS_Match_Ready":     1,
		"PHS_Game_Ready":      2,
		"PHS_Game_DealCards":  3,
		"PHS_Game_ActionCard": 4,
		"PHS_Game_OutCard":    5,
		"PHS_Game_NextUser":   6,
		"PHS_Game_Pose":       7,
		"PHS_Game_Settle":     8,
		"PHS_Game_Continue":   9,
	}
)

func (x GamePhase) Enum() *GamePhase {
	p := new(GamePhase)
	*p = x
	return p
}

func (x GamePhase) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (GamePhase) Descriptor() protoreflect.EnumDescriptor {
	return file_rummy_proto_enumTypes[1].Descriptor()
}

func (GamePhase) Type() protoreflect.EnumType {
	return &file_rummy_proto_enumTypes[1]
}

func (x GamePhase) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use GamePhase.Descriptor instead.
func (GamePhase) EnumDescriptor() ([]byte, []int) {
	return file_rummy_proto_rawDescGZIP(), []int{1}
}

//**********************************rummy游戏服务端和服务端通信定义开始********************************
type Rummy2_S_Cmd int32

const (
	Rummy2_S_Cmd_CMD_S_INVALID          Rummy2_S_Cmd = 0
	Rummy2_S_Cmd_CMD_S_PING             Rummy2_S_Cmd = 1
	Rummy2_S_Cmd_CMD_S_PONG             Rummy2_S_Cmd = 2
	Rummy2_S_Cmd_CMD_S_MATCH_START_REQ  Rummy2_S_Cmd = 3 // 匹配成功通知rummy服务准备开始：GameStartRequest
	Rummy2_S_Cmd_CMD_S_MATCH_START_RESP Rummy2_S_Cmd = 4 // 匹配成功通知rummy服务准备开始返回：GameStartResponse
)

// Enum value maps for Rummy2_S_Cmd.
var (
	Rummy2_S_Cmd_name = map[int32]string{
		0: "CMD_S_INVALID",
		1: "CMD_S_PING",
		2: "CMD_S_PONG",
		3: "CMD_S_MATCH_START_REQ",
		4: "CMD_S_MATCH_START_RESP",
	}
	Rummy2_S_Cmd_value = map[string]int32{
		"CMD_S_INVALID":          0,
		"CMD_S_PING":             1,
		"CMD_S_PONG":             2,
		"CMD_S_MATCH_START_REQ":  3,
		"CMD_S_MATCH_START_RESP": 4,
	}
)

func (x Rummy2_S_Cmd) Enum() *Rummy2_S_Cmd {
	p := new(Rummy2_S_Cmd)
	*p = x
	return p
}

func (x Rummy2_S_Cmd) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Rummy2_S_Cmd) Descriptor() protoreflect.EnumDescriptor {
	return file_rummy_proto_enumTypes[2].Descriptor()
}

func (Rummy2_S_Cmd) Type() protoreflect.EnumType {
	return &file_rummy_proto_enumTypes[2]
}

func (x Rummy2_S_Cmd) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Rummy2_S_Cmd.Descriptor instead.
func (Rummy2_S_Cmd) EnumDescriptor() ([]byte, []int) {
	return file_rummy_proto_rawDescGZIP(), []int{2}
}

// 座位数据
type ChairStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BUser      uint32             `protobuf:"varint,1,opt,name=b_user,json=bUser,proto3" json:"b_user,omitempty"`                // 此座位是否有人：0：没有人；1：有人
	BGame      uint32             `protobuf:"varint,2,opt,name=b_game,json=bGame,proto3" json:"b_game,omitempty"`                // 此座位是否参与本局游戏：0：不参与；1：参与（不参与的情况可能是刚进入游戏，或者没有钱站起等等）
	BDrop      uint32             `protobuf:"varint,3,opt,name=b_drop,json=bDrop,proto3" json:"b_drop,omitempty"`                // 此座位用户是否drop了牌：0：正常在玩；1：自己主动drop；2：时间到了drop；3：诈胡
	ChairIndex uint32             `protobuf:"varint,4,opt,name=chair_index,json=chairIndex,proto3" json:"chair_index,omitempty"` // 座位号：0/1/2/3/4/5
	Cards      []uint32           `protobuf:"varint,5,rep,packed,name=cards,proto3" json:"cards,omitempty"`                      // 座位上的牌
	User       *platform.GameUser `protobuf:"bytes,6,opt,name=user,proto3" json:"user,omitempty"`                                // 座位上的用户
}

func (x *ChairStatus) Reset() {
	*x = ChairStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rummy_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChairStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChairStatus) ProtoMessage() {}

func (x *ChairStatus) ProtoReflect() protoreflect.Message {
	mi := &file_rummy_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChairStatus.ProtoReflect.Descriptor instead.
func (*ChairStatus) Descriptor() ([]byte, []int) {
	return file_rummy_proto_rawDescGZIP(), []int{0}
}

func (x *ChairStatus) GetBUser() uint32 {
	if x != nil {
		return x.BUser
	}
	return 0
}

func (x *ChairStatus) GetBGame() uint32 {
	if x != nil {
		return x.BGame
	}
	return 0
}

func (x *ChairStatus) GetBDrop() uint32 {
	if x != nil {
		return x.BDrop
	}
	return 0
}

func (x *ChairStatus) GetChairIndex() uint32 {
	if x != nil {
		return x.ChairIndex
	}
	return 0
}

func (x *ChairStatus) GetCards() []uint32 {
	if x != nil {
		return x.Cards
	}
	return nil
}

func (x *ChairStatus) GetUser() *platform.GameUser {
	if x != nil {
		return x.User
	}
	return nil
}

// 通用客户端请求
type MSG_C_COMMON_REQ struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TableId uint32 `protobuf:"varint,1,opt,name=table_id,json=tableId,proto3" json:"table_id,omitempty"`
}

func (x *MSG_C_COMMON_REQ) Reset() {
	*x = MSG_C_COMMON_REQ{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rummy_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MSG_C_COMMON_REQ) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MSG_C_COMMON_REQ) ProtoMessage() {}

func (x *MSG_C_COMMON_REQ) ProtoReflect() protoreflect.Message {
	mi := &file_rummy_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MSG_C_COMMON_REQ.ProtoReflect.Descriptor instead.
func (*MSG_C_COMMON_REQ) Descriptor() ([]byte, []int) {
	return file_rummy_proto_rawDescGZIP(), []int{1}
}

func (x *MSG_C_COMMON_REQ) GetTableId() uint32 {
	if x != nil {
		return x.TableId
	}
	return 0
}

// 通用服务端返回
type MSG_C_COMMON_RESP struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TableId uint32 `protobuf:"varint,1,opt,name=table_id,json=tableId,proto3" json:"table_id,omitempty"`
	Result  uint32 `protobuf:"varint,2,opt,name=result,proto3" json:"result,omitempty"` // 0：正常
}

func (x *MSG_C_COMMON_RESP) Reset() {
	*x = MSG_C_COMMON_RESP{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rummy_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MSG_C_COMMON_RESP) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MSG_C_COMMON_RESP) ProtoMessage() {}

func (x *MSG_C_COMMON_RESP) ProtoReflect() protoreflect.Message {
	mi := &file_rummy_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MSG_C_COMMON_RESP.ProtoReflect.Descriptor instead.
func (*MSG_C_COMMON_RESP) Descriptor() ([]byte, []int) {
	return file_rummy_proto_rawDescGZIP(), []int{2}
}

func (x *MSG_C_COMMON_RESP) GetTableId() uint32 {
	if x != nil {
		return x.TableId
	}
	return 0
}

func (x *MSG_C_COMMON_RESP) GetResult() uint32 {
	if x != nil {
		return x.Result
	}
	return 0
}

type MSG_C_GET_TABLE_STATUS_RESP struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TableId   uint32         `protobuf:"varint,1,opt,name=table_id,json=tableId,proto3" json:"table_id,omitempty"`
	GamePhase GamePhase      `protobuf:"varint,2,opt,name=game_phase,json=gamePhase,proto3,enum=com.cw.chess.rummy.GamePhase" json:"game_phase,omitempty"` // 游戏进度状态
	Charis    []*ChairStatus `protobuf:"bytes,3,rep,name=charis,proto3" json:"charis,omitempty"`                                                           // 座位
	SelfIndex uint32         `protobuf:"varint,4,opt,name=self_index,json=selfIndex,proto3" json:"self_index,omitempty"`                                   // 自己的座位
}

func (x *MSG_C_GET_TABLE_STATUS_RESP) Reset() {
	*x = MSG_C_GET_TABLE_STATUS_RESP{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rummy_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MSG_C_GET_TABLE_STATUS_RESP) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MSG_C_GET_TABLE_STATUS_RESP) ProtoMessage() {}

func (x *MSG_C_GET_TABLE_STATUS_RESP) ProtoReflect() protoreflect.Message {
	mi := &file_rummy_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MSG_C_GET_TABLE_STATUS_RESP.ProtoReflect.Descriptor instead.
func (*MSG_C_GET_TABLE_STATUS_RESP) Descriptor() ([]byte, []int) {
	return file_rummy_proto_rawDescGZIP(), []int{3}
}

func (x *MSG_C_GET_TABLE_STATUS_RESP) GetTableId() uint32 {
	if x != nil {
		return x.TableId
	}
	return 0
}

func (x *MSG_C_GET_TABLE_STATUS_RESP) GetGamePhase() GamePhase {
	if x != nil {
		return x.GamePhase
	}
	return GamePhase_PHS_INVALID
}

func (x *MSG_C_GET_TABLE_STATUS_RESP) GetCharis() []*ChairStatus {
	if x != nil {
		return x.Charis
	}
	return nil
}

func (x *MSG_C_GET_TABLE_STATUS_RESP) GetSelfIndex() uint32 {
	if x != nil {
		return x.SelfIndex
	}
	return 0
}

type MSG_C_GAME_READY_3_RESP struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TableId uint32 `protobuf:"varint,1,opt,name=table_id,json=tableId,proto3" json:"table_id,omitempty"`
	Times   uint32 `protobuf:"varint,2,opt,name=times,proto3" json:"times,omitempty"`
}

func (x *MSG_C_GAME_READY_3_RESP) Reset() {
	*x = MSG_C_GAME_READY_3_RESP{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rummy_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MSG_C_GAME_READY_3_RESP) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MSG_C_GAME_READY_3_RESP) ProtoMessage() {}

func (x *MSG_C_GAME_READY_3_RESP) ProtoReflect() protoreflect.Message {
	mi := &file_rummy_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MSG_C_GAME_READY_3_RESP.ProtoReflect.Descriptor instead.
func (*MSG_C_GAME_READY_3_RESP) Descriptor() ([]byte, []int) {
	return file_rummy_proto_rawDescGZIP(), []int{4}
}

func (x *MSG_C_GAME_READY_3_RESP) GetTableId() uint32 {
	if x != nil {
		return x.TableId
	}
	return 0
}

func (x *MSG_C_GAME_READY_3_RESP) GetTimes() uint32 {
	if x != nil {
		return x.Times
	}
	return 0
}

// 通知游戏开始
type MSG_C_GAME_DEALCARDS_RESP struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TableId   uint32         `protobuf:"varint,1,opt,name=table_id,json=tableId,proto3" json:"table_id,omitempty"`
	GameID    string         `protobuf:"bytes,2,opt,name=gameID,proto3" json:"gameID,omitempty"`                         // 本局牌局ID
	Charis    []*ChairStatus `protobuf:"bytes,3,rep,name=charis,proto3" json:"charis,omitempty"`                         // 座位上参与的人数，如果是2人局，则会有2个数据，如果是6人局，有6个数据
	Dealer    uint32         `protobuf:"varint,4,opt,name=dealer,proto3" json:"dealer,omitempty"`                        // 本局dealer（庄家）
	WildJoker uint32         `protobuf:"varint,5,opt,name=wild_joker,json=wildJoker,proto3" json:"wild_joker,omitempty"` // 本局的joker牌
	Cards     uint32         `protobuf:"varint,6,opt,name=cards,proto3" json:"cards,omitempty"`                          // 现在牌库里还有多少张牌
	CardsDis  uint32         `protobuf:"varint,7,opt,name=cards_dis,json=cardsDis,proto3" json:"cards_dis,omitempty"`    // 现在出牌库里有多少张牌（需要判定是否>0）
	OpenDeck  uint32         `protobuf:"varint,8,opt,name=OpenDeck,proto3" json:"OpenDeck,omitempty"`                    // 最上面一张牌（需要判定是否>0）
}

func (x *MSG_C_GAME_DEALCARDS_RESP) Reset() {
	*x = MSG_C_GAME_DEALCARDS_RESP{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rummy_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MSG_C_GAME_DEALCARDS_RESP) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MSG_C_GAME_DEALCARDS_RESP) ProtoMessage() {}

func (x *MSG_C_GAME_DEALCARDS_RESP) ProtoReflect() protoreflect.Message {
	mi := &file_rummy_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MSG_C_GAME_DEALCARDS_RESP.ProtoReflect.Descriptor instead.
func (*MSG_C_GAME_DEALCARDS_RESP) Descriptor() ([]byte, []int) {
	return file_rummy_proto_rawDescGZIP(), []int{5}
}

func (x *MSG_C_GAME_DEALCARDS_RESP) GetTableId() uint32 {
	if x != nil {
		return x.TableId
	}
	return 0
}

func (x *MSG_C_GAME_DEALCARDS_RESP) GetGameID() string {
	if x != nil {
		return x.GameID
	}
	return ""
}

func (x *MSG_C_GAME_DEALCARDS_RESP) GetCharis() []*ChairStatus {
	if x != nil {
		return x.Charis
	}
	return nil
}

func (x *MSG_C_GAME_DEALCARDS_RESP) GetDealer() uint32 {
	if x != nil {
		return x.Dealer
	}
	return 0
}

func (x *MSG_C_GAME_DEALCARDS_RESP) GetWildJoker() uint32 {
	if x != nil {
		return x.WildJoker
	}
	return 0
}

func (x *MSG_C_GAME_DEALCARDS_RESP) GetCards() uint32 {
	if x != nil {
		return x.Cards
	}
	return 0
}

func (x *MSG_C_GAME_DEALCARDS_RESP) GetCardsDis() uint32 {
	if x != nil {
		return x.CardsDis
	}
	return 0
}

func (x *MSG_C_GAME_DEALCARDS_RESP) GetOpenDeck() uint32 {
	if x != nil {
		return x.OpenDeck
	}
	return 0
}

// 通知客户端牌库重置了
type MSG_C_GAME_CARDS_RESET_RESP struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TableId    uint32 `protobuf:"varint,1,opt,name=table_id,json=tableId,proto3" json:"table_id,omitempty"`
	ClosedSize uint32 `protobuf:"varint,2,opt,name=closed_size,json=closedSize,proto3" json:"closed_size,omitempty"`
	OpenSize   uint32 `protobuf:"varint,3,opt,name=open_size,json=openSize,proto3" json:"open_size,omitempty"`
}

func (x *MSG_C_GAME_CARDS_RESET_RESP) Reset() {
	*x = MSG_C_GAME_CARDS_RESET_RESP{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rummy_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MSG_C_GAME_CARDS_RESET_RESP) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MSG_C_GAME_CARDS_RESET_RESP) ProtoMessage() {}

func (x *MSG_C_GAME_CARDS_RESET_RESP) ProtoReflect() protoreflect.Message {
	mi := &file_rummy_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MSG_C_GAME_CARDS_RESET_RESP.ProtoReflect.Descriptor instead.
func (*MSG_C_GAME_CARDS_RESET_RESP) Descriptor() ([]byte, []int) {
	return file_rummy_proto_rawDescGZIP(), []int{6}
}

func (x *MSG_C_GAME_CARDS_RESET_RESP) GetTableId() uint32 {
	if x != nil {
		return x.TableId
	}
	return 0
}

func (x *MSG_C_GAME_CARDS_RESET_RESP) GetClosedSize() uint32 {
	if x != nil {
		return x.ClosedSize
	}
	return 0
}

func (x *MSG_C_GAME_CARDS_RESET_RESP) GetOpenSize() uint32 {
	if x != nil {
		return x.OpenSize
	}
	return 0
}

// 提示用户摸牌
type MSG_C_GAME_NOTICE_RESP struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TableId      uint32 `protobuf:"varint,1,opt,name=table_id,json=tableId,proto3" json:"table_id,omitempty"`
	ChairIndex   uint32 `protobuf:"varint,2,opt,name=chair_index,json=chairIndex,proto3" json:"chair_index,omitempty"`       // 座位编号
	BSelf        uint32 `protobuf:"varint,3,opt,name=b_self,json=bSelf,proto3" json:"b_self,omitempty"`                      // 是否是本人  0不是  1是
	BOpen        uint32 `protobuf:"varint,4,opt,name=b_open,json=bOpen,proto3" json:"b_open,omitempty"`                      // 是否可以摸open牌 0不可以，1可以（closed牌是必定可以摸的）
	OpenCount    uint32 `protobuf:"varint,5,opt,name=open_count,json=openCount,proto3" json:"open_count,omitempty"`          // open牌的数量
	CloseCount   uint32 `protobuf:"varint,6,opt,name=close_count,json=closeCount,proto3" json:"close_count,omitempty"`       // close牌的数量
	OperatorTime uint32 `protobuf:"varint,7,opt,name=operator_time,json=operatorTime,proto3" json:"operator_time,omitempty"` // 默认20秒
}

func (x *MSG_C_GAME_NOTICE_RESP) Reset() {
	*x = MSG_C_GAME_NOTICE_RESP{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rummy_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MSG_C_GAME_NOTICE_RESP) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MSG_C_GAME_NOTICE_RESP) ProtoMessage() {}

func (x *MSG_C_GAME_NOTICE_RESP) ProtoReflect() protoreflect.Message {
	mi := &file_rummy_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MSG_C_GAME_NOTICE_RESP.ProtoReflect.Descriptor instead.
func (*MSG_C_GAME_NOTICE_RESP) Descriptor() ([]byte, []int) {
	return file_rummy_proto_rawDescGZIP(), []int{7}
}

func (x *MSG_C_GAME_NOTICE_RESP) GetTableId() uint32 {
	if x != nil {
		return x.TableId
	}
	return 0
}

func (x *MSG_C_GAME_NOTICE_RESP) GetChairIndex() uint32 {
	if x != nil {
		return x.ChairIndex
	}
	return 0
}

func (x *MSG_C_GAME_NOTICE_RESP) GetBSelf() uint32 {
	if x != nil {
		return x.BSelf
	}
	return 0
}

func (x *MSG_C_GAME_NOTICE_RESP) GetBOpen() uint32 {
	if x != nil {
		return x.BOpen
	}
	return 0
}

func (x *MSG_C_GAME_NOTICE_RESP) GetOpenCount() uint32 {
	if x != nil {
		return x.OpenCount
	}
	return 0
}

func (x *MSG_C_GAME_NOTICE_RESP) GetCloseCount() uint32 {
	if x != nil {
		return x.CloseCount
	}
	return 0
}

func (x *MSG_C_GAME_NOTICE_RESP) GetOperatorTime() uint32 {
	if x != nil {
		return x.OperatorTime
	}
	return 0
}

// 用户摸牌
type MSG_C_GAME_USER_CHOICE_REQ struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TableId     uint32 `protobuf:"varint,1,opt,name=table_id,json=tableId,proto3" json:"table_id,omitempty"`
	Openorclose uint32 `protobuf:"varint,2,opt,name=openorclose,proto3" json:"openorclose,omitempty"` // 0：摸open牌；1：摸close牌
}

func (x *MSG_C_GAME_USER_CHOICE_REQ) Reset() {
	*x = MSG_C_GAME_USER_CHOICE_REQ{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rummy_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MSG_C_GAME_USER_CHOICE_REQ) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MSG_C_GAME_USER_CHOICE_REQ) ProtoMessage() {}

func (x *MSG_C_GAME_USER_CHOICE_REQ) ProtoReflect() protoreflect.Message {
	mi := &file_rummy_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MSG_C_GAME_USER_CHOICE_REQ.ProtoReflect.Descriptor instead.
func (*MSG_C_GAME_USER_CHOICE_REQ) Descriptor() ([]byte, []int) {
	return file_rummy_proto_rawDescGZIP(), []int{8}
}

func (x *MSG_C_GAME_USER_CHOICE_REQ) GetTableId() uint32 {
	if x != nil {
		return x.TableId
	}
	return 0
}

func (x *MSG_C_GAME_USER_CHOICE_REQ) GetOpenorclose() uint32 {
	if x != nil {
		return x.Openorclose
	}
	return 0
}

// 一个group的牌结构，后续会用
type PokerGroup struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Pokers []uint32 `protobuf:"varint,1,rep,packed,name=pokers,proto3" json:"pokers,omitempty"` // 一个group组合
	Legal  uint32   `protobuf:"varint,2,opt,name=legal,proto3" json:"legal,omitempty"`          // 0：不合法；1：合法（pure sequence）2：合法（sequence）；3：合法（set）
	Type   uint32   `protobuf:"varint,3,opt,name=type,proto3" json:"type,omitempty"`            // 0：无意义；1：1st life；2：2nd life；3：set
}

func (x *PokerGroup) Reset() {
	*x = PokerGroup{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rummy_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PokerGroup) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PokerGroup) ProtoMessage() {}

func (x *PokerGroup) ProtoReflect() protoreflect.Message {
	mi := &file_rummy_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PokerGroup.ProtoReflect.Descriptor instead.
func (*PokerGroup) Descriptor() ([]byte, []int) {
	return file_rummy_proto_rawDescGZIP(), []int{9}
}

func (x *PokerGroup) GetPokers() []uint32 {
	if x != nil {
		return x.Pokers
	}
	return nil
}

func (x *PokerGroup) GetLegal() uint32 {
	if x != nil {
		return x.Legal
	}
	return 0
}

func (x *PokerGroup) GetType() uint32 {
	if x != nil {
		return x.Type
	}
	return 0
}

// 用户请求返回，这个结构会广播给所有用户
type MSG_C_GAME_USER_CHOICE_RESP struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TableId     uint32        `protobuf:"varint,1,opt,name=table_id,json=tableId,proto3" json:"table_id,omitempty"`
	Result      uint32        `protobuf:"varint,2,opt,name=result,proto3" json:"result,omitempty"`                             // 0：成功；1：禁止：例如不能摸open牌的时候
	ChairIndex  uint32        `protobuf:"varint,3,opt,name=chair_index,json=chairIndex,proto3" json:"chair_index,omitempty"`   // 座位编号
	BSelf       uint32        `protobuf:"varint,4,opt,name=b_self,json=bSelf,proto3" json:"b_self,omitempty"`                  // 是否是本人：0：不是，1：是
	Card        uint32        `protobuf:"varint,5,opt,name=card,proto3" json:"card,omitempty"`                                 // 摸了张什么牌，注意这个值只有是本人的时候，才会有意义
	PreOpen     uint32        `protobuf:"varint,6,opt,name=pre_open,json=preOpen,proto3" json:"pre_open,omitempty"`            // 如果用户摸走了open牌，这里要显示给用户看open牌的底下一张open牌是什么，如果是0，表示没有了
	Openorclose uint32        `protobuf:"varint,7,opt,name=openorclose,proto3" json:"openorclose,omitempty"`                   // 0：摸open牌；1：摸close牌
	OneKey      uint32        `protobuf:"varint,8,opt,name=one_key,json=oneKey,proto3" json:"one_key,omitempty"`               // 一键胡牌，0：表示不胡；1：表示胡牌
	OutCardWin  uint32        `protobuf:"varint,9,opt,name=out_card_win,json=outCardWin,proto3" json:"out_card_win,omitempty"` // 一键胡牌为1的时候，建议出的牌
	UserGroups  []*PokerGroup `protobuf:"bytes,10,rep,name=userGroups,proto3" json:"userGroups,omitempty"`                     // 一键胡牌建议组合
}

func (x *MSG_C_GAME_USER_CHOICE_RESP) Reset() {
	*x = MSG_C_GAME_USER_CHOICE_RESP{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rummy_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MSG_C_GAME_USER_CHOICE_RESP) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MSG_C_GAME_USER_CHOICE_RESP) ProtoMessage() {}

func (x *MSG_C_GAME_USER_CHOICE_RESP) ProtoReflect() protoreflect.Message {
	mi := &file_rummy_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MSG_C_GAME_USER_CHOICE_RESP.ProtoReflect.Descriptor instead.
func (*MSG_C_GAME_USER_CHOICE_RESP) Descriptor() ([]byte, []int) {
	return file_rummy_proto_rawDescGZIP(), []int{10}
}

func (x *MSG_C_GAME_USER_CHOICE_RESP) GetTableId() uint32 {
	if x != nil {
		return x.TableId
	}
	return 0
}

func (x *MSG_C_GAME_USER_CHOICE_RESP) GetResult() uint32 {
	if x != nil {
		return x.Result
	}
	return 0
}

func (x *MSG_C_GAME_USER_CHOICE_RESP) GetChairIndex() uint32 {
	if x != nil {
		return x.ChairIndex
	}
	return 0
}

func (x *MSG_C_GAME_USER_CHOICE_RESP) GetBSelf() uint32 {
	if x != nil {
		return x.BSelf
	}
	return 0
}

func (x *MSG_C_GAME_USER_CHOICE_RESP) GetCard() uint32 {
	if x != nil {
		return x.Card
	}
	return 0
}

func (x *MSG_C_GAME_USER_CHOICE_RESP) GetPreOpen() uint32 {
	if x != nil {
		return x.PreOpen
	}
	return 0
}

func (x *MSG_C_GAME_USER_CHOICE_RESP) GetOpenorclose() uint32 {
	if x != nil {
		return x.Openorclose
	}
	return 0
}

func (x *MSG_C_GAME_USER_CHOICE_RESP) GetOneKey() uint32 {
	if x != nil {
		return x.OneKey
	}
	return 0
}

func (x *MSG_C_GAME_USER_CHOICE_RESP) GetOutCardWin() uint32 {
	if x != nil {
		return x.OutCardWin
	}
	return 0
}

func (x *MSG_C_GAME_USER_CHOICE_RESP) GetUserGroups() []*PokerGroup {
	if x != nil {
		return x.UserGroups
	}
	return nil
}

// 用户请求出牌
type MSG_C_GAME_USER_OUT_REQ struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TableId uint32 `protobuf:"varint,1,opt,name=table_id,json=tableId,proto3" json:"table_id,omitempty"`
	OutCard uint32 `protobuf:"varint,2,opt,name=out_card,json=outCard,proto3" json:"out_card,omitempty"` // 要出的牌
}

func (x *MSG_C_GAME_USER_OUT_REQ) Reset() {
	*x = MSG_C_GAME_USER_OUT_REQ{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rummy_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MSG_C_GAME_USER_OUT_REQ) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MSG_C_GAME_USER_OUT_REQ) ProtoMessage() {}

func (x *MSG_C_GAME_USER_OUT_REQ) ProtoReflect() protoreflect.Message {
	mi := &file_rummy_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MSG_C_GAME_USER_OUT_REQ.ProtoReflect.Descriptor instead.
func (*MSG_C_GAME_USER_OUT_REQ) Descriptor() ([]byte, []int) {
	return file_rummy_proto_rawDescGZIP(), []int{11}
}

func (x *MSG_C_GAME_USER_OUT_REQ) GetTableId() uint32 {
	if x != nil {
		return x.TableId
	}
	return 0
}

func (x *MSG_C_GAME_USER_OUT_REQ) GetOutCard() uint32 {
	if x != nil {
		return x.OutCard
	}
	return 0
}

// 用户出牌返回，这个会广播
type MSG_C_GAME_USER_OUT_RESP struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TableId    uint32        `protobuf:"varint,1,opt,name=table_id,json=tableId,proto3" json:"table_id,omitempty"`
	Result     uint32        `protobuf:"varint,2,opt,name=result,proto3" json:"result,omitempty"`                           // 0：成功：其他值：失败
	ChairIndex uint32        `protobuf:"varint,3,opt,name=chair_index,json=chairIndex,proto3" json:"chair_index,omitempty"` // 座位编号
	BSelf      uint32        `protobuf:"varint,4,opt,name=b_self,json=bSelf,proto3" json:"b_self,omitempty"`                // 是否是本人：0：不是，1：是
	OutCard    uint32        `protobuf:"varint,5,opt,name=out_card,json=outCard,proto3" json:"out_card,omitempty"`          // 用户打出的牌
	UserGroups []*PokerGroup `protobuf:"bytes,6,rep,name=userGroups,proto3" json:"userGroups,omitempty"`                    // 这个是说明机器人是怎么摆牌的，只有是机器人才会有这个字段
}

func (x *MSG_C_GAME_USER_OUT_RESP) Reset() {
	*x = MSG_C_GAME_USER_OUT_RESP{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rummy_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MSG_C_GAME_USER_OUT_RESP) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MSG_C_GAME_USER_OUT_RESP) ProtoMessage() {}

func (x *MSG_C_GAME_USER_OUT_RESP) ProtoReflect() protoreflect.Message {
	mi := &file_rummy_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MSG_C_GAME_USER_OUT_RESP.ProtoReflect.Descriptor instead.
func (*MSG_C_GAME_USER_OUT_RESP) Descriptor() ([]byte, []int) {
	return file_rummy_proto_rawDescGZIP(), []int{12}
}

func (x *MSG_C_GAME_USER_OUT_RESP) GetTableId() uint32 {
	if x != nil {
		return x.TableId
	}
	return 0
}

func (x *MSG_C_GAME_USER_OUT_RESP) GetResult() uint32 {
	if x != nil {
		return x.Result
	}
	return 0
}

func (x *MSG_C_GAME_USER_OUT_RESP) GetChairIndex() uint32 {
	if x != nil {
		return x.ChairIndex
	}
	return 0
}

func (x *MSG_C_GAME_USER_OUT_RESP) GetBSelf() uint32 {
	if x != nil {
		return x.BSelf
	}
	return 0
}

func (x *MSG_C_GAME_USER_OUT_RESP) GetOutCard() uint32 {
	if x != nil {
		return x.OutCard
	}
	return 0
}

func (x *MSG_C_GAME_USER_OUT_RESP) GetUserGroups() []*PokerGroup {
	if x != nil {
		return x.UserGroups
	}
	return nil
}

// 算分并分组返回
type MSG_C_GAME_AI_SCORE_RESP struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TableId    uint32        `protobuf:"varint,1,opt,name=table_id,json=tableId,proto3" json:"table_id,omitempty"`
	Result     uint32        `protobuf:"varint,2,opt,name=result,proto3" json:"result,omitempty"`
	Score      uint32        `protobuf:"varint,3,opt,name=score,proto3" json:"score,omitempty"`
	UserGroups []*PokerGroup `protobuf:"bytes,4,rep,name=userGroups,proto3" json:"userGroups,omitempty"`
}

func (x *MSG_C_GAME_AI_SCORE_RESP) Reset() {
	*x = MSG_C_GAME_AI_SCORE_RESP{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rummy_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MSG_C_GAME_AI_SCORE_RESP) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MSG_C_GAME_AI_SCORE_RESP) ProtoMessage() {}

func (x *MSG_C_GAME_AI_SCORE_RESP) ProtoReflect() protoreflect.Message {
	mi := &file_rummy_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MSG_C_GAME_AI_SCORE_RESP.ProtoReflect.Descriptor instead.
func (*MSG_C_GAME_AI_SCORE_RESP) Descriptor() ([]byte, []int) {
	return file_rummy_proto_rawDescGZIP(), []int{13}
}

func (x *MSG_C_GAME_AI_SCORE_RESP) GetTableId() uint32 {
	if x != nil {
		return x.TableId
	}
	return 0
}

func (x *MSG_C_GAME_AI_SCORE_RESP) GetResult() uint32 {
	if x != nil {
		return x.Result
	}
	return 0
}

func (x *MSG_C_GAME_AI_SCORE_RESP) GetScore() uint32 {
	if x != nil {
		return x.Score
	}
	return 0
}

func (x *MSG_C_GAME_AI_SCORE_RESP) GetUserGroups() []*PokerGroup {
	if x != nil {
		return x.UserGroups
	}
	return nil
}

// 弃牌（弃牌是不会给其他人看的）
type MSG_C_GAME_DROP_RESP struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TableId    uint32 `protobuf:"varint,1,opt,name=table_id,json=tableId,proto3" json:"table_id,omitempty"`
	Result     uint32 `protobuf:"varint,2,opt,name=result,proto3" json:"result,omitempty"`
	Score      uint32 `protobuf:"varint,3,opt,name=score,proto3" json:"score,omitempty"`
	BSelf      uint32 `protobuf:"varint,4,opt,name=b_self,json=bSelf,proto3" json:"b_self,omitempty"`                // 是否是本人：0：不是，1：是
	ChairIndex uint32 `protobuf:"varint,5,opt,name=chair_index,json=chairIndex,proto3" json:"chair_index,omitempty"` // 棋牌的座位
}

func (x *MSG_C_GAME_DROP_RESP) Reset() {
	*x = MSG_C_GAME_DROP_RESP{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rummy_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MSG_C_GAME_DROP_RESP) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MSG_C_GAME_DROP_RESP) ProtoMessage() {}

func (x *MSG_C_GAME_DROP_RESP) ProtoReflect() protoreflect.Message {
	mi := &file_rummy_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MSG_C_GAME_DROP_RESP.ProtoReflect.Descriptor instead.
func (*MSG_C_GAME_DROP_RESP) Descriptor() ([]byte, []int) {
	return file_rummy_proto_rawDescGZIP(), []int{14}
}

func (x *MSG_C_GAME_DROP_RESP) GetTableId() uint32 {
	if x != nil {
		return x.TableId
	}
	return 0
}

func (x *MSG_C_GAME_DROP_RESP) GetResult() uint32 {
	if x != nil {
		return x.Result
	}
	return 0
}

func (x *MSG_C_GAME_DROP_RESP) GetScore() uint32 {
	if x != nil {
		return x.Score
	}
	return 0
}

func (x *MSG_C_GAME_DROP_RESP) GetBSelf() uint32 {
	if x != nil {
		return x.BSelf
	}
	return 0
}

func (x *MSG_C_GAME_DROP_RESP) GetChairIndex() uint32 {
	if x != nil {
		return x.ChairIndex
	}
	return 0
}

// 结算中单个用户的数据
type UserSettle struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChairIndex uint32        `protobuf:"varint,1,opt,name=chair_index,json=chairIndex,proto3" json:"chair_index,omitempty"` // 座位编号
	Drop       uint32        `protobuf:"varint,2,opt,name=drop,proto3" json:"drop,omitempty"`                               // 用户是否drop，0：正常在玩；1：自己主动drop；2：时间到了drop；3：诈胡
	UserGroups []*PokerGroup `protobuf:"bytes,3,rep,name=user_groups,json=userGroups,proto3" json:"user_groups,omitempty"`  // 用户的牌型
	Score      uint32        `protobuf:"varint,4,opt,name=score,proto3" json:"score,omitempty"`                             // 用户得分（大于等于0）
	Coin       int32         `protobuf:"varint,5,opt,name=coin,proto3" json:"coin,omitempty"`                               // 用户的金币获得（有正有负）
}

func (x *UserSettle) Reset() {
	*x = UserSettle{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rummy_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserSettle) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserSettle) ProtoMessage() {}

func (x *UserSettle) ProtoReflect() protoreflect.Message {
	mi := &file_rummy_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserSettle.ProtoReflect.Descriptor instead.
func (*UserSettle) Descriptor() ([]byte, []int) {
	return file_rummy_proto_rawDescGZIP(), []int{15}
}

func (x *UserSettle) GetChairIndex() uint32 {
	if x != nil {
		return x.ChairIndex
	}
	return 0
}

func (x *UserSettle) GetDrop() uint32 {
	if x != nil {
		return x.Drop
	}
	return 0
}

func (x *UserSettle) GetUserGroups() []*PokerGroup {
	if x != nil {
		return x.UserGroups
	}
	return nil
}

func (x *UserSettle) GetScore() uint32 {
	if x != nil {
		return x.Score
	}
	return 0
}

func (x *UserSettle) GetCoin() int32 {
	if x != nil {
		return x.Coin
	}
	return 0
}

// 结算中单个用户的数据
type MSG_C_GAME_SETTLE_RESP struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TableId     uint32        `protobuf:"varint,1,opt,name=table_id,json=tableId,proto3" json:"table_id,omitempty"`
	UserSettle  []*UserSettle `protobuf:"bytes,2,rep,name=user_settle,json=userSettle,proto3" json:"user_settle,omitempty"`
	WinnerIndex uint32        `protobuf:"varint,3,opt,name=winner_index,json=winnerIndex,proto3" json:"winner_index,omitempty"`
}

func (x *MSG_C_GAME_SETTLE_RESP) Reset() {
	*x = MSG_C_GAME_SETTLE_RESP{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rummy_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MSG_C_GAME_SETTLE_RESP) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MSG_C_GAME_SETTLE_RESP) ProtoMessage() {}

func (x *MSG_C_GAME_SETTLE_RESP) ProtoReflect() protoreflect.Message {
	mi := &file_rummy_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MSG_C_GAME_SETTLE_RESP.ProtoReflect.Descriptor instead.
func (*MSG_C_GAME_SETTLE_RESP) Descriptor() ([]byte, []int) {
	return file_rummy_proto_rawDescGZIP(), []int{16}
}

func (x *MSG_C_GAME_SETTLE_RESP) GetTableId() uint32 {
	if x != nil {
		return x.TableId
	}
	return 0
}

func (x *MSG_C_GAME_SETTLE_RESP) GetUserSettle() []*UserSettle {
	if x != nil {
		return x.UserSettle
	}
	return nil
}

func (x *MSG_C_GAME_SETTLE_RESP) GetWinnerIndex() uint32 {
	if x != nil {
		return x.WinnerIndex
	}
	return 0
}

// 用户请求继续
type MSG_C_GAME_CONTINUE_REQ struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TableId  uint32 `protobuf:"varint,1,opt,name=table_id,json=tableId,proto3" json:"table_id,omitempty"`
	Continue uint32 `protobuf:"varint,2,opt,name=continue,proto3" json:"continue,omitempty"` // 0：继续；1：直接退出；2：重新返回匹配队列(注：2不能用，重新匹配走平台协议)
}

func (x *MSG_C_GAME_CONTINUE_REQ) Reset() {
	*x = MSG_C_GAME_CONTINUE_REQ{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rummy_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MSG_C_GAME_CONTINUE_REQ) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MSG_C_GAME_CONTINUE_REQ) ProtoMessage() {}

func (x *MSG_C_GAME_CONTINUE_REQ) ProtoReflect() protoreflect.Message {
	mi := &file_rummy_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MSG_C_GAME_CONTINUE_REQ.ProtoReflect.Descriptor instead.
func (*MSG_C_GAME_CONTINUE_REQ) Descriptor() ([]byte, []int) {
	return file_rummy_proto_rawDescGZIP(), []int{17}
}

func (x *MSG_C_GAME_CONTINUE_REQ) GetTableId() uint32 {
	if x != nil {
		return x.TableId
	}
	return 0
}

func (x *MSG_C_GAME_CONTINUE_REQ) GetContinue() uint32 {
	if x != nil {
		return x.Continue
	}
	return 0
}

// 用户请求继续
type MSG_C_GAME_CONTINUE_RESP struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TableId uint32 `protobuf:"varint,1,opt,name=table_id,json=tableId,proto3" json:"table_id,omitempty"`
	Result  uint32 `protobuf:"varint,2,opt,name=result,proto3" json:"result,omitempty"` // 0：成功；1：资金不够
}

func (x *MSG_C_GAME_CONTINUE_RESP) Reset() {
	*x = MSG_C_GAME_CONTINUE_RESP{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rummy_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MSG_C_GAME_CONTINUE_RESP) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MSG_C_GAME_CONTINUE_RESP) ProtoMessage() {}

func (x *MSG_C_GAME_CONTINUE_RESP) ProtoReflect() protoreflect.Message {
	mi := &file_rummy_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MSG_C_GAME_CONTINUE_RESP.ProtoReflect.Descriptor instead.
func (*MSG_C_GAME_CONTINUE_RESP) Descriptor() ([]byte, []int) {
	return file_rummy_proto_rawDescGZIP(), []int{18}
}

func (x *MSG_C_GAME_CONTINUE_RESP) GetTableId() uint32 {
	if x != nil {
		return x.TableId
	}
	return 0
}

func (x *MSG_C_GAME_CONTINUE_RESP) GetResult() uint32 {
	if x != nil {
		return x.Result
	}
	return 0
}

// 用户请求胡牌
type MSG_C_GAME_WIN_REQ struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TableId    uint32        `protobuf:"varint,1,opt,name=table_id,json=tableId,proto3" json:"table_id,omitempty"`
	UserGroups []*PokerGroup `protobuf:"bytes,2,rep,name=userGroups,proto3" json:"userGroups,omitempty"` // 用户组成的所有group
	OutPoker   uint32        `protobuf:"varint,3,opt,name=outPoker,proto3" json:"outPoker,omitempty"`    // 要出的牌
}

func (x *MSG_C_GAME_WIN_REQ) Reset() {
	*x = MSG_C_GAME_WIN_REQ{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rummy_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MSG_C_GAME_WIN_REQ) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MSG_C_GAME_WIN_REQ) ProtoMessage() {}

func (x *MSG_C_GAME_WIN_REQ) ProtoReflect() protoreflect.Message {
	mi := &file_rummy_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MSG_C_GAME_WIN_REQ.ProtoReflect.Descriptor instead.
func (*MSG_C_GAME_WIN_REQ) Descriptor() ([]byte, []int) {
	return file_rummy_proto_rawDescGZIP(), []int{19}
}

func (x *MSG_C_GAME_WIN_REQ) GetTableId() uint32 {
	if x != nil {
		return x.TableId
	}
	return 0
}

func (x *MSG_C_GAME_WIN_REQ) GetUserGroups() []*PokerGroup {
	if x != nil {
		return x.UserGroups
	}
	return nil
}

func (x *MSG_C_GAME_WIN_REQ) GetOutPoker() uint32 {
	if x != nil {
		return x.OutPoker
	}
	return 0
}

// 用户请求胡牌广播
type MSG_C_GAME_WIN_RESP struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TableId    uint32        `protobuf:"varint,1,opt,name=table_id,json=tableId,proto3" json:"table_id,omitempty"`
	ChairIndex uint32        `protobuf:"varint,2,opt,name=chair_index,json=chairIndex,proto3" json:"chair_index,omitempty"` // 座位编号
	UserGroups []*PokerGroup `protobuf:"bytes,3,rep,name=userGroups,proto3" json:"userGroups,omitempty"`                    // 用户组成的所有group
	OutCard    uint32        `protobuf:"varint,4,opt,name=out_card,json=outCard,proto3" json:"out_card,omitempty"`          // 要出的牌
	Score      uint32        `protobuf:"varint,5,opt,name=score,proto3" json:"score,omitempty"`                             // 分数，如果是0，表示胜利
}

func (x *MSG_C_GAME_WIN_RESP) Reset() {
	*x = MSG_C_GAME_WIN_RESP{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rummy_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MSG_C_GAME_WIN_RESP) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MSG_C_GAME_WIN_RESP) ProtoMessage() {}

func (x *MSG_C_GAME_WIN_RESP) ProtoReflect() protoreflect.Message {
	mi := &file_rummy_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MSG_C_GAME_WIN_RESP.ProtoReflect.Descriptor instead.
func (*MSG_C_GAME_WIN_RESP) Descriptor() ([]byte, []int) {
	return file_rummy_proto_rawDescGZIP(), []int{20}
}

func (x *MSG_C_GAME_WIN_RESP) GetTableId() uint32 {
	if x != nil {
		return x.TableId
	}
	return 0
}

func (x *MSG_C_GAME_WIN_RESP) GetChairIndex() uint32 {
	if x != nil {
		return x.ChairIndex
	}
	return 0
}

func (x *MSG_C_GAME_WIN_RESP) GetUserGroups() []*PokerGroup {
	if x != nil {
		return x.UserGroups
	}
	return nil
}

func (x *MSG_C_GAME_WIN_RESP) GetOutCard() uint32 {
	if x != nil {
		return x.OutCard
	}
	return 0
}

func (x *MSG_C_GAME_WIN_RESP) GetScore() uint32 {
	if x != nil {
		return x.Score
	}
	return 0
}

// 用户请求摆牌
type MSG_C_GAME_POSE_REQ struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TableId    uint32        `protobuf:"varint,1,opt,name=table_id,json=tableId,proto3" json:"table_id,omitempty"`
	UserGroups []*PokerGroup `protobuf:"bytes,2,rep,name=userGroups,proto3" json:"userGroups,omitempty"`
}

func (x *MSG_C_GAME_POSE_REQ) Reset() {
	*x = MSG_C_GAME_POSE_REQ{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rummy_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MSG_C_GAME_POSE_REQ) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MSG_C_GAME_POSE_REQ) ProtoMessage() {}

func (x *MSG_C_GAME_POSE_REQ) ProtoReflect() protoreflect.Message {
	mi := &file_rummy_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MSG_C_GAME_POSE_REQ.ProtoReflect.Descriptor instead.
func (*MSG_C_GAME_POSE_REQ) Descriptor() ([]byte, []int) {
	return file_rummy_proto_rawDescGZIP(), []int{21}
}

func (x *MSG_C_GAME_POSE_REQ) GetTableId() uint32 {
	if x != nil {
		return x.TableId
	}
	return 0
}

func (x *MSG_C_GAME_POSE_REQ) GetUserGroups() []*PokerGroup {
	if x != nil {
		return x.UserGroups
	}
	return nil
}

// 用户请求摆牌广播
type MSG_C_GAME_POSE_RESP struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TableId    uint32        `protobuf:"varint,1,opt,name=table_id,json=tableId,proto3" json:"table_id,omitempty"`
	ChairIndex uint32        `protobuf:"varint,2,opt,name=chair_index,json=chairIndex,proto3" json:"chair_index,omitempty"` // 座位编号
	UserGroups []*PokerGroup `protobuf:"bytes,3,rep,name=userGroups,proto3" json:"userGroups,omitempty"`                    // 用户组成的所有group
	Score      uint32        `protobuf:"varint,4,opt,name=score,proto3" json:"score,omitempty"`                             // 分数（逻辑上不可能为0）
}

func (x *MSG_C_GAME_POSE_RESP) Reset() {
	*x = MSG_C_GAME_POSE_RESP{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rummy_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MSG_C_GAME_POSE_RESP) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MSG_C_GAME_POSE_RESP) ProtoMessage() {}

func (x *MSG_C_GAME_POSE_RESP) ProtoReflect() protoreflect.Message {
	mi := &file_rummy_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MSG_C_GAME_POSE_RESP.ProtoReflect.Descriptor instead.
func (*MSG_C_GAME_POSE_RESP) Descriptor() ([]byte, []int) {
	return file_rummy_proto_rawDescGZIP(), []int{22}
}

func (x *MSG_C_GAME_POSE_RESP) GetTableId() uint32 {
	if x != nil {
		return x.TableId
	}
	return 0
}

func (x *MSG_C_GAME_POSE_RESP) GetChairIndex() uint32 {
	if x != nil {
		return x.ChairIndex
	}
	return 0
}

func (x *MSG_C_GAME_POSE_RESP) GetUserGroups() []*PokerGroup {
	if x != nil {
		return x.UserGroups
	}
	return nil
}

func (x *MSG_C_GAME_POSE_RESP) GetScore() uint32 {
	if x != nil {
		return x.Score
	}
	return 0
}

type MSG_C_GAME_QUIT_SCORE_RESP struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TableId  uint32 `protobuf:"varint,1,opt,name=table_id,json=tableId,proto3" json:"table_id,omitempty"`
	Score    uint32 `protobuf:"varint,2,opt,name=score,proto3" json:"score,omitempty"`
	Currency uint32 `protobuf:"varint,3,opt,name=currency,proto3" json:"currency,omitempty"`
}

func (x *MSG_C_GAME_QUIT_SCORE_RESP) Reset() {
	*x = MSG_C_GAME_QUIT_SCORE_RESP{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rummy_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MSG_C_GAME_QUIT_SCORE_RESP) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MSG_C_GAME_QUIT_SCORE_RESP) ProtoMessage() {}

func (x *MSG_C_GAME_QUIT_SCORE_RESP) ProtoReflect() protoreflect.Message {
	mi := &file_rummy_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MSG_C_GAME_QUIT_SCORE_RESP.ProtoReflect.Descriptor instead.
func (*MSG_C_GAME_QUIT_SCORE_RESP) Descriptor() ([]byte, []int) {
	return file_rummy_proto_rawDescGZIP(), []int{23}
}

func (x *MSG_C_GAME_QUIT_SCORE_RESP) GetTableId() uint32 {
	if x != nil {
		return x.TableId
	}
	return 0
}

func (x *MSG_C_GAME_QUIT_SCORE_RESP) GetScore() uint32 {
	if x != nil {
		return x.Score
	}
	return 0
}

func (x *MSG_C_GAME_QUIT_SCORE_RESP) GetCurrency() uint32 {
	if x != nil {
		return x.Currency
	}
	return 0
}

// 用户聊天请求
type MSG_C_CHAT_REQ struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TableId     uint32 `protobuf:"varint,1,opt,name=table_id,json=tableId,proto3" json:"table_id,omitempty"`
	ChatType    uint32 `protobuf:"varint,2,opt,name=chat_type,json=chatType,proto3" json:"chat_type,omitempty"`        // 聊天类型1：固定语句聊天；2：自由语句聊天
	Type_1Value string `protobuf:"bytes,3,opt,name=type_1_value,json=type1Value,proto3" json:"type_1_value,omitempty"` // 固定语句聊天的值
	Type_2Value string `protobuf:"bytes,4,opt,name=type_2_value,json=type2Value,proto3" json:"type_2_value,omitempty"` // 自由语句聊天的值
}

func (x *MSG_C_CHAT_REQ) Reset() {
	*x = MSG_C_CHAT_REQ{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rummy_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MSG_C_CHAT_REQ) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MSG_C_CHAT_REQ) ProtoMessage() {}

func (x *MSG_C_CHAT_REQ) ProtoReflect() protoreflect.Message {
	mi := &file_rummy_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MSG_C_CHAT_REQ.ProtoReflect.Descriptor instead.
func (*MSG_C_CHAT_REQ) Descriptor() ([]byte, []int) {
	return file_rummy_proto_rawDescGZIP(), []int{24}
}

func (x *MSG_C_CHAT_REQ) GetTableId() uint32 {
	if x != nil {
		return x.TableId
	}
	return 0
}

func (x *MSG_C_CHAT_REQ) GetChatType() uint32 {
	if x != nil {
		return x.ChatType
	}
	return 0
}

func (x *MSG_C_CHAT_REQ) GetType_1Value() string {
	if x != nil {
		return x.Type_1Value
	}
	return ""
}

func (x *MSG_C_CHAT_REQ) GetType_2Value() string {
	if x != nil {
		return x.Type_2Value
	}
	return ""
}

// 用户聊天请求
type MSG_C_CHAT_RESP struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TableId     uint32 `protobuf:"varint,1,opt,name=table_id,json=tableId,proto3" json:"table_id,omitempty"`
	ChatIndex   uint32 `protobuf:"varint,2,opt,name=chat_index,json=chatIndex,proto3" json:"chat_index,omitempty"`     // 聊天的座位ID
	ChatType    uint32 `protobuf:"varint,3,opt,name=chat_type,json=chatType,proto3" json:"chat_type,omitempty"`        // 聊天类型1：固定语句聊天；2：自由语句聊天
	Type_1Value string `protobuf:"bytes,4,opt,name=type_1_value,json=type1Value,proto3" json:"type_1_value,omitempty"` // 固定语句聊天的值
	Type_2Value string `protobuf:"bytes,5,opt,name=type_2_value,json=type2Value,proto3" json:"type_2_value,omitempty"` // 自由语句聊天的值
}

func (x *MSG_C_CHAT_RESP) Reset() {
	*x = MSG_C_CHAT_RESP{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rummy_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MSG_C_CHAT_RESP) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MSG_C_CHAT_RESP) ProtoMessage() {}

func (x *MSG_C_CHAT_RESP) ProtoReflect() protoreflect.Message {
	mi := &file_rummy_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MSG_C_CHAT_RESP.ProtoReflect.Descriptor instead.
func (*MSG_C_CHAT_RESP) Descriptor() ([]byte, []int) {
	return file_rummy_proto_rawDescGZIP(), []int{25}
}

func (x *MSG_C_CHAT_RESP) GetTableId() uint32 {
	if x != nil {
		return x.TableId
	}
	return 0
}

func (x *MSG_C_CHAT_RESP) GetChatIndex() uint32 {
	if x != nil {
		return x.ChatIndex
	}
	return 0
}

func (x *MSG_C_CHAT_RESP) GetChatType() uint32 {
	if x != nil {
		return x.ChatType
	}
	return 0
}

func (x *MSG_C_CHAT_RESP) GetType_1Value() string {
	if x != nil {
		return x.Type_1Value
	}
	return ""
}

func (x *MSG_C_CHAT_RESP) GetType_2Value() string {
	if x != nil {
		return x.Type_2Value
	}
	return ""
}

// 通知客户端桌子将被解散
type MSG_C_MATCH_FINISH_RESP struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TableId uint32 `protobuf:"varint,1,opt,name=table_id,json=tableId,proto3" json:"table_id,omitempty"`
	Reason  uint32 `protobuf:"varint,2,opt,name=reason,proto3" json:"reason,omitempty"`
}

func (x *MSG_C_MATCH_FINISH_RESP) Reset() {
	*x = MSG_C_MATCH_FINISH_RESP{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rummy_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MSG_C_MATCH_FINISH_RESP) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MSG_C_MATCH_FINISH_RESP) ProtoMessage() {}

func (x *MSG_C_MATCH_FINISH_RESP) ProtoReflect() protoreflect.Message {
	mi := &file_rummy_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MSG_C_MATCH_FINISH_RESP.ProtoReflect.Descriptor instead.
func (*MSG_C_MATCH_FINISH_RESP) Descriptor() ([]byte, []int) {
	return file_rummy_proto_rawDescGZIP(), []int{26}
}

func (x *MSG_C_MATCH_FINISH_RESP) GetTableId() uint32 {
	if x != nil {
		return x.TableId
	}
	return 0
}

func (x *MSG_C_MATCH_FINISH_RESP) GetReason() uint32 {
	if x != nil {
		return x.Reason
	}
	return 0
}

// 这个是匹配服务器告诉rummy服务器的请求
type GameStartRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Level uint32               `protobuf:"varint,1,opt,name=level,proto3" json:"level,omitempty"`
	Users []*platform.GameUser `protobuf:"bytes,2,rep,name=users,proto3" json:"users,omitempty"`
	Rbc   uint32               `protobuf:"varint,3,opt,name=rbc,proto3" json:"rbc,omitempty"`
}

func (x *GameStartRequest) Reset() {
	*x = GameStartRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rummy_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GameStartRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GameStartRequest) ProtoMessage() {}

func (x *GameStartRequest) ProtoReflect() protoreflect.Message {
	mi := &file_rummy_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GameStartRequest.ProtoReflect.Descriptor instead.
func (*GameStartRequest) Descriptor() ([]byte, []int) {
	return file_rummy_proto_rawDescGZIP(), []int{27}
}

func (x *GameStartRequest) GetLevel() uint32 {
	if x != nil {
		return x.Level
	}
	return 0
}

func (x *GameStartRequest) GetUsers() []*platform.GameUser {
	if x != nil {
		return x.Users
	}
	return nil
}

func (x *GameStartRequest) GetRbc() uint32 {
	if x != nil {
		return x.Rbc
	}
	return 0
}

// 这个是匹配服务器收到rummy服务器的回复
type GameStartResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result  uint32 `protobuf:"varint,1,opt,name=result,proto3" json:"result,omitempty"`                  // 0：成功；
	TableId uint32 `protobuf:"varint,2,opt,name=table_id,json=tableId,proto3" json:"table_id,omitempty"` // table_id：因为一个服务上有很多个桌子以服务多个用户，这里分配好后就告诉匹配服务，匹配服务再把这个tableid和本服务的id告诉客户端
}

func (x *GameStartResponse) Reset() {
	*x = GameStartResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rummy_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GameStartResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GameStartResponse) ProtoMessage() {}

func (x *GameStartResponse) ProtoReflect() protoreflect.Message {
	mi := &file_rummy_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GameStartResponse.ProtoReflect.Descriptor instead.
func (*GameStartResponse) Descriptor() ([]byte, []int) {
	return file_rummy_proto_rawDescGZIP(), []int{28}
}

func (x *GameStartResponse) GetResult() uint32 {
	if x != nil {
		return x.Result
	}
	return 0
}

func (x *GameStartResponse) GetTableId() uint32 {
	if x != nil {
		return x.TableId
	}
	return 0
}

var File_rummy_proto protoreflect.FileDescriptor

var file_rummy_proto_rawDesc = []byte{
	0x0a, 0x0b, 0x72, 0x75, 0x6d, 0x6d, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x12, 0x63,
	0x6f, 0x6d, 0x2e, 0x63, 0x77, 0x2e, 0x63, 0x68, 0x65, 0x73, 0x73, 0x2e, 0x72, 0x75, 0x6d, 0x6d,
	0x79, 0x1a, 0x0e, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x22, 0xbe, 0x01, 0x0a, 0x0b, 0x43, 0x68, 0x61, 0x69, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x12, 0x15, 0x0a, 0x06, 0x62, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x05, 0x62, 0x55, 0x73, 0x65, 0x72, 0x12, 0x15, 0x0a, 0x06, 0x62, 0x5f, 0x67, 0x61,
	0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x62, 0x47, 0x61, 0x6d, 0x65, 0x12,
	0x15, 0x0a, 0x06, 0x62, 0x5f, 0x64, 0x72, 0x6f, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x05, 0x62, 0x44, 0x72, 0x6f, 0x70, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x68, 0x61, 0x69, 0x72, 0x5f,
	0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x63, 0x68, 0x61,
	0x69, 0x72, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x61, 0x72, 0x64, 0x73,
	0x18, 0x05, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x05, 0x63, 0x61, 0x72, 0x64, 0x73, 0x12, 0x33, 0x0a,
	0x04, 0x75, 0x73, 0x65, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x63, 0x6f,
	0x6d, 0x2e, 0x63, 0x77, 0x2e, 0x63, 0x68, 0x65, 0x73, 0x73, 0x2e, 0x70, 0x6c, 0x61, 0x74, 0x66,
	0x6f, 0x72, 0x6d, 0x2e, 0x47, 0x61, 0x6d, 0x65, 0x55, 0x73, 0x65, 0x72, 0x52, 0x04, 0x75, 0x73,
	0x65, 0x72, 0x22, 0x2d, 0x0a, 0x10, 0x4d, 0x53, 0x47, 0x5f, 0x43, 0x5f, 0x43, 0x4f, 0x4d, 0x4d,
	0x4f, 0x4e, 0x5f, 0x52, 0x45, 0x51, 0x12, 0x19, 0x0a, 0x08, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x49,
	0x64, 0x22, 0x46, 0x0a, 0x11, 0x4d, 0x53, 0x47, 0x5f, 0x43, 0x5f, 0x43, 0x4f, 0x4d, 0x4d, 0x4f,
	0x4e, 0x5f, 0x52, 0x45, 0x53, 0x50, 0x12, 0x19, 0x0a, 0x08, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x49,
	0x64, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0xce, 0x01, 0x0a, 0x1b, 0x4d, 0x53,
	0x47, 0x5f, 0x43, 0x5f, 0x47, 0x45, 0x54, 0x5f, 0x54, 0x41, 0x42, 0x4c, 0x45, 0x5f, 0x53, 0x54,
	0x41, 0x54, 0x55, 0x53, 0x5f, 0x52, 0x45, 0x53, 0x50, 0x12, 0x19, 0x0a, 0x08, 0x74, 0x61, 0x62,
	0x6c, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x74, 0x61, 0x62,
	0x6c, 0x65, 0x49, 0x64, 0x12, 0x3c, 0x0a, 0x0a, 0x67, 0x61, 0x6d, 0x65, 0x5f, 0x70, 0x68, 0x61,
	0x73, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1d, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63,
	0x77, 0x2e, 0x63, 0x68, 0x65, 0x73, 0x73, 0x2e, 0x72, 0x75, 0x6d, 0x6d, 0x79, 0x2e, 0x47, 0x61,
	0x6d, 0x65, 0x50, 0x68, 0x61, 0x73, 0x65, 0x52, 0x09, 0x67, 0x61, 0x6d, 0x65, 0x50, 0x68, 0x61,
	0x73, 0x65, 0x12, 0x37, 0x0a, 0x06, 0x63, 0x68, 0x61, 0x72, 0x69, 0x73, 0x18, 0x03, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x77, 0x2e, 0x63, 0x68, 0x65, 0x73,
	0x73, 0x2e, 0x72, 0x75, 0x6d, 0x6d, 0x79, 0x2e, 0x43, 0x68, 0x61, 0x69, 0x72, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x52, 0x06, 0x63, 0x68, 0x61, 0x72, 0x69, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x73,
	0x65, 0x6c, 0x66, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x09, 0x73, 0x65, 0x6c, 0x66, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x22, 0x4a, 0x0a, 0x17, 0x4d, 0x53,
	0x47, 0x5f, 0x43, 0x5f, 0x47, 0x41, 0x4d, 0x45, 0x5f, 0x52, 0x45, 0x41, 0x44, 0x59, 0x5f, 0x33,
	0x5f, 0x52, 0x45, 0x53, 0x50, 0x12, 0x19, 0x0a, 0x08, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x49, 0x64,
	0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x05, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x22, 0x8d, 0x02, 0x0a, 0x19, 0x4d, 0x53, 0x47, 0x5f, 0x43,
	0x5f, 0x47, 0x41, 0x4d, 0x45, 0x5f, 0x44, 0x45, 0x41, 0x4c, 0x43, 0x41, 0x52, 0x44, 0x53, 0x5f,
	0x52, 0x45, 0x53, 0x50, 0x12, 0x19, 0x0a, 0x08, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x49, 0x64, 0x12,
	0x16, 0x0a, 0x06, 0x67, 0x61, 0x6d, 0x65, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x67, 0x61, 0x6d, 0x65, 0x49, 0x44, 0x12, 0x37, 0x0a, 0x06, 0x63, 0x68, 0x61, 0x72, 0x69,
	0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x77,
	0x2e, 0x63, 0x68, 0x65, 0x73, 0x73, 0x2e, 0x72, 0x75, 0x6d, 0x6d, 0x79, 0x2e, 0x43, 0x68, 0x61,
	0x69, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x63, 0x68, 0x61, 0x72, 0x69, 0x73,
	0x12, 0x16, 0x0a, 0x06, 0x64, 0x65, 0x61, 0x6c, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x06, 0x64, 0x65, 0x61, 0x6c, 0x65, 0x72, 0x12, 0x1d, 0x0a, 0x0a, 0x77, 0x69, 0x6c, 0x64,
	0x5f, 0x6a, 0x6f, 0x6b, 0x65, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x77, 0x69,
	0x6c, 0x64, 0x4a, 0x6f, 0x6b, 0x65, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x61, 0x72, 0x64, 0x73,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x63, 0x61, 0x72, 0x64, 0x73, 0x12, 0x1b, 0x0a,
	0x09, 0x63, 0x61, 0x72, 0x64, 0x73, 0x5f, 0x64, 0x69, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x08, 0x63, 0x61, 0x72, 0x64, 0x73, 0x44, 0x69, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x4f, 0x70,
	0x65, 0x6e, 0x44, 0x65, 0x63, 0x6b, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x4f, 0x70,
	0x65, 0x6e, 0x44, 0x65, 0x63, 0x6b, 0x22, 0x76, 0x0a, 0x1b, 0x4d, 0x53, 0x47, 0x5f, 0x43, 0x5f,
	0x47, 0x41, 0x4d, 0x45, 0x5f, 0x43, 0x41, 0x52, 0x44, 0x53, 0x5f, 0x52, 0x45, 0x53, 0x45, 0x54,
	0x5f, 0x52, 0x45, 0x53, 0x50, 0x12, 0x19, 0x0a, 0x08, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x49, 0x64,
	0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x64, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x64, 0x53, 0x69, 0x7a,
	0x65, 0x12, 0x1b, 0x0a, 0x09, 0x6f, 0x70, 0x65, 0x6e, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x6f, 0x70, 0x65, 0x6e, 0x53, 0x69, 0x7a, 0x65, 0x22, 0xe7,
	0x01, 0x0a, 0x16, 0x4d, 0x53, 0x47, 0x5f, 0x43, 0x5f, 0x47, 0x41, 0x4d, 0x45, 0x5f, 0x4e, 0x4f,
	0x54, 0x49, 0x43, 0x45, 0x5f, 0x52, 0x45, 0x53, 0x50, 0x12, 0x19, 0x0a, 0x08, 0x74, 0x61, 0x62,
	0x6c, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x74, 0x61, 0x62,
	0x6c, 0x65, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x68, 0x61, 0x69, 0x72, 0x5f, 0x69, 0x6e,
	0x64, 0x65, 0x78, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x63, 0x68, 0x61, 0x69, 0x72,
	0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x15, 0x0a, 0x06, 0x62, 0x5f, 0x73, 0x65, 0x6c, 0x66, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x62, 0x53, 0x65, 0x6c, 0x66, 0x12, 0x15, 0x0a, 0x06,
	0x62, 0x5f, 0x6f, 0x70, 0x65, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x62, 0x4f,
	0x70, 0x65, 0x6e, 0x12, 0x1d, 0x0a, 0x0a, 0x6f, 0x70, 0x65, 0x6e, 0x5f, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x6f, 0x70, 0x65, 0x6e, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x5f, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x12, 0x23, 0x0a, 0x0d, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x5f,
	0x74, 0x69, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x6f, 0x70, 0x65, 0x72,
	0x61, 0x74, 0x6f, 0x72, 0x54, 0x69, 0x6d, 0x65, 0x22, 0x59, 0x0a, 0x1a, 0x4d, 0x53, 0x47, 0x5f,
	0x43, 0x5f, 0x47, 0x41, 0x4d, 0x45, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x43, 0x48, 0x4f, 0x49,
	0x43, 0x45, 0x5f, 0x52, 0x45, 0x51, 0x12, 0x19, 0x0a, 0x08, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x49,
	0x64, 0x12, 0x20, 0x0a, 0x0b, 0x6f, 0x70, 0x65, 0x6e, 0x6f, 0x72, 0x63, 0x6c, 0x6f, 0x73, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x6f, 0x70, 0x65, 0x6e, 0x6f, 0x72, 0x63, 0x6c,
	0x6f, 0x73, 0x65, 0x22, 0x4e, 0x0a, 0x0a, 0x50, 0x6f, 0x6b, 0x65, 0x72, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x6f, 0x6b, 0x65, 0x72, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0d, 0x52, 0x06, 0x70, 0x6f, 0x6b, 0x65, 0x72, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x65, 0x67,
	0x61, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x6c, 0x65, 0x67, 0x61, 0x6c, 0x12,
	0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x74,
	0x79, 0x70, 0x65, 0x22, 0xd4, 0x02, 0x0a, 0x1b, 0x4d, 0x53, 0x47, 0x5f, 0x43, 0x5f, 0x47, 0x41,
	0x4d, 0x45, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x43, 0x48, 0x4f, 0x49, 0x43, 0x45, 0x5f, 0x52,
	0x45, 0x53, 0x50, 0x12, 0x19, 0x0a, 0x08, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x49, 0x64, 0x12, 0x16,
	0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06,
	0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x68, 0x61, 0x69, 0x72, 0x5f,
	0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x63, 0x68, 0x61,
	0x69, 0x72, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x15, 0x0a, 0x06, 0x62, 0x5f, 0x73, 0x65, 0x6c,
	0x66, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x62, 0x53, 0x65, 0x6c, 0x66, 0x12, 0x12,
	0x0a, 0x04, 0x63, 0x61, 0x72, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x63, 0x61,
	0x72, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x70, 0x72, 0x65, 0x5f, 0x6f, 0x70, 0x65, 0x6e, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x70, 0x72, 0x65, 0x4f, 0x70, 0x65, 0x6e, 0x12, 0x20, 0x0a,
	0x0b, 0x6f, 0x70, 0x65, 0x6e, 0x6f, 0x72, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x0b, 0x6f, 0x70, 0x65, 0x6e, 0x6f, 0x72, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x12,
	0x17, 0x0a, 0x07, 0x6f, 0x6e, 0x65, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x06, 0x6f, 0x6e, 0x65, 0x4b, 0x65, 0x79, 0x12, 0x20, 0x0a, 0x0c, 0x6f, 0x75, 0x74, 0x5f,
	0x63, 0x61, 0x72, 0x64, 0x5f, 0x77, 0x69, 0x6e, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a,
	0x6f, 0x75, 0x74, 0x43, 0x61, 0x72, 0x64, 0x57, 0x69, 0x6e, 0x12, 0x3e, 0x0a, 0x0a, 0x75, 0x73,
	0x65, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e,
	0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x77, 0x2e, 0x63, 0x68, 0x65, 0x73, 0x73, 0x2e, 0x72, 0x75,
	0x6d, 0x6d, 0x79, 0x2e, 0x50, 0x6f, 0x6b, 0x65, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x0a,
	0x75, 0x73, 0x65, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x22, 0x4f, 0x0a, 0x17, 0x4d, 0x53,
	0x47, 0x5f, 0x43, 0x5f, 0x47, 0x41, 0x4d, 0x45, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x4f, 0x55,
	0x54, 0x5f, 0x52, 0x45, 0x51, 0x12, 0x19, 0x0a, 0x08, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x49, 0x64,
	0x12, 0x19, 0x0a, 0x08, 0x6f, 0x75, 0x74, 0x5f, 0x63, 0x61, 0x72, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x07, 0x6f, 0x75, 0x74, 0x43, 0x61, 0x72, 0x64, 0x22, 0xe0, 0x01, 0x0a, 0x18,
	0x4d, 0x53, 0x47, 0x5f, 0x43, 0x5f, 0x47, 0x41, 0x4d, 0x45, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x5f,
	0x4f, 0x55, 0x54, 0x5f, 0x52, 0x45, 0x53, 0x50, 0x12, 0x19, 0x0a, 0x08, 0x74, 0x61, 0x62, 0x6c,
	0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x74, 0x61, 0x62, 0x6c,
	0x65, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x63,
	0x68, 0x61, 0x69, 0x72, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x0a, 0x63, 0x68, 0x61, 0x69, 0x72, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x15, 0x0a, 0x06,
	0x62, 0x5f, 0x73, 0x65, 0x6c, 0x66, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x62, 0x53,
	0x65, 0x6c, 0x66, 0x12, 0x19, 0x0a, 0x08, 0x6f, 0x75, 0x74, 0x5f, 0x63, 0x61, 0x72, 0x64, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x6f, 0x75, 0x74, 0x43, 0x61, 0x72, 0x64, 0x12, 0x3e,
	0x0a, 0x0a, 0x75, 0x73, 0x65, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x18, 0x06, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x77, 0x2e, 0x63, 0x68, 0x65, 0x73,
	0x73, 0x2e, 0x72, 0x75, 0x6d, 0x6d, 0x79, 0x2e, 0x50, 0x6f, 0x6b, 0x65, 0x72, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x52, 0x0a, 0x75, 0x73, 0x65, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x22, 0xa3,
	0x01, 0x0a, 0x18, 0x4d, 0x53, 0x47, 0x5f, 0x43, 0x5f, 0x47, 0x41, 0x4d, 0x45, 0x5f, 0x41, 0x49,
	0x5f, 0x53, 0x43, 0x4f, 0x52, 0x45, 0x5f, 0x52, 0x45, 0x53, 0x50, 0x12, 0x19, 0x0a, 0x08, 0x74,
	0x61, 0x62, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x74,
	0x61, 0x62, 0x6c, 0x65, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x14,
	0x0a, 0x05, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x73,
	0x63, 0x6f, 0x72, 0x65, 0x12, 0x3e, 0x0a, 0x0a, 0x75, 0x73, 0x65, 0x72, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63,
	0x77, 0x2e, 0x63, 0x68, 0x65, 0x73, 0x73, 0x2e, 0x72, 0x75, 0x6d, 0x6d, 0x79, 0x2e, 0x50, 0x6f,
	0x6b, 0x65, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x0a, 0x75, 0x73, 0x65, 0x72, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x73, 0x22, 0x97, 0x01, 0x0a, 0x14, 0x4d, 0x53, 0x47, 0x5f, 0x43, 0x5f, 0x47,
	0x41, 0x4d, 0x45, 0x5f, 0x44, 0x52, 0x4f, 0x50, 0x5f, 0x52, 0x45, 0x53, 0x50, 0x12, 0x19, 0x0a,
	0x08, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x07, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x12, 0x14, 0x0a, 0x05, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x05, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x12, 0x15, 0x0a, 0x06, 0x62, 0x5f, 0x73, 0x65, 0x6c, 0x66,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x62, 0x53, 0x65, 0x6c, 0x66, 0x12, 0x1f, 0x0a,
	0x0b, 0x63, 0x68, 0x61, 0x69, 0x72, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x0a, 0x63, 0x68, 0x61, 0x69, 0x72, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x22, 0xac,
	0x01, 0x0a, 0x0a, 0x55, 0x73, 0x65, 0x72, 0x53, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x12, 0x1f, 0x0a,
	0x0b, 0x63, 0x68, 0x61, 0x69, 0x72, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x0a, 0x63, 0x68, 0x61, 0x69, 0x72, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x12,
	0x0a, 0x04, 0x64, 0x72, 0x6f, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x64, 0x72,
	0x6f, 0x70, 0x12, 0x3f, 0x0a, 0x0b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70,
	0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x77,
	0x2e, 0x63, 0x68, 0x65, 0x73, 0x73, 0x2e, 0x72, 0x75, 0x6d, 0x6d, 0x79, 0x2e, 0x50, 0x6f, 0x6b,
	0x65, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x0a, 0x75, 0x73, 0x65, 0x72, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x05, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x69,
	0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x63, 0x6f, 0x69, 0x6e, 0x22, 0x97, 0x01,
	0x0a, 0x16, 0x4d, 0x53, 0x47, 0x5f, 0x43, 0x5f, 0x47, 0x41, 0x4d, 0x45, 0x5f, 0x53, 0x45, 0x54,
	0x54, 0x4c, 0x45, 0x5f, 0x52, 0x45, 0x53, 0x50, 0x12, 0x19, 0x0a, 0x08, 0x74, 0x61, 0x62, 0x6c,
	0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x74, 0x61, 0x62, 0x6c,
	0x65, 0x49, 0x64, 0x12, 0x3f, 0x0a, 0x0b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x73, 0x65, 0x74, 0x74,
	0x6c, 0x65, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63,
	0x77, 0x2e, 0x63, 0x68, 0x65, 0x73, 0x73, 0x2e, 0x72, 0x75, 0x6d, 0x6d, 0x79, 0x2e, 0x55, 0x73,
	0x65, 0x72, 0x53, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x52, 0x0a, 0x75, 0x73, 0x65, 0x72, 0x53, 0x65,
	0x74, 0x74, 0x6c, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x77, 0x69, 0x6e, 0x6e, 0x65, 0x72, 0x5f, 0x69,
	0x6e, 0x64, 0x65, 0x78, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x77, 0x69, 0x6e, 0x6e,
	0x65, 0x72, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x22, 0x50, 0x0a, 0x17, 0x4d, 0x53, 0x47, 0x5f, 0x43,
	0x5f, 0x47, 0x41, 0x4d, 0x45, 0x5f, 0x43, 0x4f, 0x4e, 0x54, 0x49, 0x4e, 0x55, 0x45, 0x5f, 0x52,
	0x45, 0x51, 0x12, 0x19, 0x0a, 0x08, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x49, 0x64, 0x12, 0x1a, 0x0a,
	0x08, 0x63, 0x6f, 0x6e, 0x74, 0x69, 0x6e, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x08, 0x63, 0x6f, 0x6e, 0x74, 0x69, 0x6e, 0x75, 0x65, 0x22, 0x4d, 0x0a, 0x18, 0x4d, 0x53, 0x47,
	0x5f, 0x43, 0x5f, 0x47, 0x41, 0x4d, 0x45, 0x5f, 0x43, 0x4f, 0x4e, 0x54, 0x49, 0x4e, 0x55, 0x45,
	0x5f, 0x52, 0x45, 0x53, 0x50, 0x12, 0x19, 0x0a, 0x08, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x49, 0x64,
	0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x8b, 0x01, 0x0a, 0x12, 0x4d, 0x53, 0x47,
	0x5f, 0x43, 0x5f, 0x47, 0x41, 0x4d, 0x45, 0x5f, 0x57, 0x49, 0x4e, 0x5f, 0x52, 0x45, 0x51, 0x12,
	0x19, 0x0a, 0x08, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x07, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x49, 0x64, 0x12, 0x3e, 0x0a, 0x0a, 0x75, 0x73,
	0x65, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e,
	0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x77, 0x2e, 0x63, 0x68, 0x65, 0x73, 0x73, 0x2e, 0x72, 0x75,
	0x6d, 0x6d, 0x79, 0x2e, 0x50, 0x6f, 0x6b, 0x65, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x0a,
	0x75, 0x73, 0x65, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x6f, 0x75,
	0x74, 0x50, 0x6f, 0x6b, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x6f, 0x75,
	0x74, 0x50, 0x6f, 0x6b, 0x65, 0x72, 0x22, 0xc2, 0x01, 0x0a, 0x13, 0x4d, 0x53, 0x47, 0x5f, 0x43,
	0x5f, 0x47, 0x41, 0x4d, 0x45, 0x5f, 0x57, 0x49, 0x4e, 0x5f, 0x52, 0x45, 0x53, 0x50, 0x12, 0x19,
	0x0a, 0x08, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x07, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x68, 0x61,
	0x69, 0x72, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a,
	0x63, 0x68, 0x61, 0x69, 0x72, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x3e, 0x0a, 0x0a, 0x75, 0x73,
	0x65, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e,
	0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x77, 0x2e, 0x63, 0x68, 0x65, 0x73, 0x73, 0x2e, 0x72, 0x75,
	0x6d, 0x6d, 0x79, 0x2e, 0x50, 0x6f, 0x6b, 0x65, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x0a,
	0x75, 0x73, 0x65, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x12, 0x19, 0x0a, 0x08, 0x6f, 0x75,
	0x74, 0x5f, 0x63, 0x61, 0x72, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x6f, 0x75,
	0x74, 0x43, 0x61, 0x72, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x22, 0x70, 0x0a, 0x13, 0x4d,
	0x53, 0x47, 0x5f, 0x43, 0x5f, 0x47, 0x41, 0x4d, 0x45, 0x5f, 0x50, 0x4f, 0x53, 0x45, 0x5f, 0x52,
	0x45, 0x51, 0x12, 0x19, 0x0a, 0x08, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x49, 0x64, 0x12, 0x3e, 0x0a,
	0x0a, 0x75, 0x73, 0x65, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x1e, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x77, 0x2e, 0x63, 0x68, 0x65, 0x73, 0x73,
	0x2e, 0x72, 0x75, 0x6d, 0x6d, 0x79, 0x2e, 0x50, 0x6f, 0x6b, 0x65, 0x72, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x52, 0x0a, 0x75, 0x73, 0x65, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x22, 0xa8, 0x01,
	0x0a, 0x14, 0x4d, 0x53, 0x47, 0x5f, 0x43, 0x5f, 0x47, 0x41, 0x4d, 0x45, 0x5f, 0x50, 0x4f, 0x53,
	0x45, 0x5f, 0x52, 0x45, 0x53, 0x50, 0x12, 0x19, 0x0a, 0x08, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x49,
	0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x68, 0x61, 0x69, 0x72, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x63, 0x68, 0x61, 0x69, 0x72, 0x49, 0x6e, 0x64,
	0x65, 0x78, 0x12, 0x3e, 0x0a, 0x0a, 0x75, 0x73, 0x65, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73,
	0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x77, 0x2e,
	0x63, 0x68, 0x65, 0x73, 0x73, 0x2e, 0x72, 0x75, 0x6d, 0x6d, 0x79, 0x2e, 0x50, 0x6f, 0x6b, 0x65,
	0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x0a, 0x75, 0x73, 0x65, 0x72, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x05, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x22, 0x69, 0x0a, 0x1a, 0x4d, 0x53, 0x47, 0x5f,
	0x43, 0x5f, 0x47, 0x41, 0x4d, 0x45, 0x5f, 0x51, 0x55, 0x49, 0x54, 0x5f, 0x53, 0x43, 0x4f, 0x52,
	0x45, 0x5f, 0x52, 0x45, 0x53, 0x50, 0x12, 0x19, 0x0a, 0x08, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x49,
	0x64, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x05, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x75, 0x72, 0x72, 0x65,
	0x6e, 0x63, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x63, 0x75, 0x72, 0x72, 0x65,
	0x6e, 0x63, 0x79, 0x22, 0x8c, 0x01, 0x0a, 0x0e, 0x4d, 0x53, 0x47, 0x5f, 0x43, 0x5f, 0x43, 0x48,
	0x41, 0x54, 0x5f, 0x52, 0x45, 0x51, 0x12, 0x19, 0x0a, 0x08, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x49,
	0x64, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x68, 0x61, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x63, 0x68, 0x61, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x20,
	0x0a, 0x0c, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x31, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x74, 0x79, 0x70, 0x65, 0x31, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x12, 0x20, 0x0a, 0x0c, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x32, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x74, 0x79, 0x70, 0x65, 0x32, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x22, 0xac, 0x01, 0x0a, 0x0f, 0x4d, 0x53, 0x47, 0x5f, 0x43, 0x5f, 0x43, 0x48, 0x41,
	0x54, 0x5f, 0x52, 0x45, 0x53, 0x50, 0x12, 0x19, 0x0a, 0x08, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x49,
	0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x68, 0x61, 0x74, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x63, 0x68, 0x61, 0x74, 0x49, 0x6e, 0x64, 0x65, 0x78,
	0x12, 0x1b, 0x0a, 0x09, 0x63, 0x68, 0x61, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x08, 0x63, 0x68, 0x61, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x20, 0x0a,
	0x0c, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x31, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x74, 0x79, 0x70, 0x65, 0x31, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12,
	0x20, 0x0a, 0x0c, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x32, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x74, 0x79, 0x70, 0x65, 0x32, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x22, 0x4c, 0x0a, 0x17, 0x4d, 0x53, 0x47, 0x5f, 0x43, 0x5f, 0x4d, 0x41, 0x54, 0x43, 0x48,
	0x5f, 0x46, 0x49, 0x4e, 0x49, 0x53, 0x48, 0x5f, 0x52, 0x45, 0x53, 0x50, 0x12, 0x19, 0x0a, 0x08,
	0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07,
	0x74, 0x61, 0x62, 0x6c, 0x65, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f,
	0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x22,
	0x71, 0x0a, 0x10, 0x47, 0x61, 0x6d, 0x65, 0x53, 0x74, 0x61, 0x72, 0x74, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x35, 0x0a, 0x05, 0x75, 0x73, 0x65,
	0x72, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63,
	0x77, 0x2e, 0x63, 0x68, 0x65, 0x73, 0x73, 0x2e, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d,
	0x2e, 0x47, 0x61, 0x6d, 0x65, 0x55, 0x73, 0x65, 0x72, 0x52, 0x05, 0x75, 0x73, 0x65, 0x72, 0x73,
	0x12, 0x10, 0x0a, 0x03, 0x72, 0x62, 0x63, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x72,
	0x62, 0x63, 0x22, 0x46, 0x0a, 0x11, 0x47, 0x61, 0x6d, 0x65, 0x53, 0x74, 0x61, 0x72, 0x74, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12,
	0x19, 0x0a, 0x08, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x07, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x49, 0x64, 0x2a, 0xee, 0x08, 0x0a, 0x0c, 0x52,
	0x75, 0x6d, 0x6d, 0x79, 0x32, 0x5f, 0x43, 0x5f, 0x43, 0x6d, 0x64, 0x12, 0x11, 0x0a, 0x0d, 0x43,
	0x4d, 0x44, 0x5f, 0x43, 0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x10, 0x00, 0x12, 0x1e,
	0x0a, 0x1a, 0x43, 0x4d, 0x44, 0x5f, 0x43, 0x5f, 0x47, 0x45, 0x54, 0x5f, 0x54, 0x41, 0x42, 0x4c,
	0x45, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x52, 0x45, 0x51, 0x10, 0x01, 0x12, 0x1f,
	0x0a, 0x1b, 0x43, 0x4d, 0x44, 0x5f, 0x43, 0x5f, 0x47, 0x45, 0x54, 0x5f, 0x54, 0x41, 0x42, 0x4c,
	0x45, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x52, 0x45, 0x53, 0x50, 0x10, 0x02, 0x12,
	0x19, 0x0a, 0x15, 0x43, 0x4d, 0x44, 0x5f, 0x43, 0x5f, 0x4d, 0x41, 0x54, 0x43, 0x48, 0x5f, 0x52,
	0x45, 0x41, 0x44, 0x59, 0x5f, 0x52, 0x45, 0x51, 0x10, 0x03, 0x12, 0x1a, 0x0a, 0x16, 0x43, 0x4d,
	0x44, 0x5f, 0x43, 0x5f, 0x4d, 0x41, 0x54, 0x43, 0x48, 0x5f, 0x52, 0x45, 0x41, 0x44, 0x59, 0x5f,
	0x52, 0x45, 0x53, 0x50, 0x10, 0x04, 0x12, 0x1a, 0x0a, 0x16, 0x43, 0x4d, 0x44, 0x5f, 0x43, 0x5f,
	0x47, 0x41, 0x4d, 0x45, 0x5f, 0x52, 0x45, 0x41, 0x44, 0x59, 0x5f, 0x33, 0x5f, 0x52, 0x45, 0x51,
	0x10, 0x05, 0x12, 0x1b, 0x0a, 0x17, 0x43, 0x4d, 0x44, 0x5f, 0x43, 0x5f, 0x47, 0x41, 0x4d, 0x45,
	0x5f, 0x52, 0x45, 0x41, 0x44, 0x59, 0x5f, 0x33, 0x5f, 0x52, 0x45, 0x53, 0x50, 0x10, 0x06, 0x12,
	0x20, 0x0a, 0x1c, 0x43, 0x4d, 0x44, 0x5f, 0x43, 0x5f, 0x47, 0x41, 0x4d, 0x45, 0x5f, 0x52, 0x45,
	0x41, 0x44, 0x59, 0x5f, 0x43, 0x4f, 0x4d, 0x46, 0x49, 0x52, 0x4d, 0x5f, 0x52, 0x45, 0x51, 0x10,
	0x07, 0x12, 0x21, 0x0a, 0x1d, 0x43, 0x4d, 0x44, 0x5f, 0x43, 0x5f, 0x47, 0x41, 0x4d, 0x45, 0x5f,
	0x52, 0x45, 0x41, 0x44, 0x59, 0x5f, 0x43, 0x4f, 0x4d, 0x46, 0x49, 0x52, 0x4d, 0x5f, 0x52, 0x45,
	0x53, 0x50, 0x10, 0x08, 0x12, 0x1c, 0x0a, 0x18, 0x43, 0x4d, 0x44, 0x5f, 0x43, 0x5f, 0x47, 0x41,
	0x4d, 0x45, 0x5f, 0x44, 0x45, 0x41, 0x4c, 0x43, 0x41, 0x52, 0x44, 0x53, 0x5f, 0x52, 0x45, 0x51,
	0x10, 0x09, 0x12, 0x1d, 0x0a, 0x19, 0x43, 0x4d, 0x44, 0x5f, 0x43, 0x5f, 0x47, 0x41, 0x4d, 0x45,
	0x5f, 0x44, 0x45, 0x41, 0x4c, 0x43, 0x41, 0x52, 0x44, 0x53, 0x5f, 0x52, 0x45, 0x53, 0x50, 0x10,
	0x0a, 0x12, 0x1e, 0x0a, 0x1a, 0x43, 0x4d, 0x44, 0x5f, 0x43, 0x5f, 0x47, 0x41, 0x4d, 0x45, 0x5f,
	0x43, 0x41, 0x52, 0x44, 0x53, 0x5f, 0x52, 0x45, 0x53, 0x45, 0x54, 0x5f, 0x52, 0x45, 0x51, 0x10,
	0x0b, 0x12, 0x1f, 0x0a, 0x1b, 0x43, 0x4d, 0x44, 0x5f, 0x43, 0x5f, 0x47, 0x41, 0x4d, 0x45, 0x5f,
	0x43, 0x41, 0x52, 0x44, 0x53, 0x5f, 0x52, 0x45, 0x53, 0x45, 0x54, 0x5f, 0x52, 0x45, 0x53, 0x50,
	0x10, 0x0c, 0x12, 0x19, 0x0a, 0x15, 0x43, 0x4d, 0x44, 0x5f, 0x43, 0x5f, 0x47, 0x41, 0x4d, 0x45,
	0x5f, 0x4e, 0x4f, 0x54, 0x49, 0x43, 0x45, 0x5f, 0x52, 0x45, 0x51, 0x10, 0x0d, 0x12, 0x1a, 0x0a,
	0x16, 0x43, 0x4d, 0x44, 0x5f, 0x43, 0x5f, 0x47, 0x41, 0x4d, 0x45, 0x5f, 0x4e, 0x4f, 0x54, 0x49,
	0x43, 0x45, 0x5f, 0x52, 0x45, 0x53, 0x50, 0x10, 0x0e, 0x12, 0x1e, 0x0a, 0x1a, 0x43, 0x4d, 0x44,
	0x5f, 0x43, 0x5f, 0x47, 0x41, 0x4d, 0x45, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x43, 0x48, 0x4f,
	0x49, 0x43, 0x45, 0x5f, 0x52, 0x45, 0x51, 0x10, 0x0f, 0x12, 0x1f, 0x0a, 0x1b, 0x43, 0x4d, 0x44,
	0x5f, 0x43, 0x5f, 0x47, 0x41, 0x4d, 0x45, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x43, 0x48, 0x4f,
	0x49, 0x43, 0x45, 0x5f, 0x52, 0x45, 0x53, 0x50, 0x10, 0x10, 0x12, 0x1b, 0x0a, 0x17, 0x43, 0x4d,
	0x44, 0x5f, 0x43, 0x5f, 0x47, 0x41, 0x4d, 0x45, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x4f, 0x55,
	0x54, 0x5f, 0x52, 0x45, 0x51, 0x10, 0x11, 0x12, 0x1c, 0x0a, 0x18, 0x43, 0x4d, 0x44, 0x5f, 0x43,
	0x5f, 0x47, 0x41, 0x4d, 0x45, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x4f, 0x55, 0x54, 0x5f, 0x52,
	0x45, 0x53, 0x50, 0x10, 0x12, 0x12, 0x1b, 0x0a, 0x17, 0x43, 0x4d, 0x44, 0x5f, 0x43, 0x5f, 0x47,
	0x41, 0x4d, 0x45, 0x5f, 0x41, 0x49, 0x5f, 0x53, 0x43, 0x4f, 0x52, 0x45, 0x5f, 0x52, 0x45, 0x51,
	0x10, 0x13, 0x12, 0x1c, 0x0a, 0x18, 0x43, 0x4d, 0x44, 0x5f, 0x43, 0x5f, 0x47, 0x41, 0x4d, 0x45,
	0x5f, 0x41, 0x49, 0x5f, 0x53, 0x43, 0x4f, 0x52, 0x45, 0x5f, 0x52, 0x45, 0x53, 0x50, 0x10, 0x14,
	0x12, 0x17, 0x0a, 0x13, 0x43, 0x4d, 0x44, 0x5f, 0x43, 0x5f, 0x47, 0x41, 0x4d, 0x45, 0x5f, 0x44,
	0x52, 0x4f, 0x50, 0x5f, 0x52, 0x45, 0x51, 0x10, 0x15, 0x12, 0x18, 0x0a, 0x14, 0x43, 0x4d, 0x44,
	0x5f, 0x43, 0x5f, 0x47, 0x41, 0x4d, 0x45, 0x5f, 0x44, 0x52, 0x4f, 0x50, 0x5f, 0x52, 0x45, 0x53,
	0x50, 0x10, 0x16, 0x12, 0x19, 0x0a, 0x15, 0x43, 0x4d, 0x44, 0x5f, 0x43, 0x5f, 0x47, 0x41, 0x4d,
	0x45, 0x5f, 0x53, 0x45, 0x54, 0x54, 0x4c, 0x45, 0x5f, 0x52, 0x45, 0x51, 0x10, 0x17, 0x12, 0x1a,
	0x0a, 0x16, 0x43, 0x4d, 0x44, 0x5f, 0x43, 0x5f, 0x47, 0x41, 0x4d, 0x45, 0x5f, 0x53, 0x45, 0x54,
	0x54, 0x4c, 0x45, 0x5f, 0x52, 0x45, 0x53, 0x50, 0x10, 0x18, 0x12, 0x1b, 0x0a, 0x17, 0x43, 0x4d,
	0x44, 0x5f, 0x43, 0x5f, 0x47, 0x41, 0x4d, 0x45, 0x5f, 0x43, 0x4f, 0x4e, 0x54, 0x49, 0x4e, 0x55,
	0x45, 0x5f, 0x52, 0x45, 0x51, 0x10, 0x19, 0x12, 0x1c, 0x0a, 0x18, 0x43, 0x4d, 0x44, 0x5f, 0x43,
	0x5f, 0x47, 0x41, 0x4d, 0x45, 0x5f, 0x43, 0x4f, 0x4e, 0x54, 0x49, 0x4e, 0x55, 0x45, 0x5f, 0x52,
	0x45, 0x53, 0x50, 0x10, 0x1a, 0x12, 0x16, 0x0a, 0x12, 0x43, 0x4d, 0x44, 0x5f, 0x43, 0x5f, 0x47,
	0x41, 0x4d, 0x45, 0x5f, 0x57, 0x49, 0x4e, 0x5f, 0x52, 0x45, 0x51, 0x10, 0x1b, 0x12, 0x17, 0x0a,
	0x13, 0x43, 0x4d, 0x44, 0x5f, 0x43, 0x5f, 0x47, 0x41, 0x4d, 0x45, 0x5f, 0x57, 0x49, 0x4e, 0x5f,
	0x52, 0x45, 0x53, 0x50, 0x10, 0x1c, 0x12, 0x17, 0x0a, 0x13, 0x43, 0x4d, 0x44, 0x5f, 0x43, 0x5f,
	0x47, 0x41, 0x4d, 0x45, 0x5f, 0x50, 0x4f, 0x53, 0x45, 0x5f, 0x52, 0x45, 0x51, 0x10, 0x1d, 0x12,
	0x18, 0x0a, 0x14, 0x43, 0x4d, 0x44, 0x5f, 0x43, 0x5f, 0x47, 0x41, 0x4d, 0x45, 0x5f, 0x50, 0x4f,
	0x53, 0x45, 0x5f, 0x52, 0x45, 0x53, 0x50, 0x10, 0x1e, 0x12, 0x1e, 0x0a, 0x1a, 0x43, 0x4d, 0x44,
	0x5f, 0x43, 0x5f, 0x47, 0x41, 0x4d, 0x45, 0x5f, 0x4e, 0x4f, 0x54, 0x49, 0x43, 0x45, 0x5f, 0x50,
	0x4f, 0x53, 0x45, 0x5f, 0x52, 0x45, 0x51, 0x10, 0x1f, 0x12, 0x1f, 0x0a, 0x1b, 0x43, 0x4d, 0x44,
	0x5f, 0x43, 0x5f, 0x47, 0x41, 0x4d, 0x45, 0x5f, 0x4e, 0x4f, 0x54, 0x49, 0x43, 0x45, 0x5f, 0x50,
	0x4f, 0x53, 0x45, 0x5f, 0x52, 0x45, 0x53, 0x50, 0x10, 0x20, 0x12, 0x1d, 0x0a, 0x19, 0x43, 0x4d,
	0x44, 0x5f, 0x43, 0x5f, 0x47, 0x41, 0x4d, 0x45, 0x5f, 0x51, 0x55, 0x49, 0x54, 0x5f, 0x53, 0x43,
	0x4f, 0x52, 0x45, 0x5f, 0x52, 0x45, 0x51, 0x10, 0x3c, 0x12, 0x1e, 0x0a, 0x1a, 0x43, 0x4d, 0x44,
	0x5f, 0x43, 0x5f, 0x47, 0x41, 0x4d, 0x45, 0x5f, 0x51, 0x55, 0x49, 0x54, 0x5f, 0x53, 0x43, 0x4f,
	0x52, 0x45, 0x5f, 0x52, 0x45, 0x53, 0x50, 0x10, 0x3d, 0x12, 0x12, 0x0a, 0x0e, 0x43, 0x4d, 0x44,
	0x5f, 0x43, 0x5f, 0x43, 0x48, 0x41, 0x54, 0x5f, 0x52, 0x45, 0x51, 0x10, 0x3e, 0x12, 0x13, 0x0a,
	0x0f, 0x43, 0x4d, 0x44, 0x5f, 0x43, 0x5f, 0x43, 0x48, 0x41, 0x54, 0x5f, 0x52, 0x45, 0x53, 0x50,
	0x10, 0x3f, 0x12, 0x1a, 0x0a, 0x16, 0x43, 0x4d, 0x44, 0x5f, 0x43, 0x5f, 0x4d, 0x41, 0x54, 0x43,
	0x48, 0x5f, 0x46, 0x49, 0x4e, 0x49, 0x53, 0x48, 0x5f, 0x52, 0x45, 0x51, 0x10, 0x64, 0x12, 0x1b,
	0x0a, 0x17, 0x43, 0x4d, 0x44, 0x5f, 0x43, 0x5f, 0x4d, 0x41, 0x54, 0x43, 0x48, 0x5f, 0x46, 0x49,
	0x4e, 0x49, 0x53, 0x48, 0x5f, 0x52, 0x45, 0x53, 0x50, 0x10, 0x65, 0x2a, 0xe2, 0x01, 0x0a, 0x09,
	0x47, 0x61, 0x6d, 0x65, 0x50, 0x68, 0x61, 0x73, 0x65, 0x12, 0x0f, 0x0a, 0x0b, 0x50, 0x48, 0x53,
	0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x10, 0x00, 0x12, 0x13, 0x0a, 0x0f, 0x50, 0x48,
	0x53, 0x5f, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x52, 0x65, 0x61, 0x64, 0x79, 0x10, 0x01, 0x12,
	0x12, 0x0a, 0x0e, 0x50, 0x48, 0x53, 0x5f, 0x47, 0x61, 0x6d, 0x65, 0x5f, 0x52, 0x65, 0x61, 0x64,
	0x79, 0x10, 0x02, 0x12, 0x16, 0x0a, 0x12, 0x50, 0x48, 0x53, 0x5f, 0x47, 0x61, 0x6d, 0x65, 0x5f,
	0x44, 0x65, 0x61, 0x6c, 0x43, 0x61, 0x72, 0x64, 0x73, 0x10, 0x03, 0x12, 0x17, 0x0a, 0x13, 0x50,
	0x48, 0x53, 0x5f, 0x47, 0x61, 0x6d, 0x65, 0x5f, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x61,
	0x72, 0x64, 0x10, 0x04, 0x12, 0x14, 0x0a, 0x10, 0x50, 0x48, 0x53, 0x5f, 0x47, 0x61, 0x6d, 0x65,
	0x5f, 0x4f, 0x75, 0x74, 0x43, 0x61, 0x72, 0x64, 0x10, 0x05, 0x12, 0x15, 0x0a, 0x11, 0x50, 0x48,
	0x53, 0x5f, 0x47, 0x61, 0x6d, 0x65, 0x5f, 0x4e, 0x65, 0x78, 0x74, 0x55, 0x73, 0x65, 0x72, 0x10,
	0x06, 0x12, 0x11, 0x0a, 0x0d, 0x50, 0x48, 0x53, 0x5f, 0x47, 0x61, 0x6d, 0x65, 0x5f, 0x50, 0x6f,
	0x73, 0x65, 0x10, 0x07, 0x12, 0x13, 0x0a, 0x0f, 0x50, 0x48, 0x53, 0x5f, 0x47, 0x61, 0x6d, 0x65,
	0x5f, 0x53, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x10, 0x08, 0x12, 0x15, 0x0a, 0x11, 0x50, 0x48, 0x53,
	0x5f, 0x47, 0x61, 0x6d, 0x65, 0x5f, 0x43, 0x6f, 0x6e, 0x74, 0x69, 0x6e, 0x75, 0x65, 0x10, 0x09,
	0x2a, 0x78, 0x0a, 0x0c, 0x52, 0x75, 0x6d, 0x6d, 0x79, 0x32, 0x5f, 0x53, 0x5f, 0x43, 0x6d, 0x64,
	0x12, 0x11, 0x0a, 0x0d, 0x43, 0x4d, 0x44, 0x5f, 0x53, 0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49,
	0x44, 0x10, 0x00, 0x12, 0x0e, 0x0a, 0x0a, 0x43, 0x4d, 0x44, 0x5f, 0x53, 0x5f, 0x50, 0x49, 0x4e,
	0x47, 0x10, 0x01, 0x12, 0x0e, 0x0a, 0x0a, 0x43, 0x4d, 0x44, 0x5f, 0x53, 0x5f, 0x50, 0x4f, 0x4e,
	0x47, 0x10, 0x02, 0x12, 0x19, 0x0a, 0x15, 0x43, 0x4d, 0x44, 0x5f, 0x53, 0x5f, 0x4d, 0x41, 0x54,
	0x43, 0x48, 0x5f, 0x53, 0x54, 0x41, 0x52, 0x54, 0x5f, 0x52, 0x45, 0x51, 0x10, 0x03, 0x12, 0x1a,
	0x0a, 0x16, 0x43, 0x4d, 0x44, 0x5f, 0x53, 0x5f, 0x4d, 0x41, 0x54, 0x43, 0x48, 0x5f, 0x53, 0x54,
	0x41, 0x52, 0x54, 0x5f, 0x52, 0x45, 0x53, 0x50, 0x10, 0x04, 0x42, 0x16, 0x5a, 0x14, 0x2e, 0x2f,
	0x63, 0x6f, 0x6d, 0x2f, 0x63, 0x77, 0x2f, 0x63, 0x68, 0x65, 0x73, 0x73, 0x2f, 0x72, 0x75, 0x6d,
	0x6d, 0x79, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_rummy_proto_rawDescOnce sync.Once
	file_rummy_proto_rawDescData = file_rummy_proto_rawDesc
)

func file_rummy_proto_rawDescGZIP() []byte {
	file_rummy_proto_rawDescOnce.Do(func() {
		file_rummy_proto_rawDescData = protoimpl.X.CompressGZIP(file_rummy_proto_rawDescData)
	})
	return file_rummy_proto_rawDescData
}

var file_rummy_proto_enumTypes = make([]protoimpl.EnumInfo, 3)
var file_rummy_proto_msgTypes = make([]protoimpl.MessageInfo, 29)
var file_rummy_proto_goTypes = []interface{}{
	(Rummy2_C_Cmd)(0),                   // 0: com.cw.chess.rummy.Rummy2_C_Cmd
	(GamePhase)(0),                      // 1: com.cw.chess.rummy.GamePhase
	(Rummy2_S_Cmd)(0),                   // 2: com.cw.chess.rummy.Rummy2_S_Cmd
	(*ChairStatus)(nil),                 // 3: com.cw.chess.rummy.ChairStatus
	(*MSG_C_COMMON_REQ)(nil),            // 4: com.cw.chess.rummy.MSG_C_COMMON_REQ
	(*MSG_C_COMMON_RESP)(nil),           // 5: com.cw.chess.rummy.MSG_C_COMMON_RESP
	(*MSG_C_GET_TABLE_STATUS_RESP)(nil), // 6: com.cw.chess.rummy.MSG_C_GET_TABLE_STATUS_RESP
	(*MSG_C_GAME_READY_3_RESP)(nil),     // 7: com.cw.chess.rummy.MSG_C_GAME_READY_3_RESP
	(*MSG_C_GAME_DEALCARDS_RESP)(nil),   // 8: com.cw.chess.rummy.MSG_C_GAME_DEALCARDS_RESP
	(*MSG_C_GAME_CARDS_RESET_RESP)(nil), // 9: com.cw.chess.rummy.MSG_C_GAME_CARDS_RESET_RESP
	(*MSG_C_GAME_NOTICE_RESP)(nil),      // 10: com.cw.chess.rummy.MSG_C_GAME_NOTICE_RESP
	(*MSG_C_GAME_USER_CHOICE_REQ)(nil),  // 11: com.cw.chess.rummy.MSG_C_GAME_USER_CHOICE_REQ
	(*PokerGroup)(nil),                  // 12: com.cw.chess.rummy.PokerGroup
	(*MSG_C_GAME_USER_CHOICE_RESP)(nil), // 13: com.cw.chess.rummy.MSG_C_GAME_USER_CHOICE_RESP
	(*MSG_C_GAME_USER_OUT_REQ)(nil),     // 14: com.cw.chess.rummy.MSG_C_GAME_USER_OUT_REQ
	(*MSG_C_GAME_USER_OUT_RESP)(nil),    // 15: com.cw.chess.rummy.MSG_C_GAME_USER_OUT_RESP
	(*MSG_C_GAME_AI_SCORE_RESP)(nil),    // 16: com.cw.chess.rummy.MSG_C_GAME_AI_SCORE_RESP
	(*MSG_C_GAME_DROP_RESP)(nil),        // 17: com.cw.chess.rummy.MSG_C_GAME_DROP_RESP
	(*UserSettle)(nil),                  // 18: com.cw.chess.rummy.UserSettle
	(*MSG_C_GAME_SETTLE_RESP)(nil),      // 19: com.cw.chess.rummy.MSG_C_GAME_SETTLE_RESP
	(*MSG_C_GAME_CONTINUE_REQ)(nil),     // 20: com.cw.chess.rummy.MSG_C_GAME_CONTINUE_REQ
	(*MSG_C_GAME_CONTINUE_RESP)(nil),    // 21: com.cw.chess.rummy.MSG_C_GAME_CONTINUE_RESP
	(*MSG_C_GAME_WIN_REQ)(nil),          // 22: com.cw.chess.rummy.MSG_C_GAME_WIN_REQ
	(*MSG_C_GAME_WIN_RESP)(nil),         // 23: com.cw.chess.rummy.MSG_C_GAME_WIN_RESP
	(*MSG_C_GAME_POSE_REQ)(nil),         // 24: com.cw.chess.rummy.MSG_C_GAME_POSE_REQ
	(*MSG_C_GAME_POSE_RESP)(nil),        // 25: com.cw.chess.rummy.MSG_C_GAME_POSE_RESP
	(*MSG_C_GAME_QUIT_SCORE_RESP)(nil),  // 26: com.cw.chess.rummy.MSG_C_GAME_QUIT_SCORE_RESP
	(*MSG_C_CHAT_REQ)(nil),              // 27: com.cw.chess.rummy.MSG_C_CHAT_REQ
	(*MSG_C_CHAT_RESP)(nil),             // 28: com.cw.chess.rummy.MSG_C_CHAT_RESP
	(*MSG_C_MATCH_FINISH_RESP)(nil),     // 29: com.cw.chess.rummy.MSG_C_MATCH_FINISH_RESP
	(*GameStartRequest)(nil),            // 30: com.cw.chess.rummy.GameStartRequest
	(*GameStartResponse)(nil),           // 31: com.cw.chess.rummy.GameStartResponse
	(*platform.GameUser)(nil),           // 32: com.cw.chess.platform.GameUser
}
var file_rummy_proto_depIdxs = []int32{
	32, // 0: com.cw.chess.rummy.ChairStatus.user:type_name -> com.cw.chess.platform.GameUser
	1,  // 1: com.cw.chess.rummy.MSG_C_GET_TABLE_STATUS_RESP.game_phase:type_name -> com.cw.chess.rummy.GamePhase
	3,  // 2: com.cw.chess.rummy.MSG_C_GET_TABLE_STATUS_RESP.charis:type_name -> com.cw.chess.rummy.ChairStatus
	3,  // 3: com.cw.chess.rummy.MSG_C_GAME_DEALCARDS_RESP.charis:type_name -> com.cw.chess.rummy.ChairStatus
	12, // 4: com.cw.chess.rummy.MSG_C_GAME_USER_CHOICE_RESP.userGroups:type_name -> com.cw.chess.rummy.PokerGroup
	12, // 5: com.cw.chess.rummy.MSG_C_GAME_USER_OUT_RESP.userGroups:type_name -> com.cw.chess.rummy.PokerGroup
	12, // 6: com.cw.chess.rummy.MSG_C_GAME_AI_SCORE_RESP.userGroups:type_name -> com.cw.chess.rummy.PokerGroup
	12, // 7: com.cw.chess.rummy.UserSettle.user_groups:type_name -> com.cw.chess.rummy.PokerGroup
	18, // 8: com.cw.chess.rummy.MSG_C_GAME_SETTLE_RESP.user_settle:type_name -> com.cw.chess.rummy.UserSettle
	12, // 9: com.cw.chess.rummy.MSG_C_GAME_WIN_REQ.userGroups:type_name -> com.cw.chess.rummy.PokerGroup
	12, // 10: com.cw.chess.rummy.MSG_C_GAME_WIN_RESP.userGroups:type_name -> com.cw.chess.rummy.PokerGroup
	12, // 11: com.cw.chess.rummy.MSG_C_GAME_POSE_REQ.userGroups:type_name -> com.cw.chess.rummy.PokerGroup
	12, // 12: com.cw.chess.rummy.MSG_C_GAME_POSE_RESP.userGroups:type_name -> com.cw.chess.rummy.PokerGroup
	32, // 13: com.cw.chess.rummy.GameStartRequest.users:type_name -> com.cw.chess.platform.GameUser
	14, // [14:14] is the sub-list for method output_type
	14, // [14:14] is the sub-list for method input_type
	14, // [14:14] is the sub-list for extension type_name
	14, // [14:14] is the sub-list for extension extendee
	0,  // [0:14] is the sub-list for field type_name
}

func init() { file_rummy_proto_init() }
func file_rummy_proto_init() {
	if File_rummy_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_rummy_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChairStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rummy_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MSG_C_COMMON_REQ); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rummy_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MSG_C_COMMON_RESP); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rummy_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MSG_C_GET_TABLE_STATUS_RESP); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rummy_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MSG_C_GAME_READY_3_RESP); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rummy_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MSG_C_GAME_DEALCARDS_RESP); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rummy_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MSG_C_GAME_CARDS_RESET_RESP); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rummy_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MSG_C_GAME_NOTICE_RESP); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rummy_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MSG_C_GAME_USER_CHOICE_REQ); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rummy_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PokerGroup); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rummy_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MSG_C_GAME_USER_CHOICE_RESP); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rummy_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MSG_C_GAME_USER_OUT_REQ); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rummy_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MSG_C_GAME_USER_OUT_RESP); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rummy_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MSG_C_GAME_AI_SCORE_RESP); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rummy_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MSG_C_GAME_DROP_RESP); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rummy_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserSettle); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rummy_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MSG_C_GAME_SETTLE_RESP); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rummy_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MSG_C_GAME_CONTINUE_REQ); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rummy_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MSG_C_GAME_CONTINUE_RESP); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rummy_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MSG_C_GAME_WIN_REQ); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rummy_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MSG_C_GAME_WIN_RESP); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rummy_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MSG_C_GAME_POSE_REQ); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rummy_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MSG_C_GAME_POSE_RESP); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rummy_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MSG_C_GAME_QUIT_SCORE_RESP); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rummy_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MSG_C_CHAT_REQ); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rummy_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MSG_C_CHAT_RESP); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rummy_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MSG_C_MATCH_FINISH_RESP); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rummy_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GameStartRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rummy_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GameStartResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_rummy_proto_rawDesc,
			NumEnums:      3,
			NumMessages:   29,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_rummy_proto_goTypes,
		DependencyIndexes: file_rummy_proto_depIdxs,
		EnumInfos:         file_rummy_proto_enumTypes,
		MessageInfos:      file_rummy_proto_msgTypes,
	}.Build()
	File_rummy_proto = out.File
	file_rummy_proto_rawDesc = nil
	file_rummy_proto_goTypes = nil
	file_rummy_proto_depIdxs = nil
}
