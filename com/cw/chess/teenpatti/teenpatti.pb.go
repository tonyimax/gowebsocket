// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.26.0
// 	protoc        v3.12.4
// source: teenpatti.proto

//尽量不要同时包含多个业务逻辑文件，例如同时包含rummy和teenpatti，可能有些命名会同名，确实有这种情况用命名空间区别

package teenpatti

import (
	platform "./com/cw/chess/platform"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

//**********************************Teenpatti游戏服务端和服务端通信定义开始********************************
type Teenpatti_S_Cmd int32

const (
	Teenpatti_S_Cmd_CMD_S_INVALID          Teenpatti_S_Cmd = 0
	Teenpatti_S_Cmd_CMD_S_PING             Teenpatti_S_Cmd = 1
	Teenpatti_S_Cmd_CMD_S_PONG             Teenpatti_S_Cmd = 2
	Teenpatti_S_Cmd_CMD_S_MATCH_START_REQ  Teenpatti_S_Cmd = 3 // 匹配成功通知rummy服务准备开始：TeenpattiStartRequest
	Teenpatti_S_Cmd_CMD_S_MATCH_START_RESP Teenpatti_S_Cmd = 4 // 匹配成功通知rummy服务准备开始返回：TeenpattiStartResponse
)

// Enum value maps for Teenpatti_S_Cmd.
var (
	Teenpatti_S_Cmd_name = map[int32]string{
		0: "CMD_S_INVALID",
		1: "CMD_S_PING",
		2: "CMD_S_PONG",
		3: "CMD_S_MATCH_START_REQ",
		4: "CMD_S_MATCH_START_RESP",
	}
	Teenpatti_S_Cmd_value = map[string]int32{
		"CMD_S_INVALID":          0,
		"CMD_S_PING":             1,
		"CMD_S_PONG":             2,
		"CMD_S_MATCH_START_REQ":  3,
		"CMD_S_MATCH_START_RESP": 4,
	}
)

func (x Teenpatti_S_Cmd) Enum() *Teenpatti_S_Cmd {
	p := new(Teenpatti_S_Cmd)
	*p = x
	return p
}

func (x Teenpatti_S_Cmd) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Teenpatti_S_Cmd) Descriptor() protoreflect.EnumDescriptor {
	return file_teenpatti_proto_enumTypes[0].Descriptor()
}

func (Teenpatti_S_Cmd) Type() protoreflect.EnumType {
	return &file_teenpatti_proto_enumTypes[0]
}

func (x Teenpatti_S_Cmd) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Teenpatti_S_Cmd.Descriptor instead.
func (Teenpatti_S_Cmd) EnumDescriptor() ([]byte, []int) {
	return file_teenpatti_proto_rawDescGZIP(), []int{0}
}

type TeenpattiCmd int32

const (
	TeenpattiCmd_CMD_C_INVALID               TeenpattiCmd = 0
	TeenpattiCmd_CMD_C_GET_TABLE_STATUS_REQ  TeenpattiCmd = 1 // 请求获取游戏数据，此协议应该在客户端资源加载完成后请求（通常为刚进游戏，比如匹配成功/断线重连）MSG_C_COMMON_REQ
	TeenpattiCmd_CMD_C_GET_TABLE_STATUS_RESP TeenpattiCmd = 2 // 回复：MSG_C_GET_TABLE_STATUS_RESP
	TeenpattiCmd_CMD_C_MATCH_READY_REQ       TeenpattiCmd = 3 // 通过匹配后，客户端告诉服务器资源已经加载好了（所有人全部加载完成，才会正式开始）：MSG_C_COMMON_REQ
	TeenpattiCmd_CMD_C_MATCH_READY_RESP      TeenpattiCmd = 4 // 返回请求，MSG_C_COMMON_RESP
	// 以下逻辑会在牌局之间循环
	TeenpattiCmd_CMD_C_GAME_READY_3_REQ           TeenpattiCmd = 5  // 无意义
	TeenpattiCmd_CMD_C_GAME_READY_3_RESP          TeenpattiCmd = 6  // 通知客户端N秒后开始：MSG_C_GAME_READY_3_RESP
	TeenpattiCmd_CMD_C_GAME_READY_COMFIRM_REQ     TeenpattiCmd = 7  // 客户端倒数结束后，通知服务器，（如果用户在倒数3秒内手动退出或者其他原因退出，游戏将取消）（服务器这个状态会维持5秒）MSG_C_COMMON_REQ
	TeenpattiCmd_CMD_C_GAME_READY_COMFIRM_RESP    TeenpattiCmd = 8  // 无意义（不返回了，如果客户端需要，补一个）
	TeenpattiCmd_CMD_C_GAME_DEALCARDS_REQ         TeenpattiCmd = 9  // 无意义
	TeenpattiCmd_CMD_C_GAME_DEALCARDS_RESP        TeenpattiCmd = 10 // 发牌：MSG_C_GAME_DEALCARDS_RESP
	TeenpattiCmd_CMD_C_GAME_NOTICE_REQ            TeenpattiCmd = 11 // 无意义
	TeenpattiCmd_CMD_C_GAME_NOTICE_RESP           TeenpattiCmd = 12 // 提示用户进行操作：MSG_C_GAME_NOTICE_RESP
	TeenpattiCmd_CMD_C_GAME_BET_REQ               TeenpattiCmd = 13 // 用户下注请求：MSG_C_GAME_BET_REQ
	TeenpattiCmd_CMD_C_GAME_BET_RESP              TeenpattiCmd = 14 // 用户下注广播：MSG_C_GAME_BET_RESP
	TeenpattiCmd_CMD_C_GAME_SEE_REQ               TeenpattiCmd = 15 // 用户请求看牌：MSG_C_COMMON_REQ，收到此协议后，除了返回MSG_C_GAME_SEE_RESP，如果是在PHS_Gaming_Beting状态，可能会重新发送MSG_C_GAME_NOTICE_RESP
	TeenpattiCmd_CMD_C_GAME_SEE_RESP              TeenpattiCmd = 16 // 用户请求看牌回复：MSG_C_GAME_SEE_RESP
	TeenpattiCmd_CMD_C_GAME_SHOW_REQ              TeenpattiCmd = 17 // 用户show：MSG_C_COMMON_REQ
	TeenpattiCmd_CMD_C_GAME_SHOW_RESP             TeenpattiCmd = 18 // 用户show回复：MSG_C_GAME_SHOW_RESP
	TeenpattiCmd_CMD_C_GAME_SIDE_SHOW_REQ         TeenpattiCmd = 19 // 用户sideshow：MSG_C_COMMON_REQ
	TeenpattiCmd_CMD_C_GAME_SIDE_SHOW_RESP        TeenpattiCmd = 20 // 用户show回复：MSG_C_GAME_SIDE_SHOW_RESP
	TeenpattiCmd_CMD_C_GAME_SIDE_SHOW_ANSWER_REQ  TeenpattiCmd = 21 // 用户sideshow：MSG_C_GAME_SIDE_SHOW_ANSWER_REQ
	TeenpattiCmd_CMD_C_GAME_SIDE_SHOW_ANSWER_RESP TeenpattiCmd = 22 // 用户show回复：MSG_C_GAME_SIDE_SHOW_ANSWER_RESP
	TeenpattiCmd_CMD_C_GAME_SETTLE_REQ            TeenpattiCmd = 23 //无意义
	TeenpattiCmd_CMD_C_GAME_SETTLE_RESP           TeenpattiCmd = 24 // 结算：MSG_C_GAME_SETTLE_RESP
	TeenpattiCmd_CMD_C_GAME_CONTINUE_REQ          TeenpattiCmd = 25 // 用户确认继续：MSG_C_COMMON_REQ
	TeenpattiCmd_CMD_C_GAME_CONTINUE_RESP         TeenpattiCmd = 26 // 无意义，后续会循环至PHS_Game_Ready（用户会从收到CMD_C_GAME_READY_3_RESP开始）
	// 以下为补充逻辑
	TeenpattiCmd_CMD_C_USER_CHAIR_REQ    TeenpattiCmd = 60  // 用户离开发这个
	TeenpattiCmd_CMD_C_USER_CHAIR_RESP   TeenpattiCmd = 61  // 通知客户端某个座位的人发生了变化：MSG_C_USER_CHAIR_RESP
	TeenpattiCmd_CMD_C_CHAT_REQ          TeenpattiCmd = 62  // 用户请求聊天：MSG_C_CHAT_REQ
	TeenpattiCmd_CMD_C_CHAT_RESP         TeenpattiCmd = 63  // 用户请求聊天回复：MSG_C_CHAT_RESP
	TeenpattiCmd_CMD_C_MATCH_FINISH_REQ  TeenpattiCmd = 100 // 无意义
	TeenpattiCmd_CMD_C_MATCH_FINISH_RESP TeenpattiCmd = 101 // 桌子被解散：MSG_C_MATCH_FINISH_RESP
)

// Enum value maps for TeenpattiCmd.
var (
	TeenpattiCmd_name = map[int32]string{
		0:   "CMD_C_INVALID",
		1:   "CMD_C_GET_TABLE_STATUS_REQ",
		2:   "CMD_C_GET_TABLE_STATUS_RESP",
		3:   "CMD_C_MATCH_READY_REQ",
		4:   "CMD_C_MATCH_READY_RESP",
		5:   "CMD_C_GAME_READY_3_REQ",
		6:   "CMD_C_GAME_READY_3_RESP",
		7:   "CMD_C_GAME_READY_COMFIRM_REQ",
		8:   "CMD_C_GAME_READY_COMFIRM_RESP",
		9:   "CMD_C_GAME_DEALCARDS_REQ",
		10:  "CMD_C_GAME_DEALCARDS_RESP",
		11:  "CMD_C_GAME_NOTICE_REQ",
		12:  "CMD_C_GAME_NOTICE_RESP",
		13:  "CMD_C_GAME_BET_REQ",
		14:  "CMD_C_GAME_BET_RESP",
		15:  "CMD_C_GAME_SEE_REQ",
		16:  "CMD_C_GAME_SEE_RESP",
		17:  "CMD_C_GAME_SHOW_REQ",
		18:  "CMD_C_GAME_SHOW_RESP",
		19:  "CMD_C_GAME_SIDE_SHOW_REQ",
		20:  "CMD_C_GAME_SIDE_SHOW_RESP",
		21:  "CMD_C_GAME_SIDE_SHOW_ANSWER_REQ",
		22:  "CMD_C_GAME_SIDE_SHOW_ANSWER_RESP",
		23:  "CMD_C_GAME_SETTLE_REQ",
		24:  "CMD_C_GAME_SETTLE_RESP",
		25:  "CMD_C_GAME_CONTINUE_REQ",
		26:  "CMD_C_GAME_CONTINUE_RESP",
		60:  "CMD_C_USER_CHAIR_REQ",
		61:  "CMD_C_USER_CHAIR_RESP",
		62:  "CMD_C_CHAT_REQ",
		63:  "CMD_C_CHAT_RESP",
		100: "CMD_C_MATCH_FINISH_REQ",
		101: "CMD_C_MATCH_FINISH_RESP",
	}
	TeenpattiCmd_value = map[string]int32{
		"CMD_C_INVALID":                    0,
		"CMD_C_GET_TABLE_STATUS_REQ":       1,
		"CMD_C_GET_TABLE_STATUS_RESP":      2,
		"CMD_C_MATCH_READY_REQ":            3,
		"CMD_C_MATCH_READY_RESP":           4,
		"CMD_C_GAME_READY_3_REQ":           5,
		"CMD_C_GAME_READY_3_RESP":          6,
		"CMD_C_GAME_READY_COMFIRM_REQ":     7,
		"CMD_C_GAME_READY_COMFIRM_RESP":    8,
		"CMD_C_GAME_DEALCARDS_REQ":         9,
		"CMD_C_GAME_DEALCARDS_RESP":        10,
		"CMD_C_GAME_NOTICE_REQ":            11,
		"CMD_C_GAME_NOTICE_RESP":           12,
		"CMD_C_GAME_BET_REQ":               13,
		"CMD_C_GAME_BET_RESP":              14,
		"CMD_C_GAME_SEE_REQ":               15,
		"CMD_C_GAME_SEE_RESP":              16,
		"CMD_C_GAME_SHOW_REQ":              17,
		"CMD_C_GAME_SHOW_RESP":             18,
		"CMD_C_GAME_SIDE_SHOW_REQ":         19,
		"CMD_C_GAME_SIDE_SHOW_RESP":        20,
		"CMD_C_GAME_SIDE_SHOW_ANSWER_REQ":  21,
		"CMD_C_GAME_SIDE_SHOW_ANSWER_RESP": 22,
		"CMD_C_GAME_SETTLE_REQ":            23,
		"CMD_C_GAME_SETTLE_RESP":           24,
		"CMD_C_GAME_CONTINUE_REQ":          25,
		"CMD_C_GAME_CONTINUE_RESP":         26,
		"CMD_C_USER_CHAIR_REQ":             60,
		"CMD_C_USER_CHAIR_RESP":            61,
		"CMD_C_CHAT_REQ":                   62,
		"CMD_C_CHAT_RESP":                  63,
		"CMD_C_MATCH_FINISH_REQ":           100,
		"CMD_C_MATCH_FINISH_RESP":          101,
	}
)

func (x TeenpattiCmd) Enum() *TeenpattiCmd {
	p := new(TeenpattiCmd)
	*p = x
	return p
}

func (x TeenpattiCmd) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TeenpattiCmd) Descriptor() protoreflect.EnumDescriptor {
	return file_teenpatti_proto_enumTypes[1].Descriptor()
}

func (TeenpattiCmd) Type() protoreflect.EnumType {
	return &file_teenpatti_proto_enumTypes[1]
}

func (x TeenpattiCmd) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TeenpattiCmd.Descriptor instead.
func (TeenpattiCmd) EnumDescriptor() ([]byte, []int) {
	return file_teenpatti_proto_rawDescGZIP(), []int{1}
}

// 定义游戏阶段
type GamePhase int32

const (
	GamePhase_PHS_INVALID         GamePhase = 0 // 无效
	GamePhase_PHS_Match_Ready     GamePhase = 1 // 等待资源加载：服务器10秒等待，否则解散桌子
	GamePhase_PHS_Game_Ready      GamePhase = 2 // 等待用户确认：客户端3秒倒数，服务器5秒等待，否则会把没有准备的用户踢出
	GamePhase_PHS_Game_DealCards  GamePhase = 3 // 发牌
	GamePhase_PHS_Gaming_Notice   GamePhase = 4 // 提示用户进行操作
	GamePhase_PHS_Gaming_Beting   GamePhase = 5 // 用户进行操作中...
	GamePhase_PHS_Gaming_SideShow GamePhase = 6 // 用户sideshow过程中...
	GamePhase_PHS_Game_Settle     GamePhase = 7 // 结算
	GamePhase_PHS_Game_Continue   GamePhase = 8 // 用户确认继续阶段：服务器5秒等待，否则会把没有准备的用户踢出
)

// Enum value maps for GamePhase.
var (
	GamePhase_name = map[int32]string{
		0: "PHS_INVALID",
		1: "PHS_Match_Ready",
		2: "PHS_Game_Ready",
		3: "PHS_Game_DealCards",
		4: "PHS_Gaming_Notice",
		5: "PHS_Gaming_Beting",
		6: "PHS_Gaming_SideShow",
		7: "PHS_Game_Settle",
		8: "PHS_Game_Continue",
	}
	GamePhase_value = map[string]int32{
		"PHS_INVALID":         0,
		"PHS_Match_Ready":     1,
		"PHS_Game_Ready":      2,
		"PHS_Game_DealCards":  3,
		"PHS_Gaming_Notice":   4,
		"PHS_Gaming_Beting":   5,
		"PHS_Gaming_SideShow": 6,
		"PHS_Game_Settle":     7,
		"PHS_Game_Continue":   8,
	}
)

func (x GamePhase) Enum() *GamePhase {
	p := new(GamePhase)
	*p = x
	return p
}

func (x GamePhase) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (GamePhase) Descriptor() protoreflect.EnumDescriptor {
	return file_teenpatti_proto_enumTypes[2].Descriptor()
}

func (GamePhase) Type() protoreflect.EnumType {
	return &file_teenpatti_proto_enumTypes[2]
}

func (x GamePhase) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use GamePhase.Descriptor instead.
func (GamePhase) EnumDescriptor() ([]byte, []int) {
	return file_teenpatti_proto_rawDescGZIP(), []int{2}
}

// 牌型定义
type PokersType int32

const (
	PokersType_PT_High          PokersType = 0 // 高牌
	PokersType_PT_Pair          PokersType = 1 // 对子
	PokersType_PT_Colour        PokersType = 2 // 同花
	PokersType_PT_Sequence      PokersType = 3 // 顺子
	PokersType_PT_Pure_Sequence PokersType = 4 // 同花顺
	PokersType_PT_Set           PokersType = 5 // set
)

// Enum value maps for PokersType.
var (
	PokersType_name = map[int32]string{
		0: "PT_High",
		1: "PT_Pair",
		2: "PT_Colour",
		3: "PT_Sequence",
		4: "PT_Pure_Sequence",
		5: "PT_Set",
	}
	PokersType_value = map[string]int32{
		"PT_High":          0,
		"PT_Pair":          1,
		"PT_Colour":        2,
		"PT_Sequence":      3,
		"PT_Pure_Sequence": 4,
		"PT_Set":           5,
	}
)

func (x PokersType) Enum() *PokersType {
	p := new(PokersType)
	*p = x
	return p
}

func (x PokersType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PokersType) Descriptor() protoreflect.EnumDescriptor {
	return file_teenpatti_proto_enumTypes[3].Descriptor()
}

func (PokersType) Type() protoreflect.EnumType {
	return &file_teenpatti_proto_enumTypes[3]
}

func (x PokersType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PokersType.Descriptor instead.
func (PokersType) EnumDescriptor() ([]byte, []int) {
	return file_teenpatti_proto_rawDescGZIP(), []int{3}
}

// 这个是匹配服务器告诉teenpatti服务器的请求
type TeenpattiStartRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Level uint32               `protobuf:"varint,1,opt,name=level,proto3" json:"level,omitempty"`
	Users []*platform.GameUser `protobuf:"bytes,2,rep,name=users,proto3" json:"users,omitempty"`
	Rbc   uint32               `protobuf:"varint,3,opt,name=rbc,proto3" json:"rbc,omitempty"` // 是否启用作弊模式：0不启动；1、2启动
}

func (x *TeenpattiStartRequest) Reset() {
	*x = TeenpattiStartRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_teenpatti_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TeenpattiStartRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TeenpattiStartRequest) ProtoMessage() {}

func (x *TeenpattiStartRequest) ProtoReflect() protoreflect.Message {
	mi := &file_teenpatti_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TeenpattiStartRequest.ProtoReflect.Descriptor instead.
func (*TeenpattiStartRequest) Descriptor() ([]byte, []int) {
	return file_teenpatti_proto_rawDescGZIP(), []int{0}
}

func (x *TeenpattiStartRequest) GetLevel() uint32 {
	if x != nil {
		return x.Level
	}
	return 0
}

func (x *TeenpattiStartRequest) GetUsers() []*platform.GameUser {
	if x != nil {
		return x.Users
	}
	return nil
}

func (x *TeenpattiStartRequest) GetRbc() uint32 {
	if x != nil {
		return x.Rbc
	}
	return 0
}

// 这个是匹配服务器收到teenpatti服务器的回复
type TeenpattiStartResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result  uint32 `protobuf:"varint,1,opt,name=result,proto3" json:"result,omitempty"`                  // 0：成功；
	TableId uint32 `protobuf:"varint,2,opt,name=table_id,json=tableId,proto3" json:"table_id,omitempty"` // table_id：因为一个服务上有很多个桌子以服务多个用户，这里分配好后就告诉匹配服务，匹配服务再把这个tableid和本服务的id告诉客户端
}

func (x *TeenpattiStartResponse) Reset() {
	*x = TeenpattiStartResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_teenpatti_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TeenpattiStartResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TeenpattiStartResponse) ProtoMessage() {}

func (x *TeenpattiStartResponse) ProtoReflect() protoreflect.Message {
	mi := &file_teenpatti_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TeenpattiStartResponse.ProtoReflect.Descriptor instead.
func (*TeenpattiStartResponse) Descriptor() ([]byte, []int) {
	return file_teenpatti_proto_rawDescGZIP(), []int{1}
}

func (x *TeenpattiStartResponse) GetResult() uint32 {
	if x != nil {
		return x.Result
	}
	return 0
}

func (x *TeenpattiStartResponse) GetTableId() uint32 {
	if x != nil {
		return x.TableId
	}
	return 0
}

// 注：后续所有协议全部采用“tableid+子结构”形式，包括请求和回复
type TableData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TableId uint32 `protobuf:"varint,1,opt,name=table_id,json=tableId,proto3" json:"table_id,omitempty"`
	Data    []byte `protobuf:"bytes,2,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *TableData) Reset() {
	*x = TableData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_teenpatti_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TableData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TableData) ProtoMessage() {}

func (x *TableData) ProtoReflect() protoreflect.Message {
	mi := &file_teenpatti_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TableData.ProtoReflect.Descriptor instead.
func (*TableData) Descriptor() ([]byte, []int) {
	return file_teenpatti_proto_rawDescGZIP(), []int{2}
}

func (x *TableData) GetTableId() uint32 {
	if x != nil {
		return x.TableId
	}
	return 0
}

func (x *TableData) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

// 通用客户端请求
type MSG_C_COMMON_REQ struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *MSG_C_COMMON_REQ) Reset() {
	*x = MSG_C_COMMON_REQ{}
	if protoimpl.UnsafeEnabled {
		mi := &file_teenpatti_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MSG_C_COMMON_REQ) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MSG_C_COMMON_REQ) ProtoMessage() {}

func (x *MSG_C_COMMON_REQ) ProtoReflect() protoreflect.Message {
	mi := &file_teenpatti_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MSG_C_COMMON_REQ.ProtoReflect.Descriptor instead.
func (*MSG_C_COMMON_REQ) Descriptor() ([]byte, []int) {
	return file_teenpatti_proto_rawDescGZIP(), []int{3}
}

// 通用服务端返回
type MSG_C_COMMON_RESP struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result uint32 `protobuf:"varint,2,opt,name=result,proto3" json:"result,omitempty"` // 0：正常
}

func (x *MSG_C_COMMON_RESP) Reset() {
	*x = MSG_C_COMMON_RESP{}
	if protoimpl.UnsafeEnabled {
		mi := &file_teenpatti_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MSG_C_COMMON_RESP) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MSG_C_COMMON_RESP) ProtoMessage() {}

func (x *MSG_C_COMMON_RESP) ProtoReflect() protoreflect.Message {
	mi := &file_teenpatti_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MSG_C_COMMON_RESP.ProtoReflect.Descriptor instead.
func (*MSG_C_COMMON_RESP) Descriptor() ([]byte, []int) {
	return file_teenpatti_proto_rawDescGZIP(), []int{4}
}

func (x *MSG_C_COMMON_RESP) GetResult() uint32 {
	if x != nil {
		return x.Result
	}
	return 0
}

// 座位数据
type ChairStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BUser      uint32             `protobuf:"varint,1,opt,name=b_user,json=bUser,proto3" json:"b_user,omitempty"`                     // 此座位是否有人：0：没有人；1：有人
	BGame      uint32             `protobuf:"varint,2,opt,name=b_game,json=bGame,proto3" json:"b_game,omitempty"`                     // 此座位是否参与本局游戏：0：不参与；1：参与（不参与的情况可能是刚进入游戏，或者没有钱站起等等）
	BDrop      uint32             `protobuf:"varint,3,opt,name=b_drop,json=bDrop,proto3" json:"b_drop,omitempty"`                     // 此座位用户是否drop了：0：没有drop，正常游戏中；1：主动drop；2：超时drop；3：sideshow PK失败；4：show失败；5：达到封顶后强行结算失败
	ChairIndex uint32             `protobuf:"varint,4,opt,name=chair_index,json=chairIndex,proto3" json:"chair_index,omitempty"`      // 座位号：0/1/2/3/4/5
	Cards      []uint32           `protobuf:"varint,5,rep,packed,name=cards,proto3" json:"cards,omitempty"`                           // 座位上的牌
	PT         PokersType         `protobuf:"varint,6,opt,name=PT,proto3,enum=com.cw.chess.teenpatti.PokersType" json:"PT,omitempty"` // 牌型
	Score      uint32             `protobuf:"varint,7,opt,name=score,proto3" json:"score,omitempty"`                                  // 牌分
	User       *platform.GameUser `protobuf:"bytes,8,opt,name=user,proto3" json:"user,omitempty"`                                     // 座位上的用户
	BSee       uint32             `protobuf:"varint,9,opt,name=b_see,json=bSee,proto3" json:"b_see,omitempty"`                        // 用户是否安排：0没有看；1看牌
	Bet        uint32             `protobuf:"varint,10,opt,name=bet,proto3" json:"bet,omitempty"`                                     // 用户的当前局总计投注
	LastBet    uint32             `protobuf:"varint,11,opt,name=last_bet,json=lastBet,proto3" json:"last_bet,omitempty"`              // 用户最近一次投注
	Bet_A      uint32             `protobuf:"varint,12,opt,name=bet_A,json=betA,proto3" json:"bet_A,omitempty"`                       // 用户的当前局总计投注：来自存款账户
	Bet_B      uint32             `protobuf:"varint,13,opt,name=bet_B,json=betB,proto3" json:"bet_B,omitempty"`                       // 用户的当前局总计投注：来自可提现账户
}

func (x *ChairStatus) Reset() {
	*x = ChairStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_teenpatti_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChairStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChairStatus) ProtoMessage() {}

func (x *ChairStatus) ProtoReflect() protoreflect.Message {
	mi := &file_teenpatti_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChairStatus.ProtoReflect.Descriptor instead.
func (*ChairStatus) Descriptor() ([]byte, []int) {
	return file_teenpatti_proto_rawDescGZIP(), []int{5}
}

func (x *ChairStatus) GetBUser() uint32 {
	if x != nil {
		return x.BUser
	}
	return 0
}

func (x *ChairStatus) GetBGame() uint32 {
	if x != nil {
		return x.BGame
	}
	return 0
}

func (x *ChairStatus) GetBDrop() uint32 {
	if x != nil {
		return x.BDrop
	}
	return 0
}

func (x *ChairStatus) GetChairIndex() uint32 {
	if x != nil {
		return x.ChairIndex
	}
	return 0
}

func (x *ChairStatus) GetCards() []uint32 {
	if x != nil {
		return x.Cards
	}
	return nil
}

func (x *ChairStatus) GetPT() PokersType {
	if x != nil {
		return x.PT
	}
	return PokersType_PT_High
}

func (x *ChairStatus) GetScore() uint32 {
	if x != nil {
		return x.Score
	}
	return 0
}

func (x *ChairStatus) GetUser() *platform.GameUser {
	if x != nil {
		return x.User
	}
	return nil
}

func (x *ChairStatus) GetBSee() uint32 {
	if x != nil {
		return x.BSee
	}
	return 0
}

func (x *ChairStatus) GetBet() uint32 {
	if x != nil {
		return x.Bet
	}
	return 0
}

func (x *ChairStatus) GetLastBet() uint32 {
	if x != nil {
		return x.LastBet
	}
	return 0
}

func (x *ChairStatus) GetBet_A() uint32 {
	if x != nil {
		return x.Bet_A
	}
	return 0
}

func (x *ChairStatus) GetBet_B() uint32 {
	if x != nil {
		return x.Bet_B
	}
	return 0
}

// 桌子的全部信息
type MSG_C_GET_TABLE_STATUS_RESP struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LevelDesc         *platform.TeepattiLevelDesc `protobuf:"bytes,1,opt,name=level_desc,json=levelDesc,proto3" json:"level_desc,omitempty"`                                        // 桌子静态数据
	GamePhase         GamePhase                   `protobuf:"varint,2,opt,name=game_phase,json=gamePhase,proto3,enum=com.cw.chess.teenpatti.GamePhase" json:"game_phase,omitempty"` // 游戏进度状态
	Charis            []*ChairStatus              `protobuf:"bytes,3,rep,name=charis,proto3" json:"charis,omitempty"`                                                               // 座位属性
	SelfIndex         uint32                      `protobuf:"varint,4,opt,name=self_index,json=selfIndex,proto3" json:"self_index,omitempty"`                                       // 自己的座位
	GameID            string                      `protobuf:"bytes,5,opt,name=gameID,proto3" json:"gameID,omitempty"`                                                               // 本局牌局ID
	Dealer            uint32                      `protobuf:"varint,6,opt,name=dealer,proto3" json:"dealer,omitempty"`                                                              // 庄家位置
	TotalCurrency     uint32                      `protobuf:"varint,7,opt,name=total_currency,json=totalCurrency,proto3" json:"total_currency,omitempty"`                           // 总共下注
	CurrentRoundValue uint32                      `protobuf:"varint,8,opt,name=current_round_value,json=currentRoundValue,proto3" json:"current_round_value,omitempty"`             // 当前轮注（以盲为标准）
	CurrentRoundAct   uint32                      `protobuf:"varint,9,opt,name=current_round_act,json=currentRoundAct,proto3" json:"current_round_act,omitempty"`                   // 当前轮次的实际叫分人
}

func (x *MSG_C_GET_TABLE_STATUS_RESP) Reset() {
	*x = MSG_C_GET_TABLE_STATUS_RESP{}
	if protoimpl.UnsafeEnabled {
		mi := &file_teenpatti_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MSG_C_GET_TABLE_STATUS_RESP) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MSG_C_GET_TABLE_STATUS_RESP) ProtoMessage() {}

func (x *MSG_C_GET_TABLE_STATUS_RESP) ProtoReflect() protoreflect.Message {
	mi := &file_teenpatti_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MSG_C_GET_TABLE_STATUS_RESP.ProtoReflect.Descriptor instead.
func (*MSG_C_GET_TABLE_STATUS_RESP) Descriptor() ([]byte, []int) {
	return file_teenpatti_proto_rawDescGZIP(), []int{6}
}

func (x *MSG_C_GET_TABLE_STATUS_RESP) GetLevelDesc() *platform.TeepattiLevelDesc {
	if x != nil {
		return x.LevelDesc
	}
	return nil
}

func (x *MSG_C_GET_TABLE_STATUS_RESP) GetGamePhase() GamePhase {
	if x != nil {
		return x.GamePhase
	}
	return GamePhase_PHS_INVALID
}

func (x *MSG_C_GET_TABLE_STATUS_RESP) GetCharis() []*ChairStatus {
	if x != nil {
		return x.Charis
	}
	return nil
}

func (x *MSG_C_GET_TABLE_STATUS_RESP) GetSelfIndex() uint32 {
	if x != nil {
		return x.SelfIndex
	}
	return 0
}

func (x *MSG_C_GET_TABLE_STATUS_RESP) GetGameID() string {
	if x != nil {
		return x.GameID
	}
	return ""
}

func (x *MSG_C_GET_TABLE_STATUS_RESP) GetDealer() uint32 {
	if x != nil {
		return x.Dealer
	}
	return 0
}

func (x *MSG_C_GET_TABLE_STATUS_RESP) GetTotalCurrency() uint32 {
	if x != nil {
		return x.TotalCurrency
	}
	return 0
}

func (x *MSG_C_GET_TABLE_STATUS_RESP) GetCurrentRoundValue() uint32 {
	if x != nil {
		return x.CurrentRoundValue
	}
	return 0
}

func (x *MSG_C_GET_TABLE_STATUS_RESP) GetCurrentRoundAct() uint32 {
	if x != nil {
		return x.CurrentRoundAct
	}
	return 0
}

type MSG_C_GAME_READY_3_RESP struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Times uint32 `protobuf:"varint,1,opt,name=times,proto3" json:"times,omitempty"` //（对于teenpatti来说，业务不需要倒计时，但是技术需要，所以当客户端收到此协议，马上就回复确认包CMD_C_GAME_READY_COMFIRM_REQ，这个时间过后，如果服务器没有收到，会认为用户掉线了）
}

func (x *MSG_C_GAME_READY_3_RESP) Reset() {
	*x = MSG_C_GAME_READY_3_RESP{}
	if protoimpl.UnsafeEnabled {
		mi := &file_teenpatti_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MSG_C_GAME_READY_3_RESP) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MSG_C_GAME_READY_3_RESP) ProtoMessage() {}

func (x *MSG_C_GAME_READY_3_RESP) ProtoReflect() protoreflect.Message {
	mi := &file_teenpatti_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MSG_C_GAME_READY_3_RESP.ProtoReflect.Descriptor instead.
func (*MSG_C_GAME_READY_3_RESP) Descriptor() ([]byte, []int) {
	return file_teenpatti_proto_rawDescGZIP(), []int{7}
}

func (x *MSG_C_GAME_READY_3_RESP) GetTimes() uint32 {
	if x != nil {
		return x.Times
	}
	return 0
}

// 通知游戏开始
type MSG_C_GAME_DEALCARDS_RESP struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TableId uint32         `protobuf:"varint,1,opt,name=table_id,json=tableId,proto3" json:"table_id,omitempty"`
	GameID  string         `protobuf:"bytes,2,opt,name=gameID,proto3" json:"gameID,omitempty"`  // 本局牌局ID
	Charis  []*ChairStatus `protobuf:"bytes,3,rep,name=charis,proto3" json:"charis,omitempty"`  // 座位上参与的人数，如果是2人局，则会有2个数据，如果是6人局，有6个数据
	Dealer  uint32         `protobuf:"varint,4,opt,name=dealer,proto3" json:"dealer,omitempty"` // 本局dealer（庄家）
}

func (x *MSG_C_GAME_DEALCARDS_RESP) Reset() {
	*x = MSG_C_GAME_DEALCARDS_RESP{}
	if protoimpl.UnsafeEnabled {
		mi := &file_teenpatti_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MSG_C_GAME_DEALCARDS_RESP) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MSG_C_GAME_DEALCARDS_RESP) ProtoMessage() {}

func (x *MSG_C_GAME_DEALCARDS_RESP) ProtoReflect() protoreflect.Message {
	mi := &file_teenpatti_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MSG_C_GAME_DEALCARDS_RESP.ProtoReflect.Descriptor instead.
func (*MSG_C_GAME_DEALCARDS_RESP) Descriptor() ([]byte, []int) {
	return file_teenpatti_proto_rawDescGZIP(), []int{8}
}

func (x *MSG_C_GAME_DEALCARDS_RESP) GetTableId() uint32 {
	if x != nil {
		return x.TableId
	}
	return 0
}

func (x *MSG_C_GAME_DEALCARDS_RESP) GetGameID() string {
	if x != nil {
		return x.GameID
	}
	return ""
}

func (x *MSG_C_GAME_DEALCARDS_RESP) GetCharis() []*ChairStatus {
	if x != nil {
		return x.Charis
	}
	return nil
}

func (x *MSG_C_GAME_DEALCARDS_RESP) GetDealer() uint32 {
	if x != nil {
		return x.Dealer
	}
	return 0
}

// 操作提示（注：此逻辑行为独立，看牌行为如果是操作人或者上家，将重新收到此协议，此时需要更新操作状态，但是不需要更新操作时间）
type MSG_C_GAME_NOTICE_RESP struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChairIndex        uint32 `protobuf:"varint,1,opt,name=chair_index,json=chairIndex,proto3" json:"chair_index,omitempty"`                        // 座位编号
	BSelf             uint32 `protobuf:"varint,2,opt,name=b_self,json=bSelf,proto3" json:"b_self,omitempty"`                                       // 是否是本人  0不是  1是
	UserCurrency      uint32 `protobuf:"varint,3,opt,name=user_currency,json=userCurrency,proto3" json:"user_currency,omitempty"`                  // 当前操作人的货币
	CurrentRoundValue uint32 `protobuf:"varint,4,opt,name=current_round_value,json=currentRoundValue,proto3" json:"current_round_value,omitempty"` // 当前轮注（轮注标准以盲为依据，注：策划文档是以看牌为依据，例如我们用1/2/4，策划用0.5/1/2）
	BSee              uint32 `protobuf:"varint,5,opt,name=b_see,json=bSee,proto3" json:"b_see,omitempty"`                                          // 用户是否看过牌  0没有看过牌，1已经看过牌
	BBet              uint32 `protobuf:"varint,7,opt,name=b_bet,json=bBet,proto3" json:"b_bet,omitempty"`                                          // 是否可以跟注
	BDouble           uint32 `protobuf:"varint,8,opt,name=b_double,json=bDouble,proto3" json:"b_double,omitempty"`                                 // 是否可以加注
	BShow             uint32 `protobuf:"varint,9,opt,name=b_show,json=bShow,proto3" json:"b_show,omitempty"`                                       // 是否可以show
	BSideshow         uint32 `protobuf:"varint,10,opt,name=b_sideshow,json=bSideshow,proto3" json:"b_sideshow,omitempty"`                          // 是否可以sideshow
	TimeLeft          uint32 `protobuf:"varint,11,opt,name=time_left,json=timeLeft,proto3" json:"time_left,omitempty"`                             // 操作时间
	BUpdate           uint32 `protobuf:"varint,12,opt,name=b_update,json=bUpdate,proto3" json:"b_update,omitempty"`                                // 本次操作是否是因为外部条件变化而引发的重置，默认为0，例如其他用户看牌了，此值就会是1;2:表示是自己看牌
}

func (x *MSG_C_GAME_NOTICE_RESP) Reset() {
	*x = MSG_C_GAME_NOTICE_RESP{}
	if protoimpl.UnsafeEnabled {
		mi := &file_teenpatti_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MSG_C_GAME_NOTICE_RESP) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MSG_C_GAME_NOTICE_RESP) ProtoMessage() {}

func (x *MSG_C_GAME_NOTICE_RESP) ProtoReflect() protoreflect.Message {
	mi := &file_teenpatti_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MSG_C_GAME_NOTICE_RESP.ProtoReflect.Descriptor instead.
func (*MSG_C_GAME_NOTICE_RESP) Descriptor() ([]byte, []int) {
	return file_teenpatti_proto_rawDescGZIP(), []int{9}
}

func (x *MSG_C_GAME_NOTICE_RESP) GetChairIndex() uint32 {
	if x != nil {
		return x.ChairIndex
	}
	return 0
}

func (x *MSG_C_GAME_NOTICE_RESP) GetBSelf() uint32 {
	if x != nil {
		return x.BSelf
	}
	return 0
}

func (x *MSG_C_GAME_NOTICE_RESP) GetUserCurrency() uint32 {
	if x != nil {
		return x.UserCurrency
	}
	return 0
}

func (x *MSG_C_GAME_NOTICE_RESP) GetCurrentRoundValue() uint32 {
	if x != nil {
		return x.CurrentRoundValue
	}
	return 0
}

func (x *MSG_C_GAME_NOTICE_RESP) GetBSee() uint32 {
	if x != nil {
		return x.BSee
	}
	return 0
}

func (x *MSG_C_GAME_NOTICE_RESP) GetBBet() uint32 {
	if x != nil {
		return x.BBet
	}
	return 0
}

func (x *MSG_C_GAME_NOTICE_RESP) GetBDouble() uint32 {
	if x != nil {
		return x.BDouble
	}
	return 0
}

func (x *MSG_C_GAME_NOTICE_RESP) GetBShow() uint32 {
	if x != nil {
		return x.BShow
	}
	return 0
}

func (x *MSG_C_GAME_NOTICE_RESP) GetBSideshow() uint32 {
	if x != nil {
		return x.BSideshow
	}
	return 0
}

func (x *MSG_C_GAME_NOTICE_RESP) GetTimeLeft() uint32 {
	if x != nil {
		return x.TimeLeft
	}
	return 0
}

func (x *MSG_C_GAME_NOTICE_RESP) GetBUpdate() uint32 {
	if x != nil {
		return x.BUpdate
	}
	return 0
}

type MSG_C_GAME_BET_REQ struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BetOdd uint32 `protobuf:"varint,1,opt,name=bet_odd,json=betOdd,proto3" json:"bet_odd,omitempty"` // 0：放弃；1：跟注；2：加注；
}

func (x *MSG_C_GAME_BET_REQ) Reset() {
	*x = MSG_C_GAME_BET_REQ{}
	if protoimpl.UnsafeEnabled {
		mi := &file_teenpatti_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MSG_C_GAME_BET_REQ) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MSG_C_GAME_BET_REQ) ProtoMessage() {}

func (x *MSG_C_GAME_BET_REQ) ProtoReflect() protoreflect.Message {
	mi := &file_teenpatti_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MSG_C_GAME_BET_REQ.ProtoReflect.Descriptor instead.
func (*MSG_C_GAME_BET_REQ) Descriptor() ([]byte, []int) {
	return file_teenpatti_proto_rawDescGZIP(), []int{10}
}

func (x *MSG_C_GAME_BET_REQ) GetBetOdd() uint32 {
	if x != nil {
		return x.BetOdd
	}
	return 0
}

type MSG_C_GAME_BET_RESP struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChairIndex    uint32 `protobuf:"varint,1,opt,name=chair_index,json=chairIndex,proto3" json:"chair_index,omitempty"`          // 座位编号
	Result        uint32 `protobuf:"varint,2,opt,name=result,proto3" json:"result,omitempty"`                                    // 0：正确；103：用户余额不够；其他错误
	TotalCurrency uint32 `protobuf:"varint,3,opt,name=total_currency,json=totalCurrency,proto3" json:"total_currency,omitempty"` // 所有用户总共下注
	BSee          uint32 `protobuf:"varint,4,opt,name=b_see,json=bSee,proto3" json:"b_see,omitempty"`                            // 用户是否看过牌  0没有看过牌，1已经看过牌
	BetOdd        uint32 `protobuf:"varint,5,opt,name=bet_odd,json=betOdd,proto3" json:"bet_odd,omitempty"`                      // 0：放弃；1：跟注；2：加注；
	BetValue      uint32 `protobuf:"varint,6,opt,name=bet_value,json=betValue,proto3" json:"bet_value,omitempty"`                // 下注的值
	UserBetValue  uint32 `protobuf:"varint,7,opt,name=user_bet_value,json=userBetValue,proto3" json:"user_bet_value,omitempty"`  // 用户累计下注
	UserCurrency  int32  `protobuf:"varint,8,opt,name=user_currency,json=userCurrency,proto3" json:"user_currency,omitempty"`    // 下注后，用户的剩下的钱
}

func (x *MSG_C_GAME_BET_RESP) Reset() {
	*x = MSG_C_GAME_BET_RESP{}
	if protoimpl.UnsafeEnabled {
		mi := &file_teenpatti_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MSG_C_GAME_BET_RESP) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MSG_C_GAME_BET_RESP) ProtoMessage() {}

func (x *MSG_C_GAME_BET_RESP) ProtoReflect() protoreflect.Message {
	mi := &file_teenpatti_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MSG_C_GAME_BET_RESP.ProtoReflect.Descriptor instead.
func (*MSG_C_GAME_BET_RESP) Descriptor() ([]byte, []int) {
	return file_teenpatti_proto_rawDescGZIP(), []int{11}
}

func (x *MSG_C_GAME_BET_RESP) GetChairIndex() uint32 {
	if x != nil {
		return x.ChairIndex
	}
	return 0
}

func (x *MSG_C_GAME_BET_RESP) GetResult() uint32 {
	if x != nil {
		return x.Result
	}
	return 0
}

func (x *MSG_C_GAME_BET_RESP) GetTotalCurrency() uint32 {
	if x != nil {
		return x.TotalCurrency
	}
	return 0
}

func (x *MSG_C_GAME_BET_RESP) GetBSee() uint32 {
	if x != nil {
		return x.BSee
	}
	return 0
}

func (x *MSG_C_GAME_BET_RESP) GetBetOdd() uint32 {
	if x != nil {
		return x.BetOdd
	}
	return 0
}

func (x *MSG_C_GAME_BET_RESP) GetBetValue() uint32 {
	if x != nil {
		return x.BetValue
	}
	return 0
}

func (x *MSG_C_GAME_BET_RESP) GetUserBetValue() uint32 {
	if x != nil {
		return x.UserBetValue
	}
	return 0
}

func (x *MSG_C_GAME_BET_RESP) GetUserCurrency() int32 {
	if x != nil {
		return x.UserCurrency
	}
	return 0
}

type MSG_C_GAME_SEE_RESP struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChairIndex uint32     `protobuf:"varint,1,opt,name=chair_index,json=chairIndex,proto3" json:"chair_index,omitempty"`                                     // 用户的位置
	Cards      []uint32   `protobuf:"varint,2,rep,packed,name=cards,proto3" json:"cards,omitempty"`                                                          // 用户的牌（只有自己才有数据）
	PokerType  PokersType `protobuf:"varint,3,opt,name=poker_type,json=pokerType,proto3,enum=com.cw.chess.teenpatti.PokersType" json:"poker_type,omitempty"` // 牌型
}

func (x *MSG_C_GAME_SEE_RESP) Reset() {
	*x = MSG_C_GAME_SEE_RESP{}
	if protoimpl.UnsafeEnabled {
		mi := &file_teenpatti_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MSG_C_GAME_SEE_RESP) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MSG_C_GAME_SEE_RESP) ProtoMessage() {}

func (x *MSG_C_GAME_SEE_RESP) ProtoReflect() protoreflect.Message {
	mi := &file_teenpatti_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MSG_C_GAME_SEE_RESP.ProtoReflect.Descriptor instead.
func (*MSG_C_GAME_SEE_RESP) Descriptor() ([]byte, []int) {
	return file_teenpatti_proto_rawDescGZIP(), []int{12}
}

func (x *MSG_C_GAME_SEE_RESP) GetChairIndex() uint32 {
	if x != nil {
		return x.ChairIndex
	}
	return 0
}

func (x *MSG_C_GAME_SEE_RESP) GetCards() []uint32 {
	if x != nil {
		return x.Cards
	}
	return nil
}

func (x *MSG_C_GAME_SEE_RESP) GetPokerType() PokersType {
	if x != nil {
		return x.PokerType
	}
	return PokersType_PT_High
}

type MSG_C_GAME_SHOW_RESP struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChairIndex    uint32     `protobuf:"varint,1,opt,name=chair_index,json=chairIndex,proto3" json:"chair_index,omitempty"`                          // 座位编号
	Result        uint32     `protobuf:"varint,2,opt,name=result,proto3" json:"result,omitempty"`                                                    // 0：正确；100：用户余额不够；其他错误，此逻辑会强行进入PK，不需要被挑战人同意
	TotalCurrency uint32     `protobuf:"varint,3,opt,name=total_currency,json=totalCurrency,proto3" json:"total_currency,omitempty"`                 // 所有用户总共下注
	ShowValue     uint32     `protobuf:"varint,4,opt,name=show_value,json=showValue,proto3" json:"show_value,omitempty"`                             // show的钱
	UserCurrency  int32      `protobuf:"varint,5,opt,name=user_currency,json=userCurrency,proto3" json:"user_currency,omitempty"`                    // show后，用户的剩下的钱
	Cards         []uint32   `protobuf:"varint,6,rep,packed,name=cards,proto3" json:"cards,omitempty"`                                               // 用户的牌
	PT            PokersType `protobuf:"varint,7,opt,name=PT,proto3,enum=com.cw.chess.teenpatti.PokersType" json:"PT,omitempty"`                     // 牌型
	ChairIndexAns uint32     `protobuf:"varint,8,opt,name=chair_index_ans,json=chairIndexAns,proto3" json:"chair_index_ans,omitempty"`               // 另外一个用户的座位编号
	CardsAns      []uint32   `protobuf:"varint,9,rep,packed,name=cards_ans,json=cardsAns,proto3" json:"cards_ans,omitempty"`                         // 用户的牌
	PTAns         PokersType `protobuf:"varint,10,opt,name=PT_ans,json=PTAns,proto3,enum=com.cw.chess.teenpatti.PokersType" json:"PT_ans,omitempty"` // 牌型
	WinnerIndex   uint32     `protobuf:"varint,11,opt,name=winner_index,json=winnerIndex,proto3" json:"winner_index,omitempty"`                      // 胜利的index
}

func (x *MSG_C_GAME_SHOW_RESP) Reset() {
	*x = MSG_C_GAME_SHOW_RESP{}
	if protoimpl.UnsafeEnabled {
		mi := &file_teenpatti_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MSG_C_GAME_SHOW_RESP) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MSG_C_GAME_SHOW_RESP) ProtoMessage() {}

func (x *MSG_C_GAME_SHOW_RESP) ProtoReflect() protoreflect.Message {
	mi := &file_teenpatti_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MSG_C_GAME_SHOW_RESP.ProtoReflect.Descriptor instead.
func (*MSG_C_GAME_SHOW_RESP) Descriptor() ([]byte, []int) {
	return file_teenpatti_proto_rawDescGZIP(), []int{13}
}

func (x *MSG_C_GAME_SHOW_RESP) GetChairIndex() uint32 {
	if x != nil {
		return x.ChairIndex
	}
	return 0
}

func (x *MSG_C_GAME_SHOW_RESP) GetResult() uint32 {
	if x != nil {
		return x.Result
	}
	return 0
}

func (x *MSG_C_GAME_SHOW_RESP) GetTotalCurrency() uint32 {
	if x != nil {
		return x.TotalCurrency
	}
	return 0
}

func (x *MSG_C_GAME_SHOW_RESP) GetShowValue() uint32 {
	if x != nil {
		return x.ShowValue
	}
	return 0
}

func (x *MSG_C_GAME_SHOW_RESP) GetUserCurrency() int32 {
	if x != nil {
		return x.UserCurrency
	}
	return 0
}

func (x *MSG_C_GAME_SHOW_RESP) GetCards() []uint32 {
	if x != nil {
		return x.Cards
	}
	return nil
}

func (x *MSG_C_GAME_SHOW_RESP) GetPT() PokersType {
	if x != nil {
		return x.PT
	}
	return PokersType_PT_High
}

func (x *MSG_C_GAME_SHOW_RESP) GetChairIndexAns() uint32 {
	if x != nil {
		return x.ChairIndexAns
	}
	return 0
}

func (x *MSG_C_GAME_SHOW_RESP) GetCardsAns() []uint32 {
	if x != nil {
		return x.CardsAns
	}
	return nil
}

func (x *MSG_C_GAME_SHOW_RESP) GetPTAns() PokersType {
	if x != nil {
		return x.PTAns
	}
	return PokersType_PT_High
}

func (x *MSG_C_GAME_SHOW_RESP) GetWinnerIndex() uint32 {
	if x != nil {
		return x.WinnerIndex
	}
	return 0
}

// Side Show请求回复
type MSG_C_GAME_SIDE_SHOW_RESP struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChairIndex    uint32 `protobuf:"varint,1,opt,name=chair_index,json=chairIndex,proto3" json:"chair_index,omitempty"`            // 座位编号
	Result        uint32 `protobuf:"varint,2,opt,name=result,proto3" json:"result,omitempty"`                                      // 0：正确；100：用户余额不够；其他错误
	TargetIndex   uint32 `protobuf:"varint,3,opt,name=target_index,json=targetIndex,proto3" json:"target_index,omitempty"`         // PK的用户
	SideShowValue uint32 `protobuf:"varint,4,opt,name=side_show_value,json=sideShowValue,proto3" json:"side_show_value,omitempty"` // sideshow的钱
	TotalCurrency uint32 `protobuf:"varint,5,opt,name=total_currency,json=totalCurrency,proto3" json:"total_currency,omitempty"`   // 总奖池
	UserCurrency  int32  `protobuf:"varint,6,opt,name=user_currency,json=userCurrency,proto3" json:"user_currency,omitempty"`      // Sideshow后，用户的剩下的钱
}

func (x *MSG_C_GAME_SIDE_SHOW_RESP) Reset() {
	*x = MSG_C_GAME_SIDE_SHOW_RESP{}
	if protoimpl.UnsafeEnabled {
		mi := &file_teenpatti_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MSG_C_GAME_SIDE_SHOW_RESP) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MSG_C_GAME_SIDE_SHOW_RESP) ProtoMessage() {}

func (x *MSG_C_GAME_SIDE_SHOW_RESP) ProtoReflect() protoreflect.Message {
	mi := &file_teenpatti_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MSG_C_GAME_SIDE_SHOW_RESP.ProtoReflect.Descriptor instead.
func (*MSG_C_GAME_SIDE_SHOW_RESP) Descriptor() ([]byte, []int) {
	return file_teenpatti_proto_rawDescGZIP(), []int{14}
}

func (x *MSG_C_GAME_SIDE_SHOW_RESP) GetChairIndex() uint32 {
	if x != nil {
		return x.ChairIndex
	}
	return 0
}

func (x *MSG_C_GAME_SIDE_SHOW_RESP) GetResult() uint32 {
	if x != nil {
		return x.Result
	}
	return 0
}

func (x *MSG_C_GAME_SIDE_SHOW_RESP) GetTargetIndex() uint32 {
	if x != nil {
		return x.TargetIndex
	}
	return 0
}

func (x *MSG_C_GAME_SIDE_SHOW_RESP) GetSideShowValue() uint32 {
	if x != nil {
		return x.SideShowValue
	}
	return 0
}

func (x *MSG_C_GAME_SIDE_SHOW_RESP) GetTotalCurrency() uint32 {
	if x != nil {
		return x.TotalCurrency
	}
	return 0
}

func (x *MSG_C_GAME_SIDE_SHOW_RESP) GetUserCurrency() int32 {
	if x != nil {
		return x.UserCurrency
	}
	return 0
}

// Side Show接受请求
type MSG_C_GAME_SIDE_SHOW_ANSWER_REQ struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Accpet uint32 `protobuf:"varint,1,opt,name=accpet,proto3" json:"accpet,omitempty"` // 是否接受Side Show：0不接受；1接受
}

func (x *MSG_C_GAME_SIDE_SHOW_ANSWER_REQ) Reset() {
	*x = MSG_C_GAME_SIDE_SHOW_ANSWER_REQ{}
	if protoimpl.UnsafeEnabled {
		mi := &file_teenpatti_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MSG_C_GAME_SIDE_SHOW_ANSWER_REQ) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MSG_C_GAME_SIDE_SHOW_ANSWER_REQ) ProtoMessage() {}

func (x *MSG_C_GAME_SIDE_SHOW_ANSWER_REQ) ProtoReflect() protoreflect.Message {
	mi := &file_teenpatti_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MSG_C_GAME_SIDE_SHOW_ANSWER_REQ.ProtoReflect.Descriptor instead.
func (*MSG_C_GAME_SIDE_SHOW_ANSWER_REQ) Descriptor() ([]byte, []int) {
	return file_teenpatti_proto_rawDescGZIP(), []int{15}
}

func (x *MSG_C_GAME_SIDE_SHOW_ANSWER_REQ) GetAccpet() uint32 {
	if x != nil {
		return x.Accpet
	}
	return 0
}

// Side Show请求回答回复
type MSG_C_GAME_SIDE_SHOW_ANSWER_RESP struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result        uint32 `protobuf:"varint,1,opt,name=result,proto3" json:"result,omitempty"`                                      // 0：正确；100：用户余额不够；其他错误
	Accpet        uint32 `protobuf:"varint,2,opt,name=accpet,proto3" json:"accpet,omitempty"`                                      // 0不接受；1接受
	ChairIndexReq uint32 `protobuf:"varint,3,opt,name=chair_index_req,json=chairIndexReq,proto3" json:"chair_index_req,omitempty"` // 座位编号,发起side show的用户
	ChairIndexAns uint32 `protobuf:"varint,4,opt,name=chair_index_ans,json=chairIndexAns,proto3" json:"chair_index_ans,omitempty"` // 座位编号,接受side show的用户
	WinnerIndex   uint32 `protobuf:"varint,5,opt,name=winner_index,json=winnerIndex,proto3" json:"winner_index,omitempty"`         // 胜利的index
}

func (x *MSG_C_GAME_SIDE_SHOW_ANSWER_RESP) Reset() {
	*x = MSG_C_GAME_SIDE_SHOW_ANSWER_RESP{}
	if protoimpl.UnsafeEnabled {
		mi := &file_teenpatti_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MSG_C_GAME_SIDE_SHOW_ANSWER_RESP) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MSG_C_GAME_SIDE_SHOW_ANSWER_RESP) ProtoMessage() {}

func (x *MSG_C_GAME_SIDE_SHOW_ANSWER_RESP) ProtoReflect() protoreflect.Message {
	mi := &file_teenpatti_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MSG_C_GAME_SIDE_SHOW_ANSWER_RESP.ProtoReflect.Descriptor instead.
func (*MSG_C_GAME_SIDE_SHOW_ANSWER_RESP) Descriptor() ([]byte, []int) {
	return file_teenpatti_proto_rawDescGZIP(), []int{16}
}

func (x *MSG_C_GAME_SIDE_SHOW_ANSWER_RESP) GetResult() uint32 {
	if x != nil {
		return x.Result
	}
	return 0
}

func (x *MSG_C_GAME_SIDE_SHOW_ANSWER_RESP) GetAccpet() uint32 {
	if x != nil {
		return x.Accpet
	}
	return 0
}

func (x *MSG_C_GAME_SIDE_SHOW_ANSWER_RESP) GetChairIndexReq() uint32 {
	if x != nil {
		return x.ChairIndexReq
	}
	return 0
}

func (x *MSG_C_GAME_SIDE_SHOW_ANSWER_RESP) GetChairIndexAns() uint32 {
	if x != nil {
		return x.ChairIndexAns
	}
	return 0
}

func (x *MSG_C_GAME_SIDE_SHOW_ANSWER_RESP) GetWinnerIndex() uint32 {
	if x != nil {
		return x.WinnerIndex
	}
	return 0
}

// 单个用户结算信息
type UserSettle struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChairIndex   uint32     `protobuf:"varint,1,opt,name=chair_index,json=chairIndex,proto3" json:"chair_index,omitempty"`                                           // 座位编号
	BGame        uint32     `protobuf:"varint,2,opt,name=b_game,json=bGame,proto3" json:"b_game,omitempty"`                                                          // 用户是否参与
	BDrop        uint32     `protobuf:"varint,3,opt,name=b_drop,json=bDrop,proto3" json:"b_drop,omitempty"`                                                          // 用户是否drop，0：没有drop，正常游戏中；1：主动drop；2：超时drop；3：sideshow PK失败；4：show失败；5：达到封顶后强行结算失败
	Pokers       []uint32   `protobuf:"varint,4,rep,packed,name=pokers,proto3" json:"pokers,omitempty"`                                                              // 用户的牌
	PokersTypes  PokersType `protobuf:"varint,5,opt,name=pokers_types,json=pokersTypes,proto3,enum=com.cw.chess.teenpatti.PokersType" json:"pokers_types,omitempty"` // 用户牌型
	WinCurrency  int32      `protobuf:"varint,6,opt,name=win_currency,json=winCurrency,proto3" json:"win_currency,omitempty"`                                        // 用户的金币获得（有正有负）
	UserCurrency int32      `protobuf:"varint,7,opt,name=user_currency,json=userCurrency,proto3" json:"user_currency,omitempty"`                                     // 结算后，用户的剩下的钱
}

func (x *UserSettle) Reset() {
	*x = UserSettle{}
	if protoimpl.UnsafeEnabled {
		mi := &file_teenpatti_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserSettle) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserSettle) ProtoMessage() {}

func (x *UserSettle) ProtoReflect() protoreflect.Message {
	mi := &file_teenpatti_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserSettle.ProtoReflect.Descriptor instead.
func (*UserSettle) Descriptor() ([]byte, []int) {
	return file_teenpatti_proto_rawDescGZIP(), []int{17}
}

func (x *UserSettle) GetChairIndex() uint32 {
	if x != nil {
		return x.ChairIndex
	}
	return 0
}

func (x *UserSettle) GetBGame() uint32 {
	if x != nil {
		return x.BGame
	}
	return 0
}

func (x *UserSettle) GetBDrop() uint32 {
	if x != nil {
		return x.BDrop
	}
	return 0
}

func (x *UserSettle) GetPokers() []uint32 {
	if x != nil {
		return x.Pokers
	}
	return nil
}

func (x *UserSettle) GetPokersTypes() PokersType {
	if x != nil {
		return x.PokersTypes
	}
	return PokersType_PT_High
}

func (x *UserSettle) GetWinCurrency() int32 {
	if x != nil {
		return x.WinCurrency
	}
	return 0
}

func (x *UserSettle) GetUserCurrency() int32 {
	if x != nil {
		return x.UserCurrency
	}
	return 0
}

// 结算
type MSG_C_GAME_SETTLE_RESP struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UsersSettle []*UserSettle `protobuf:"bytes,1,rep,name=users_settle,json=usersSettle,proto3" json:"users_settle,omitempty"`
	WinIndex    uint32        `protobuf:"varint,2,opt,name=win_index,json=winIndex,proto3" json:"win_index,omitempty"`    // 胜利的位置
	WinReason   uint32        `protobuf:"varint,3,opt,name=win_reason,json=winReason,proto3" json:"win_reason,omitempty"` // 胜利的原因：1：drop后剩一个人；2：牌型比较胜；3：相同牌后手胜；4：相同牌封顶Dealer下家胜
	IsMax       uint32        `protobuf:"varint,4,opt,name=is_max,json=isMax,proto3" json:"is_max,omitempty"`             // 是否达到了最大值：0没有1达到
}

func (x *MSG_C_GAME_SETTLE_RESP) Reset() {
	*x = MSG_C_GAME_SETTLE_RESP{}
	if protoimpl.UnsafeEnabled {
		mi := &file_teenpatti_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MSG_C_GAME_SETTLE_RESP) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MSG_C_GAME_SETTLE_RESP) ProtoMessage() {}

func (x *MSG_C_GAME_SETTLE_RESP) ProtoReflect() protoreflect.Message {
	mi := &file_teenpatti_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MSG_C_GAME_SETTLE_RESP.ProtoReflect.Descriptor instead.
func (*MSG_C_GAME_SETTLE_RESP) Descriptor() ([]byte, []int) {
	return file_teenpatti_proto_rawDescGZIP(), []int{18}
}

func (x *MSG_C_GAME_SETTLE_RESP) GetUsersSettle() []*UserSettle {
	if x != nil {
		return x.UsersSettle
	}
	return nil
}

func (x *MSG_C_GAME_SETTLE_RESP) GetWinIndex() uint32 {
	if x != nil {
		return x.WinIndex
	}
	return 0
}

func (x *MSG_C_GAME_SETTLE_RESP) GetWinReason() uint32 {
	if x != nil {
		return x.WinReason
	}
	return 0
}

func (x *MSG_C_GAME_SETTLE_RESP) GetIsMax() uint32 {
	if x != nil {
		return x.IsMax
	}
	return 0
}

// 某个座位的人发生了变化
type MSG_C_USER_CHAIR_RESP struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChairIndex uint32             `protobuf:"varint,1,opt,name=chair_index,json=chairIndex,proto3" json:"chair_index,omitempty"` // 座位编号
	BUser      uint32             `protobuf:"varint,2,opt,name=b_user,json=bUser,proto3" json:"b_user,omitempty"`                // 怎么变化的：0：座位上的离开了；1：座位上坐下了人
	GameUser   *platform.GameUser `protobuf:"bytes,3,opt,name=game_user,json=gameUser,proto3" json:"game_user,omitempty"`        // b_user等于1，才会有此值
}

func (x *MSG_C_USER_CHAIR_RESP) Reset() {
	*x = MSG_C_USER_CHAIR_RESP{}
	if protoimpl.UnsafeEnabled {
		mi := &file_teenpatti_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MSG_C_USER_CHAIR_RESP) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MSG_C_USER_CHAIR_RESP) ProtoMessage() {}

func (x *MSG_C_USER_CHAIR_RESP) ProtoReflect() protoreflect.Message {
	mi := &file_teenpatti_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MSG_C_USER_CHAIR_RESP.ProtoReflect.Descriptor instead.
func (*MSG_C_USER_CHAIR_RESP) Descriptor() ([]byte, []int) {
	return file_teenpatti_proto_rawDescGZIP(), []int{19}
}

func (x *MSG_C_USER_CHAIR_RESP) GetChairIndex() uint32 {
	if x != nil {
		return x.ChairIndex
	}
	return 0
}

func (x *MSG_C_USER_CHAIR_RESP) GetBUser() uint32 {
	if x != nil {
		return x.BUser
	}
	return 0
}

func (x *MSG_C_USER_CHAIR_RESP) GetGameUser() *platform.GameUser {
	if x != nil {
		return x.GameUser
	}
	return nil
}

// 用户聊天请求
type MSG_C_CHAT_REQ struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChatType    uint32 `protobuf:"varint,1,opt,name=chat_type,json=chatType,proto3" json:"chat_type,omitempty"`        // 聊天类型1：固定语句聊天；2：自由语句聊天
	Type_1Value string `protobuf:"bytes,2,opt,name=type_1_value,json=type1Value,proto3" json:"type_1_value,omitempty"` // 固定语句聊天的值
	Type_2Value string `protobuf:"bytes,3,opt,name=type_2_value,json=type2Value,proto3" json:"type_2_value,omitempty"` // 自由语句聊天的值
}

func (x *MSG_C_CHAT_REQ) Reset() {
	*x = MSG_C_CHAT_REQ{}
	if protoimpl.UnsafeEnabled {
		mi := &file_teenpatti_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MSG_C_CHAT_REQ) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MSG_C_CHAT_REQ) ProtoMessage() {}

func (x *MSG_C_CHAT_REQ) ProtoReflect() protoreflect.Message {
	mi := &file_teenpatti_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MSG_C_CHAT_REQ.ProtoReflect.Descriptor instead.
func (*MSG_C_CHAT_REQ) Descriptor() ([]byte, []int) {
	return file_teenpatti_proto_rawDescGZIP(), []int{20}
}

func (x *MSG_C_CHAT_REQ) GetChatType() uint32 {
	if x != nil {
		return x.ChatType
	}
	return 0
}

func (x *MSG_C_CHAT_REQ) GetType_1Value() string {
	if x != nil {
		return x.Type_1Value
	}
	return ""
}

func (x *MSG_C_CHAT_REQ) GetType_2Value() string {
	if x != nil {
		return x.Type_2Value
	}
	return ""
}

// 用户聊天请求
type MSG_C_CHAT_RESP struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChatIndex   uint32 `protobuf:"varint,1,opt,name=chat_index,json=chatIndex,proto3" json:"chat_index,omitempty"`     // 聊天的座位ID
	ChatType    uint32 `protobuf:"varint,2,opt,name=chat_type,json=chatType,proto3" json:"chat_type,omitempty"`        // 聊天类型1：固定语句聊天；2：自由语句聊天
	Type_1Value string `protobuf:"bytes,3,opt,name=type_1_value,json=type1Value,proto3" json:"type_1_value,omitempty"` // 固定语句聊天的值
	Type_2Value string `protobuf:"bytes,4,opt,name=type_2_value,json=type2Value,proto3" json:"type_2_value,omitempty"` // 自由语句聊天的值
}

func (x *MSG_C_CHAT_RESP) Reset() {
	*x = MSG_C_CHAT_RESP{}
	if protoimpl.UnsafeEnabled {
		mi := &file_teenpatti_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MSG_C_CHAT_RESP) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MSG_C_CHAT_RESP) ProtoMessage() {}

func (x *MSG_C_CHAT_RESP) ProtoReflect() protoreflect.Message {
	mi := &file_teenpatti_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MSG_C_CHAT_RESP.ProtoReflect.Descriptor instead.
func (*MSG_C_CHAT_RESP) Descriptor() ([]byte, []int) {
	return file_teenpatti_proto_rawDescGZIP(), []int{21}
}

func (x *MSG_C_CHAT_RESP) GetChatIndex() uint32 {
	if x != nil {
		return x.ChatIndex
	}
	return 0
}

func (x *MSG_C_CHAT_RESP) GetChatType() uint32 {
	if x != nil {
		return x.ChatType
	}
	return 0
}

func (x *MSG_C_CHAT_RESP) GetType_1Value() string {
	if x != nil {
		return x.Type_1Value
	}
	return ""
}

func (x *MSG_C_CHAT_RESP) GetType_2Value() string {
	if x != nil {
		return x.Type_2Value
	}
	return ""
}

// 通知客户端桌子将被解散
type MSG_C_MATCH_FINISH_RESP struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TableId uint32 `protobuf:"varint,1,opt,name=table_id,json=tableId,proto3" json:"table_id,omitempty"`
	Reason  uint32 `protobuf:"varint,2,opt,name=reason,proto3" json:"reason,omitempty"`
}

func (x *MSG_C_MATCH_FINISH_RESP) Reset() {
	*x = MSG_C_MATCH_FINISH_RESP{}
	if protoimpl.UnsafeEnabled {
		mi := &file_teenpatti_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MSG_C_MATCH_FINISH_RESP) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MSG_C_MATCH_FINISH_RESP) ProtoMessage() {}

func (x *MSG_C_MATCH_FINISH_RESP) ProtoReflect() protoreflect.Message {
	mi := &file_teenpatti_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MSG_C_MATCH_FINISH_RESP.ProtoReflect.Descriptor instead.
func (*MSG_C_MATCH_FINISH_RESP) Descriptor() ([]byte, []int) {
	return file_teenpatti_proto_rawDescGZIP(), []int{22}
}

func (x *MSG_C_MATCH_FINISH_RESP) GetTableId() uint32 {
	if x != nil {
		return x.TableId
	}
	return 0
}

func (x *MSG_C_MATCH_FINISH_RESP) GetReason() uint32 {
	if x != nil {
		return x.Reason
	}
	return 0
}

var File_teenpatti_proto protoreflect.FileDescriptor

var file_teenpatti_proto_rawDesc = []byte{
	0x0a, 0x0f, 0x74, 0x65, 0x65, 0x6e, 0x70, 0x61, 0x74, 0x74, 0x69, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x12, 0x16, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x77, 0x2e, 0x63, 0x68, 0x65, 0x73, 0x73, 0x2e,
	0x74, 0x65, 0x65, 0x6e, 0x70, 0x61, 0x74, 0x74, 0x69, 0x1a, 0x0e, 0x70, 0x6c, 0x61, 0x74, 0x66,
	0x6f, 0x72, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x76, 0x0a, 0x15, 0x54, 0x65, 0x65,
	0x6e, 0x70, 0x61, 0x74, 0x74, 0x69, 0x53, 0x74, 0x61, 0x72, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x35, 0x0a, 0x05, 0x75, 0x73, 0x65, 0x72,
	0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x77,
	0x2e, 0x63, 0x68, 0x65, 0x73, 0x73, 0x2e, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e,
	0x47, 0x61, 0x6d, 0x65, 0x55, 0x73, 0x65, 0x72, 0x52, 0x05, 0x75, 0x73, 0x65, 0x72, 0x73, 0x12,
	0x10, 0x0a, 0x03, 0x72, 0x62, 0x63, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x72, 0x62,
	0x63, 0x22, 0x4b, 0x0a, 0x16, 0x54, 0x65, 0x65, 0x6e, 0x70, 0x61, 0x74, 0x74, 0x69, 0x53, 0x74,
	0x61, 0x72, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x72,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x72, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x49, 0x64, 0x22, 0x3a,
	0x0a, 0x09, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x44, 0x61, 0x74, 0x61, 0x12, 0x19, 0x0a, 0x08, 0x74,
	0x61, 0x62, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x74,
	0x61, 0x62, 0x6c, 0x65, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x12, 0x0a, 0x10, 0x4d, 0x53,
	0x47, 0x5f, 0x43, 0x5f, 0x43, 0x4f, 0x4d, 0x4d, 0x4f, 0x4e, 0x5f, 0x52, 0x45, 0x51, 0x22, 0x2b,
	0x0a, 0x11, 0x4d, 0x53, 0x47, 0x5f, 0x43, 0x5f, 0x43, 0x4f, 0x4d, 0x4d, 0x4f, 0x4e, 0x5f, 0x52,
	0x45, 0x53, 0x50, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0xf4, 0x02, 0x0a, 0x0b,
	0x43, 0x68, 0x61, 0x69, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x15, 0x0a, 0x06, 0x62,
	0x5f, 0x75, 0x73, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x62, 0x55, 0x73,
	0x65, 0x72, 0x12, 0x15, 0x0a, 0x06, 0x62, 0x5f, 0x67, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x05, 0x62, 0x47, 0x61, 0x6d, 0x65, 0x12, 0x15, 0x0a, 0x06, 0x62, 0x5f, 0x64,
	0x72, 0x6f, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x62, 0x44, 0x72, 0x6f, 0x70,
	0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x68, 0x61, 0x69, 0x72, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x63, 0x68, 0x61, 0x69, 0x72, 0x49, 0x6e, 0x64, 0x65,
	0x78, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x61, 0x72, 0x64, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0d,
	0x52, 0x05, 0x63, 0x61, 0x72, 0x64, 0x73, 0x12, 0x32, 0x0a, 0x02, 0x50, 0x54, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x22, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x77, 0x2e, 0x63, 0x68, 0x65,
	0x73, 0x73, 0x2e, 0x74, 0x65, 0x65, 0x6e, 0x70, 0x61, 0x74, 0x74, 0x69, 0x2e, 0x50, 0x6f, 0x6b,
	0x65, 0x72, 0x73, 0x54, 0x79, 0x70, 0x65, 0x52, 0x02, 0x50, 0x54, 0x12, 0x14, 0x0a, 0x05, 0x73,
	0x63, 0x6f, 0x72, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x73, 0x63, 0x6f, 0x72,
	0x65, 0x12, 0x33, 0x0a, 0x04, 0x75, 0x73, 0x65, 0x72, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1f, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x77, 0x2e, 0x63, 0x68, 0x65, 0x73, 0x73, 0x2e, 0x70,
	0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x47, 0x61, 0x6d, 0x65, 0x55, 0x73, 0x65, 0x72,
	0x52, 0x04, 0x75, 0x73, 0x65, 0x72, 0x12, 0x13, 0x0a, 0x05, 0x62, 0x5f, 0x73, 0x65, 0x65, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x62, 0x53, 0x65, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x62,
	0x65, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x62, 0x65, 0x74, 0x12, 0x19, 0x0a,
	0x08, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x62, 0x65, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x07, 0x6c, 0x61, 0x73, 0x74, 0x42, 0x65, 0x74, 0x12, 0x13, 0x0a, 0x05, 0x62, 0x65, 0x74, 0x5f,
	0x41, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x62, 0x65, 0x74, 0x41, 0x12, 0x13, 0x0a,
	0x05, 0x62, 0x65, 0x74, 0x5f, 0x42, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x62, 0x65,
	0x74, 0x42, 0x22, 0xb7, 0x03, 0x0a, 0x1b, 0x4d, 0x53, 0x47, 0x5f, 0x43, 0x5f, 0x47, 0x45, 0x54,
	0x5f, 0x54, 0x41, 0x42, 0x4c, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x52, 0x45,
	0x53, 0x50, 0x12, 0x47, 0x0a, 0x0a, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x5f, 0x64, 0x65, 0x73, 0x63,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x77, 0x2e,
	0x63, 0x68, 0x65, 0x73, 0x73, 0x2e, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x54,
	0x65, 0x65, 0x70, 0x61, 0x74, 0x74, 0x69, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x44, 0x65, 0x73, 0x63,
	0x52, 0x09, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x44, 0x65, 0x73, 0x63, 0x12, 0x40, 0x0a, 0x0a, 0x67,
	0x61, 0x6d, 0x65, 0x5f, 0x70, 0x68, 0x61, 0x73, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x21, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x77, 0x2e, 0x63, 0x68, 0x65, 0x73, 0x73, 0x2e, 0x74,
	0x65, 0x65, 0x6e, 0x70, 0x61, 0x74, 0x74, 0x69, 0x2e, 0x47, 0x61, 0x6d, 0x65, 0x50, 0x68, 0x61,
	0x73, 0x65, 0x52, 0x09, 0x67, 0x61, 0x6d, 0x65, 0x50, 0x68, 0x61, 0x73, 0x65, 0x12, 0x3b, 0x0a,
	0x06, 0x63, 0x68, 0x61, 0x72, 0x69, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e,
	0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x77, 0x2e, 0x63, 0x68, 0x65, 0x73, 0x73, 0x2e, 0x74, 0x65, 0x65,
	0x6e, 0x70, 0x61, 0x74, 0x74, 0x69, 0x2e, 0x43, 0x68, 0x61, 0x69, 0x72, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x52, 0x06, 0x63, 0x68, 0x61, 0x72, 0x69, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x65,
	0x6c, 0x66, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09,
	0x73, 0x65, 0x6c, 0x66, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x16, 0x0a, 0x06, 0x67, 0x61, 0x6d,
	0x65, 0x49, 0x44, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x67, 0x61, 0x6d, 0x65, 0x49,
	0x44, 0x12, 0x16, 0x0a, 0x06, 0x64, 0x65, 0x61, 0x6c, 0x65, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x06, 0x64, 0x65, 0x61, 0x6c, 0x65, 0x72, 0x12, 0x25, 0x0a, 0x0e, 0x74, 0x6f, 0x74,
	0x61, 0x6c, 0x5f, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x0d, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79,
	0x12, 0x2e, 0x0a, 0x13, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x72, 0x6f, 0x75, 0x6e,
	0x64, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x11, 0x63,
	0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x12, 0x2a, 0x0a, 0x11, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x72, 0x6f, 0x75, 0x6e,
	0x64, 0x5f, 0x61, 0x63, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x63, 0x75, 0x72,
	0x72, 0x65, 0x6e, 0x74, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x41, 0x63, 0x74, 0x22, 0x2f, 0x0a, 0x17,
	0x4d, 0x53, 0x47, 0x5f, 0x43, 0x5f, 0x47, 0x41, 0x4d, 0x45, 0x5f, 0x52, 0x45, 0x41, 0x44, 0x59,
	0x5f, 0x33, 0x5f, 0x52, 0x45, 0x53, 0x50, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x6d, 0x65, 0x73,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x22, 0xa3, 0x01,
	0x0a, 0x19, 0x4d, 0x53, 0x47, 0x5f, 0x43, 0x5f, 0x47, 0x41, 0x4d, 0x45, 0x5f, 0x44, 0x45, 0x41,
	0x4c, 0x43, 0x41, 0x52, 0x44, 0x53, 0x5f, 0x52, 0x45, 0x53, 0x50, 0x12, 0x19, 0x0a, 0x08, 0x74,
	0x61, 0x62, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x74,
	0x61, 0x62, 0x6c, 0x65, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x67, 0x61, 0x6d, 0x65, 0x49, 0x44,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x67, 0x61, 0x6d, 0x65, 0x49, 0x44, 0x12, 0x3b,
	0x0a, 0x06, 0x63, 0x68, 0x61, 0x72, 0x69, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x23,
	0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x77, 0x2e, 0x63, 0x68, 0x65, 0x73, 0x73, 0x2e, 0x74, 0x65,
	0x65, 0x6e, 0x70, 0x61, 0x74, 0x74, 0x69, 0x2e, 0x43, 0x68, 0x61, 0x69, 0x72, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x52, 0x06, 0x63, 0x68, 0x61, 0x72, 0x69, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x64,
	0x65, 0x61, 0x6c, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x64, 0x65, 0x61,
	0x6c, 0x65, 0x72, 0x22, 0xd8, 0x02, 0x0a, 0x16, 0x4d, 0x53, 0x47, 0x5f, 0x43, 0x5f, 0x47, 0x41,
	0x4d, 0x45, 0x5f, 0x4e, 0x4f, 0x54, 0x49, 0x43, 0x45, 0x5f, 0x52, 0x45, 0x53, 0x50, 0x12, 0x1f,
	0x0a, 0x0b, 0x63, 0x68, 0x61, 0x69, 0x72, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x0a, 0x63, 0x68, 0x61, 0x69, 0x72, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12,
	0x15, 0x0a, 0x06, 0x62, 0x5f, 0x73, 0x65, 0x6c, 0x66, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x05, 0x62, 0x53, 0x65, 0x6c, 0x66, 0x12, 0x23, 0x0a, 0x0d, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x63,
	0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x75,
	0x73, 0x65, 0x72, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x2e, 0x0a, 0x13, 0x63,
	0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x5f, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x11, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e,
	0x74, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x13, 0x0a, 0x05, 0x62,
	0x5f, 0x73, 0x65, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x62, 0x53, 0x65, 0x65,
	0x12, 0x13, 0x0a, 0x05, 0x62, 0x5f, 0x62, 0x65, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x04, 0x62, 0x42, 0x65, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x62, 0x5f, 0x64, 0x6f, 0x75, 0x62, 0x6c,
	0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x62, 0x44, 0x6f, 0x75, 0x62, 0x6c, 0x65,
	0x12, 0x15, 0x0a, 0x06, 0x62, 0x5f, 0x73, 0x68, 0x6f, 0x77, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x05, 0x62, 0x53, 0x68, 0x6f, 0x77, 0x12, 0x1d, 0x0a, 0x0a, 0x62, 0x5f, 0x73, 0x69, 0x64,
	0x65, 0x73, 0x68, 0x6f, 0x77, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x62, 0x53, 0x69,
	0x64, 0x65, 0x73, 0x68, 0x6f, 0x77, 0x12, 0x1b, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x6c,
	0x65, 0x66, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x74, 0x69, 0x6d, 0x65, 0x4c,
	0x65, 0x66, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x62, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x18,
	0x0c, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x62, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x22, 0x2d,
	0x0a, 0x12, 0x4d, 0x53, 0x47, 0x5f, 0x43, 0x5f, 0x47, 0x41, 0x4d, 0x45, 0x5f, 0x42, 0x45, 0x54,
	0x5f, 0x52, 0x45, 0x51, 0x12, 0x17, 0x0a, 0x07, 0x62, 0x65, 0x74, 0x5f, 0x6f, 0x64, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x62, 0x65, 0x74, 0x4f, 0x64, 0x64, 0x22, 0x8b, 0x02,
	0x0a, 0x13, 0x4d, 0x53, 0x47, 0x5f, 0x43, 0x5f, 0x47, 0x41, 0x4d, 0x45, 0x5f, 0x42, 0x45, 0x54,
	0x5f, 0x52, 0x45, 0x53, 0x50, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x68, 0x61, 0x69, 0x72, 0x5f, 0x69,
	0x6e, 0x64, 0x65, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x63, 0x68, 0x61, 0x69,
	0x72, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x25,
	0x0a, 0x0e, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x43, 0x75, 0x72,
	0x72, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x13, 0x0a, 0x05, 0x62, 0x5f, 0x73, 0x65, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x62, 0x53, 0x65, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x62, 0x65,
	0x74, 0x5f, 0x6f, 0x64, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x62, 0x65, 0x74,
	0x4f, 0x64, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x62, 0x65, 0x74, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x62, 0x65, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x12, 0x24, 0x0a, 0x0e, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x62, 0x65, 0x74, 0x5f, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x75, 0x73, 0x65, 0x72, 0x42, 0x65,
	0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x63,
	0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x75,
	0x73, 0x65, 0x72, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x22, 0x8f, 0x01, 0x0a, 0x13,
	0x4d, 0x53, 0x47, 0x5f, 0x43, 0x5f, 0x47, 0x41, 0x4d, 0x45, 0x5f, 0x53, 0x45, 0x45, 0x5f, 0x52,
	0x45, 0x53, 0x50, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x68, 0x61, 0x69, 0x72, 0x5f, 0x69, 0x6e, 0x64,
	0x65, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x63, 0x68, 0x61, 0x69, 0x72, 0x49,
	0x6e, 0x64, 0x65, 0x78, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x61, 0x72, 0x64, 0x73, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x0d, 0x52, 0x05, 0x63, 0x61, 0x72, 0x64, 0x73, 0x12, 0x41, 0x0a, 0x0a, 0x70, 0x6f,
	0x6b, 0x65, 0x72, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x22,
	0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x77, 0x2e, 0x63, 0x68, 0x65, 0x73, 0x73, 0x2e, 0x74, 0x65,
	0x65, 0x6e, 0x70, 0x61, 0x74, 0x74, 0x69, 0x2e, 0x50, 0x6f, 0x6b, 0x65, 0x72, 0x73, 0x54, 0x79,
	0x70, 0x65, 0x52, 0x09, 0x70, 0x6f, 0x6b, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x22, 0xa7, 0x03,
	0x0a, 0x14, 0x4d, 0x53, 0x47, 0x5f, 0x43, 0x5f, 0x47, 0x41, 0x4d, 0x45, 0x5f, 0x53, 0x48, 0x4f,
	0x57, 0x5f, 0x52, 0x45, 0x53, 0x50, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x68, 0x61, 0x69, 0x72, 0x5f,
	0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x63, 0x68, 0x61,
	0x69, 0x72, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12,
	0x25, 0x0a, 0x0e, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63,
	0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x43, 0x75,
	0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x68, 0x6f, 0x77, 0x5f, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x73, 0x68, 0x6f, 0x77,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x63, 0x75,
	0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x75, 0x73,
	0x65, 0x72, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x61,
	0x72, 0x64, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x05, 0x63, 0x61, 0x72, 0x64, 0x73,
	0x12, 0x32, 0x0a, 0x02, 0x50, 0x54, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x22, 0x2e, 0x63,
	0x6f, 0x6d, 0x2e, 0x63, 0x77, 0x2e, 0x63, 0x68, 0x65, 0x73, 0x73, 0x2e, 0x74, 0x65, 0x65, 0x6e,
	0x70, 0x61, 0x74, 0x74, 0x69, 0x2e, 0x50, 0x6f, 0x6b, 0x65, 0x72, 0x73, 0x54, 0x79, 0x70, 0x65,
	0x52, 0x02, 0x50, 0x54, 0x12, 0x26, 0x0a, 0x0f, 0x63, 0x68, 0x61, 0x69, 0x72, 0x5f, 0x69, 0x6e,
	0x64, 0x65, 0x78, 0x5f, 0x61, 0x6e, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x63,
	0x68, 0x61, 0x69, 0x72, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x41, 0x6e, 0x73, 0x12, 0x1b, 0x0a, 0x09,
	0x63, 0x61, 0x72, 0x64, 0x73, 0x5f, 0x61, 0x6e, 0x73, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0d, 0x52,
	0x08, 0x63, 0x61, 0x72, 0x64, 0x73, 0x41, 0x6e, 0x73, 0x12, 0x39, 0x0a, 0x06, 0x50, 0x54, 0x5f,
	0x61, 0x6e, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x22, 0x2e, 0x63, 0x6f, 0x6d, 0x2e,
	0x63, 0x77, 0x2e, 0x63, 0x68, 0x65, 0x73, 0x73, 0x2e, 0x74, 0x65, 0x65, 0x6e, 0x70, 0x61, 0x74,
	0x74, 0x69, 0x2e, 0x50, 0x6f, 0x6b, 0x65, 0x72, 0x73, 0x54, 0x79, 0x70, 0x65, 0x52, 0x05, 0x50,
	0x54, 0x41, 0x6e, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x77, 0x69, 0x6e, 0x6e, 0x65, 0x72, 0x5f, 0x69,
	0x6e, 0x64, 0x65, 0x78, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x77, 0x69, 0x6e, 0x6e,
	0x65, 0x72, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x22, 0xeb, 0x01, 0x0a, 0x19, 0x4d, 0x53, 0x47, 0x5f,
	0x43, 0x5f, 0x47, 0x41, 0x4d, 0x45, 0x5f, 0x53, 0x49, 0x44, 0x45, 0x5f, 0x53, 0x48, 0x4f, 0x57,
	0x5f, 0x52, 0x45, 0x53, 0x50, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x68, 0x61, 0x69, 0x72, 0x5f, 0x69,
	0x6e, 0x64, 0x65, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x63, 0x68, 0x61, 0x69,
	0x72, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x21,
	0x0a, 0x0c, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x49, 0x6e, 0x64, 0x65,
	0x78, 0x12, 0x26, 0x0a, 0x0f, 0x73, 0x69, 0x64, 0x65, 0x5f, 0x73, 0x68, 0x6f, 0x77, 0x5f, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x73, 0x69, 0x64, 0x65,
	0x53, 0x68, 0x6f, 0x77, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x74, 0x6f, 0x74,
	0x61, 0x6c, 0x5f, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x0d, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79,
	0x12, 0x23, 0x0a, 0x0d, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63,
	0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x75, 0x73, 0x65, 0x72, 0x43, 0x75, 0x72,
	0x72, 0x65, 0x6e, 0x63, 0x79, 0x22, 0x39, 0x0a, 0x1f, 0x4d, 0x53, 0x47, 0x5f, 0x43, 0x5f, 0x47,
	0x41, 0x4d, 0x45, 0x5f, 0x53, 0x49, 0x44, 0x45, 0x5f, 0x53, 0x48, 0x4f, 0x57, 0x5f, 0x41, 0x4e,
	0x53, 0x57, 0x45, 0x52, 0x5f, 0x52, 0x45, 0x51, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x63, 0x63, 0x70,
	0x65, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x61, 0x63, 0x63, 0x70, 0x65, 0x74,
	0x22, 0xc5, 0x01, 0x0a, 0x20, 0x4d, 0x53, 0x47, 0x5f, 0x43, 0x5f, 0x47, 0x41, 0x4d, 0x45, 0x5f,
	0x53, 0x49, 0x44, 0x45, 0x5f, 0x53, 0x48, 0x4f, 0x57, 0x5f, 0x41, 0x4e, 0x53, 0x57, 0x45, 0x52,
	0x5f, 0x52, 0x45, 0x53, 0x50, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x16, 0x0a,
	0x06, 0x61, 0x63, 0x63, 0x70, 0x65, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x61,
	0x63, 0x63, 0x70, 0x65, 0x74, 0x12, 0x26, 0x0a, 0x0f, 0x63, 0x68, 0x61, 0x69, 0x72, 0x5f, 0x69,
	0x6e, 0x64, 0x65, 0x78, 0x5f, 0x72, 0x65, 0x71, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d,
	0x63, 0x68, 0x61, 0x69, 0x72, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x52, 0x65, 0x71, 0x12, 0x26, 0x0a,
	0x0f, 0x63, 0x68, 0x61, 0x69, 0x72, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x5f, 0x61, 0x6e, 0x73,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x63, 0x68, 0x61, 0x69, 0x72, 0x49, 0x6e, 0x64,
	0x65, 0x78, 0x41, 0x6e, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x77, 0x69, 0x6e, 0x6e, 0x65, 0x72, 0x5f,
	0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x77, 0x69, 0x6e,
	0x6e, 0x65, 0x72, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x22, 0x82, 0x02, 0x0a, 0x0a, 0x55, 0x73, 0x65,
	0x72, 0x53, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x68, 0x61, 0x69, 0x72,
	0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x63, 0x68,
	0x61, 0x69, 0x72, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x15, 0x0a, 0x06, 0x62, 0x5f, 0x67, 0x61,
	0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x62, 0x47, 0x61, 0x6d, 0x65, 0x12,
	0x15, 0x0a, 0x06, 0x62, 0x5f, 0x64, 0x72, 0x6f, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x05, 0x62, 0x44, 0x72, 0x6f, 0x70, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x6f, 0x6b, 0x65, 0x72, 0x73,
	0x18, 0x04, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x06, 0x70, 0x6f, 0x6b, 0x65, 0x72, 0x73, 0x12, 0x45,
	0x0a, 0x0c, 0x70, 0x6f, 0x6b, 0x65, 0x72, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x22, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x77, 0x2e, 0x63, 0x68,
	0x65, 0x73, 0x73, 0x2e, 0x74, 0x65, 0x65, 0x6e, 0x70, 0x61, 0x74, 0x74, 0x69, 0x2e, 0x50, 0x6f,
	0x6b, 0x65, 0x72, 0x73, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0b, 0x70, 0x6f, 0x6b, 0x65, 0x72, 0x73,
	0x54, 0x79, 0x70, 0x65, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x77, 0x69, 0x6e, 0x5f, 0x63, 0x75, 0x72,
	0x72, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x77, 0x69, 0x6e,
	0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x23, 0x0a, 0x0d, 0x75, 0x73, 0x65, 0x72,
	0x5f, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x0c, 0x75, 0x73, 0x65, 0x72, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x22, 0xb2, 0x01,
	0x0a, 0x16, 0x4d, 0x53, 0x47, 0x5f, 0x43, 0x5f, 0x47, 0x41, 0x4d, 0x45, 0x5f, 0x53, 0x45, 0x54,
	0x54, 0x4c, 0x45, 0x5f, 0x52, 0x45, 0x53, 0x50, 0x12, 0x45, 0x0a, 0x0c, 0x75, 0x73, 0x65, 0x72,
	0x73, 0x5f, 0x73, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22,
	0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x77, 0x2e, 0x63, 0x68, 0x65, 0x73, 0x73, 0x2e, 0x74, 0x65,
	0x65, 0x6e, 0x70, 0x61, 0x74, 0x74, 0x69, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x53, 0x65, 0x74, 0x74,
	0x6c, 0x65, 0x52, 0x0b, 0x75, 0x73, 0x65, 0x72, 0x73, 0x53, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x12,
	0x1b, 0x0a, 0x09, 0x77, 0x69, 0x6e, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x08, 0x77, 0x69, 0x6e, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x1d, 0x0a, 0x0a,
	0x77, 0x69, 0x6e, 0x5f, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x09, 0x77, 0x69, 0x6e, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12, 0x15, 0x0a, 0x06, 0x69,
	0x73, 0x5f, 0x6d, 0x61, 0x78, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x69, 0x73, 0x4d,
	0x61, 0x78, 0x22, 0x8d, 0x01, 0x0a, 0x15, 0x4d, 0x53, 0x47, 0x5f, 0x43, 0x5f, 0x55, 0x53, 0x45,
	0x52, 0x5f, 0x43, 0x48, 0x41, 0x49, 0x52, 0x5f, 0x52, 0x45, 0x53, 0x50, 0x12, 0x1f, 0x0a, 0x0b,
	0x63, 0x68, 0x61, 0x69, 0x72, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x0a, 0x63, 0x68, 0x61, 0x69, 0x72, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x15, 0x0a,
	0x06, 0x62, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x62,
	0x55, 0x73, 0x65, 0x72, 0x12, 0x3c, 0x0a, 0x09, 0x67, 0x61, 0x6d, 0x65, 0x5f, 0x75, 0x73, 0x65,
	0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x77,
	0x2e, 0x63, 0x68, 0x65, 0x73, 0x73, 0x2e, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e,
	0x47, 0x61, 0x6d, 0x65, 0x55, 0x73, 0x65, 0x72, 0x52, 0x08, 0x67, 0x61, 0x6d, 0x65, 0x55, 0x73,
	0x65, 0x72, 0x22, 0x71, 0x0a, 0x0e, 0x4d, 0x53, 0x47, 0x5f, 0x43, 0x5f, 0x43, 0x48, 0x41, 0x54,
	0x5f, 0x52, 0x45, 0x51, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x68, 0x61, 0x74, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x63, 0x68, 0x61, 0x74, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x20, 0x0a, 0x0c, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x31, 0x5f, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x74, 0x79, 0x70, 0x65, 0x31, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x12, 0x20, 0x0a, 0x0c, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x32, 0x5f, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x74, 0x79, 0x70, 0x65, 0x32,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x91, 0x01, 0x0a, 0x0f, 0x4d, 0x53, 0x47, 0x5f, 0x43, 0x5f,
	0x43, 0x48, 0x41, 0x54, 0x5f, 0x52, 0x45, 0x53, 0x50, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x68, 0x61,
	0x74, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x63,
	0x68, 0x61, 0x74, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x68, 0x61, 0x74,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x63, 0x68, 0x61,
	0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x20, 0x0a, 0x0c, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x31, 0x5f,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x74, 0x79, 0x70,
	0x65, 0x31, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x20, 0x0a, 0x0c, 0x74, 0x79, 0x70, 0x65, 0x5f,
	0x32, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x74,
	0x79, 0x70, 0x65, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x4c, 0x0a, 0x17, 0x4d, 0x53, 0x47,
	0x5f, 0x43, 0x5f, 0x4d, 0x41, 0x54, 0x43, 0x48, 0x5f, 0x46, 0x49, 0x4e, 0x49, 0x53, 0x48, 0x5f,
	0x52, 0x45, 0x53, 0x50, 0x12, 0x19, 0x0a, 0x08, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x49, 0x64, 0x12,
	0x16, 0x0a, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x2a, 0x7b, 0x0a, 0x0f, 0x54, 0x65, 0x65, 0x6e, 0x70,
	0x61, 0x74, 0x74, 0x69, 0x5f, 0x53, 0x5f, 0x43, 0x6d, 0x64, 0x12, 0x11, 0x0a, 0x0d, 0x43, 0x4d,
	0x44, 0x5f, 0x53, 0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x10, 0x00, 0x12, 0x0e, 0x0a,
	0x0a, 0x43, 0x4d, 0x44, 0x5f, 0x53, 0x5f, 0x50, 0x49, 0x4e, 0x47, 0x10, 0x01, 0x12, 0x0e, 0x0a,
	0x0a, 0x43, 0x4d, 0x44, 0x5f, 0x53, 0x5f, 0x50, 0x4f, 0x4e, 0x47, 0x10, 0x02, 0x12, 0x19, 0x0a,
	0x15, 0x43, 0x4d, 0x44, 0x5f, 0x53, 0x5f, 0x4d, 0x41, 0x54, 0x43, 0x48, 0x5f, 0x53, 0x54, 0x41,
	0x52, 0x54, 0x5f, 0x52, 0x45, 0x51, 0x10, 0x03, 0x12, 0x1a, 0x0a, 0x16, 0x43, 0x4d, 0x44, 0x5f,
	0x53, 0x5f, 0x4d, 0x41, 0x54, 0x43, 0x48, 0x5f, 0x53, 0x54, 0x41, 0x52, 0x54, 0x5f, 0x52, 0x45,
	0x53, 0x50, 0x10, 0x04, 0x2a, 0xb1, 0x07, 0x0a, 0x0c, 0x54, 0x65, 0x65, 0x6e, 0x70, 0x61, 0x74,
	0x74, 0x69, 0x43, 0x6d, 0x64, 0x12, 0x11, 0x0a, 0x0d, 0x43, 0x4d, 0x44, 0x5f, 0x43, 0x5f, 0x49,
	0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x10, 0x00, 0x12, 0x1e, 0x0a, 0x1a, 0x43, 0x4d, 0x44, 0x5f,
	0x43, 0x5f, 0x47, 0x45, 0x54, 0x5f, 0x54, 0x41, 0x42, 0x4c, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x54,
	0x55, 0x53, 0x5f, 0x52, 0x45, 0x51, 0x10, 0x01, 0x12, 0x1f, 0x0a, 0x1b, 0x43, 0x4d, 0x44, 0x5f,
	0x43, 0x5f, 0x47, 0x45, 0x54, 0x5f, 0x54, 0x41, 0x42, 0x4c, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x54,
	0x55, 0x53, 0x5f, 0x52, 0x45, 0x53, 0x50, 0x10, 0x02, 0x12, 0x19, 0x0a, 0x15, 0x43, 0x4d, 0x44,
	0x5f, 0x43, 0x5f, 0x4d, 0x41, 0x54, 0x43, 0x48, 0x5f, 0x52, 0x45, 0x41, 0x44, 0x59, 0x5f, 0x52,
	0x45, 0x51, 0x10, 0x03, 0x12, 0x1a, 0x0a, 0x16, 0x43, 0x4d, 0x44, 0x5f, 0x43, 0x5f, 0x4d, 0x41,
	0x54, 0x43, 0x48, 0x5f, 0x52, 0x45, 0x41, 0x44, 0x59, 0x5f, 0x52, 0x45, 0x53, 0x50, 0x10, 0x04,
	0x12, 0x1a, 0x0a, 0x16, 0x43, 0x4d, 0x44, 0x5f, 0x43, 0x5f, 0x47, 0x41, 0x4d, 0x45, 0x5f, 0x52,
	0x45, 0x41, 0x44, 0x59, 0x5f, 0x33, 0x5f, 0x52, 0x45, 0x51, 0x10, 0x05, 0x12, 0x1b, 0x0a, 0x17,
	0x43, 0x4d, 0x44, 0x5f, 0x43, 0x5f, 0x47, 0x41, 0x4d, 0x45, 0x5f, 0x52, 0x45, 0x41, 0x44, 0x59,
	0x5f, 0x33, 0x5f, 0x52, 0x45, 0x53, 0x50, 0x10, 0x06, 0x12, 0x20, 0x0a, 0x1c, 0x43, 0x4d, 0x44,
	0x5f, 0x43, 0x5f, 0x47, 0x41, 0x4d, 0x45, 0x5f, 0x52, 0x45, 0x41, 0x44, 0x59, 0x5f, 0x43, 0x4f,
	0x4d, 0x46, 0x49, 0x52, 0x4d, 0x5f, 0x52, 0x45, 0x51, 0x10, 0x07, 0x12, 0x21, 0x0a, 0x1d, 0x43,
	0x4d, 0x44, 0x5f, 0x43, 0x5f, 0x47, 0x41, 0x4d, 0x45, 0x5f, 0x52, 0x45, 0x41, 0x44, 0x59, 0x5f,
	0x43, 0x4f, 0x4d, 0x46, 0x49, 0x52, 0x4d, 0x5f, 0x52, 0x45, 0x53, 0x50, 0x10, 0x08, 0x12, 0x1c,
	0x0a, 0x18, 0x43, 0x4d, 0x44, 0x5f, 0x43, 0x5f, 0x47, 0x41, 0x4d, 0x45, 0x5f, 0x44, 0x45, 0x41,
	0x4c, 0x43, 0x41, 0x52, 0x44, 0x53, 0x5f, 0x52, 0x45, 0x51, 0x10, 0x09, 0x12, 0x1d, 0x0a, 0x19,
	0x43, 0x4d, 0x44, 0x5f, 0x43, 0x5f, 0x47, 0x41, 0x4d, 0x45, 0x5f, 0x44, 0x45, 0x41, 0x4c, 0x43,
	0x41, 0x52, 0x44, 0x53, 0x5f, 0x52, 0x45, 0x53, 0x50, 0x10, 0x0a, 0x12, 0x19, 0x0a, 0x15, 0x43,
	0x4d, 0x44, 0x5f, 0x43, 0x5f, 0x47, 0x41, 0x4d, 0x45, 0x5f, 0x4e, 0x4f, 0x54, 0x49, 0x43, 0x45,
	0x5f, 0x52, 0x45, 0x51, 0x10, 0x0b, 0x12, 0x1a, 0x0a, 0x16, 0x43, 0x4d, 0x44, 0x5f, 0x43, 0x5f,
	0x47, 0x41, 0x4d, 0x45, 0x5f, 0x4e, 0x4f, 0x54, 0x49, 0x43, 0x45, 0x5f, 0x52, 0x45, 0x53, 0x50,
	0x10, 0x0c, 0x12, 0x16, 0x0a, 0x12, 0x43, 0x4d, 0x44, 0x5f, 0x43, 0x5f, 0x47, 0x41, 0x4d, 0x45,
	0x5f, 0x42, 0x45, 0x54, 0x5f, 0x52, 0x45, 0x51, 0x10, 0x0d, 0x12, 0x17, 0x0a, 0x13, 0x43, 0x4d,
	0x44, 0x5f, 0x43, 0x5f, 0x47, 0x41, 0x4d, 0x45, 0x5f, 0x42, 0x45, 0x54, 0x5f, 0x52, 0x45, 0x53,
	0x50, 0x10, 0x0e, 0x12, 0x16, 0x0a, 0x12, 0x43, 0x4d, 0x44, 0x5f, 0x43, 0x5f, 0x47, 0x41, 0x4d,
	0x45, 0x5f, 0x53, 0x45, 0x45, 0x5f, 0x52, 0x45, 0x51, 0x10, 0x0f, 0x12, 0x17, 0x0a, 0x13, 0x43,
	0x4d, 0x44, 0x5f, 0x43, 0x5f, 0x47, 0x41, 0x4d, 0x45, 0x5f, 0x53, 0x45, 0x45, 0x5f, 0x52, 0x45,
	0x53, 0x50, 0x10, 0x10, 0x12, 0x17, 0x0a, 0x13, 0x43, 0x4d, 0x44, 0x5f, 0x43, 0x5f, 0x47, 0x41,
	0x4d, 0x45, 0x5f, 0x53, 0x48, 0x4f, 0x57, 0x5f, 0x52, 0x45, 0x51, 0x10, 0x11, 0x12, 0x18, 0x0a,
	0x14, 0x43, 0x4d, 0x44, 0x5f, 0x43, 0x5f, 0x47, 0x41, 0x4d, 0x45, 0x5f, 0x53, 0x48, 0x4f, 0x57,
	0x5f, 0x52, 0x45, 0x53, 0x50, 0x10, 0x12, 0x12, 0x1c, 0x0a, 0x18, 0x43, 0x4d, 0x44, 0x5f, 0x43,
	0x5f, 0x47, 0x41, 0x4d, 0x45, 0x5f, 0x53, 0x49, 0x44, 0x45, 0x5f, 0x53, 0x48, 0x4f, 0x57, 0x5f,
	0x52, 0x45, 0x51, 0x10, 0x13, 0x12, 0x1d, 0x0a, 0x19, 0x43, 0x4d, 0x44, 0x5f, 0x43, 0x5f, 0x47,
	0x41, 0x4d, 0x45, 0x5f, 0x53, 0x49, 0x44, 0x45, 0x5f, 0x53, 0x48, 0x4f, 0x57, 0x5f, 0x52, 0x45,
	0x53, 0x50, 0x10, 0x14, 0x12, 0x23, 0x0a, 0x1f, 0x43, 0x4d, 0x44, 0x5f, 0x43, 0x5f, 0x47, 0x41,
	0x4d, 0x45, 0x5f, 0x53, 0x49, 0x44, 0x45, 0x5f, 0x53, 0x48, 0x4f, 0x57, 0x5f, 0x41, 0x4e, 0x53,
	0x57, 0x45, 0x52, 0x5f, 0x52, 0x45, 0x51, 0x10, 0x15, 0x12, 0x24, 0x0a, 0x20, 0x43, 0x4d, 0x44,
	0x5f, 0x43, 0x5f, 0x47, 0x41, 0x4d, 0x45, 0x5f, 0x53, 0x49, 0x44, 0x45, 0x5f, 0x53, 0x48, 0x4f,
	0x57, 0x5f, 0x41, 0x4e, 0x53, 0x57, 0x45, 0x52, 0x5f, 0x52, 0x45, 0x53, 0x50, 0x10, 0x16, 0x12,
	0x19, 0x0a, 0x15, 0x43, 0x4d, 0x44, 0x5f, 0x43, 0x5f, 0x47, 0x41, 0x4d, 0x45, 0x5f, 0x53, 0x45,
	0x54, 0x54, 0x4c, 0x45, 0x5f, 0x52, 0x45, 0x51, 0x10, 0x17, 0x12, 0x1a, 0x0a, 0x16, 0x43, 0x4d,
	0x44, 0x5f, 0x43, 0x5f, 0x47, 0x41, 0x4d, 0x45, 0x5f, 0x53, 0x45, 0x54, 0x54, 0x4c, 0x45, 0x5f,
	0x52, 0x45, 0x53, 0x50, 0x10, 0x18, 0x12, 0x1b, 0x0a, 0x17, 0x43, 0x4d, 0x44, 0x5f, 0x43, 0x5f,
	0x47, 0x41, 0x4d, 0x45, 0x5f, 0x43, 0x4f, 0x4e, 0x54, 0x49, 0x4e, 0x55, 0x45, 0x5f, 0x52, 0x45,
	0x51, 0x10, 0x19, 0x12, 0x1c, 0x0a, 0x18, 0x43, 0x4d, 0x44, 0x5f, 0x43, 0x5f, 0x47, 0x41, 0x4d,
	0x45, 0x5f, 0x43, 0x4f, 0x4e, 0x54, 0x49, 0x4e, 0x55, 0x45, 0x5f, 0x52, 0x45, 0x53, 0x50, 0x10,
	0x1a, 0x12, 0x18, 0x0a, 0x14, 0x43, 0x4d, 0x44, 0x5f, 0x43, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x5f,
	0x43, 0x48, 0x41, 0x49, 0x52, 0x5f, 0x52, 0x45, 0x51, 0x10, 0x3c, 0x12, 0x19, 0x0a, 0x15, 0x43,
	0x4d, 0x44, 0x5f, 0x43, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x43, 0x48, 0x41, 0x49, 0x52, 0x5f,
	0x52, 0x45, 0x53, 0x50, 0x10, 0x3d, 0x12, 0x12, 0x0a, 0x0e, 0x43, 0x4d, 0x44, 0x5f, 0x43, 0x5f,
	0x43, 0x48, 0x41, 0x54, 0x5f, 0x52, 0x45, 0x51, 0x10, 0x3e, 0x12, 0x13, 0x0a, 0x0f, 0x43, 0x4d,
	0x44, 0x5f, 0x43, 0x5f, 0x43, 0x48, 0x41, 0x54, 0x5f, 0x52, 0x45, 0x53, 0x50, 0x10, 0x3f, 0x12,
	0x1a, 0x0a, 0x16, 0x43, 0x4d, 0x44, 0x5f, 0x43, 0x5f, 0x4d, 0x41, 0x54, 0x43, 0x48, 0x5f, 0x46,
	0x49, 0x4e, 0x49, 0x53, 0x48, 0x5f, 0x52, 0x45, 0x51, 0x10, 0x64, 0x12, 0x1b, 0x0a, 0x17, 0x43,
	0x4d, 0x44, 0x5f, 0x43, 0x5f, 0x4d, 0x41, 0x54, 0x43, 0x48, 0x5f, 0x46, 0x49, 0x4e, 0x49, 0x53,
	0x48, 0x5f, 0x52, 0x45, 0x53, 0x50, 0x10, 0x65, 0x2a, 0xd0, 0x01, 0x0a, 0x09, 0x47, 0x61, 0x6d,
	0x65, 0x50, 0x68, 0x61, 0x73, 0x65, 0x12, 0x0f, 0x0a, 0x0b, 0x50, 0x48, 0x53, 0x5f, 0x49, 0x4e,
	0x56, 0x41, 0x4c, 0x49, 0x44, 0x10, 0x00, 0x12, 0x13, 0x0a, 0x0f, 0x50, 0x48, 0x53, 0x5f, 0x4d,
	0x61, 0x74, 0x63, 0x68, 0x5f, 0x52, 0x65, 0x61, 0x64, 0x79, 0x10, 0x01, 0x12, 0x12, 0x0a, 0x0e,
	0x50, 0x48, 0x53, 0x5f, 0x47, 0x61, 0x6d, 0x65, 0x5f, 0x52, 0x65, 0x61, 0x64, 0x79, 0x10, 0x02,
	0x12, 0x16, 0x0a, 0x12, 0x50, 0x48, 0x53, 0x5f, 0x47, 0x61, 0x6d, 0x65, 0x5f, 0x44, 0x65, 0x61,
	0x6c, 0x43, 0x61, 0x72, 0x64, 0x73, 0x10, 0x03, 0x12, 0x15, 0x0a, 0x11, 0x50, 0x48, 0x53, 0x5f,
	0x47, 0x61, 0x6d, 0x69, 0x6e, 0x67, 0x5f, 0x4e, 0x6f, 0x74, 0x69, 0x63, 0x65, 0x10, 0x04, 0x12,
	0x15, 0x0a, 0x11, 0x50, 0x48, 0x53, 0x5f, 0x47, 0x61, 0x6d, 0x69, 0x6e, 0x67, 0x5f, 0x42, 0x65,
	0x74, 0x69, 0x6e, 0x67, 0x10, 0x05, 0x12, 0x17, 0x0a, 0x13, 0x50, 0x48, 0x53, 0x5f, 0x47, 0x61,
	0x6d, 0x69, 0x6e, 0x67, 0x5f, 0x53, 0x69, 0x64, 0x65, 0x53, 0x68, 0x6f, 0x77, 0x10, 0x06, 0x12,
	0x13, 0x0a, 0x0f, 0x50, 0x48, 0x53, 0x5f, 0x47, 0x61, 0x6d, 0x65, 0x5f, 0x53, 0x65, 0x74, 0x74,
	0x6c, 0x65, 0x10, 0x07, 0x12, 0x15, 0x0a, 0x11, 0x50, 0x48, 0x53, 0x5f, 0x47, 0x61, 0x6d, 0x65,
	0x5f, 0x43, 0x6f, 0x6e, 0x74, 0x69, 0x6e, 0x75, 0x65, 0x10, 0x08, 0x2a, 0x68, 0x0a, 0x0a, 0x50,
	0x6f, 0x6b, 0x65, 0x72, 0x73, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0b, 0x0a, 0x07, 0x50, 0x54, 0x5f,
	0x48, 0x69, 0x67, 0x68, 0x10, 0x00, 0x12, 0x0b, 0x0a, 0x07, 0x50, 0x54, 0x5f, 0x50, 0x61, 0x69,
	0x72, 0x10, 0x01, 0x12, 0x0d, 0x0a, 0x09, 0x50, 0x54, 0x5f, 0x43, 0x6f, 0x6c, 0x6f, 0x75, 0x72,
	0x10, 0x02, 0x12, 0x0f, 0x0a, 0x0b, 0x50, 0x54, 0x5f, 0x53, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63,
	0x65, 0x10, 0x03, 0x12, 0x14, 0x0a, 0x10, 0x50, 0x54, 0x5f, 0x50, 0x75, 0x72, 0x65, 0x5f, 0x53,
	0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x10, 0x04, 0x12, 0x0a, 0x0a, 0x06, 0x50, 0x54, 0x5f,
	0x53, 0x65, 0x74, 0x10, 0x05, 0x42, 0x1a, 0x5a, 0x18, 0x2e, 0x2f, 0x63, 0x6f, 0x6d, 0x2f, 0x63,
	0x77, 0x2f, 0x63, 0x68, 0x65, 0x73, 0x73, 0x2f, 0x74, 0x65, 0x65, 0x6e, 0x70, 0x61, 0x74, 0x74,
	0x69, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_teenpatti_proto_rawDescOnce sync.Once
	file_teenpatti_proto_rawDescData = file_teenpatti_proto_rawDesc
)

func file_teenpatti_proto_rawDescGZIP() []byte {
	file_teenpatti_proto_rawDescOnce.Do(func() {
		file_teenpatti_proto_rawDescData = protoimpl.X.CompressGZIP(file_teenpatti_proto_rawDescData)
	})
	return file_teenpatti_proto_rawDescData
}

var file_teenpatti_proto_enumTypes = make([]protoimpl.EnumInfo, 4)
var file_teenpatti_proto_msgTypes = make([]protoimpl.MessageInfo, 23)
var file_teenpatti_proto_goTypes = []interface{}{
	(Teenpatti_S_Cmd)(0),                     // 0: com.cw.chess.teenpatti.Teenpatti_S_Cmd
	(TeenpattiCmd)(0),                        // 1: com.cw.chess.teenpatti.TeenpattiCmd
	(GamePhase)(0),                           // 2: com.cw.chess.teenpatti.GamePhase
	(PokersType)(0),                          // 3: com.cw.chess.teenpatti.PokersType
	(*TeenpattiStartRequest)(nil),            // 4: com.cw.chess.teenpatti.TeenpattiStartRequest
	(*TeenpattiStartResponse)(nil),           // 5: com.cw.chess.teenpatti.TeenpattiStartResponse
	(*TableData)(nil),                        // 6: com.cw.chess.teenpatti.TableData
	(*MSG_C_COMMON_REQ)(nil),                 // 7: com.cw.chess.teenpatti.MSG_C_COMMON_REQ
	(*MSG_C_COMMON_RESP)(nil),                // 8: com.cw.chess.teenpatti.MSG_C_COMMON_RESP
	(*ChairStatus)(nil),                      // 9: com.cw.chess.teenpatti.ChairStatus
	(*MSG_C_GET_TABLE_STATUS_RESP)(nil),      // 10: com.cw.chess.teenpatti.MSG_C_GET_TABLE_STATUS_RESP
	(*MSG_C_GAME_READY_3_RESP)(nil),          // 11: com.cw.chess.teenpatti.MSG_C_GAME_READY_3_RESP
	(*MSG_C_GAME_DEALCARDS_RESP)(nil),        // 12: com.cw.chess.teenpatti.MSG_C_GAME_DEALCARDS_RESP
	(*MSG_C_GAME_NOTICE_RESP)(nil),           // 13: com.cw.chess.teenpatti.MSG_C_GAME_NOTICE_RESP
	(*MSG_C_GAME_BET_REQ)(nil),               // 14: com.cw.chess.teenpatti.MSG_C_GAME_BET_REQ
	(*MSG_C_GAME_BET_RESP)(nil),              // 15: com.cw.chess.teenpatti.MSG_C_GAME_BET_RESP
	(*MSG_C_GAME_SEE_RESP)(nil),              // 16: com.cw.chess.teenpatti.MSG_C_GAME_SEE_RESP
	(*MSG_C_GAME_SHOW_RESP)(nil),             // 17: com.cw.chess.teenpatti.MSG_C_GAME_SHOW_RESP
	(*MSG_C_GAME_SIDE_SHOW_RESP)(nil),        // 18: com.cw.chess.teenpatti.MSG_C_GAME_SIDE_SHOW_RESP
	(*MSG_C_GAME_SIDE_SHOW_ANSWER_REQ)(nil),  // 19: com.cw.chess.teenpatti.MSG_C_GAME_SIDE_SHOW_ANSWER_REQ
	(*MSG_C_GAME_SIDE_SHOW_ANSWER_RESP)(nil), // 20: com.cw.chess.teenpatti.MSG_C_GAME_SIDE_SHOW_ANSWER_RESP
	(*UserSettle)(nil),                       // 21: com.cw.chess.teenpatti.UserSettle
	(*MSG_C_GAME_SETTLE_RESP)(nil),           // 22: com.cw.chess.teenpatti.MSG_C_GAME_SETTLE_RESP
	(*MSG_C_USER_CHAIR_RESP)(nil),            // 23: com.cw.chess.teenpatti.MSG_C_USER_CHAIR_RESP
	(*MSG_C_CHAT_REQ)(nil),                   // 24: com.cw.chess.teenpatti.MSG_C_CHAT_REQ
	(*MSG_C_CHAT_RESP)(nil),                  // 25: com.cw.chess.teenpatti.MSG_C_CHAT_RESP
	(*MSG_C_MATCH_FINISH_RESP)(nil),          // 26: com.cw.chess.teenpatti.MSG_C_MATCH_FINISH_RESP
	(*platform.GameUser)(nil),                // 27: com.cw.chess.platform.GameUser
	(*platform.TeepattiLevelDesc)(nil),       // 28: com.cw.chess.platform.TeepattiLevelDesc
}
var file_teenpatti_proto_depIdxs = []int32{
	27, // 0: com.cw.chess.teenpatti.TeenpattiStartRequest.users:type_name -> com.cw.chess.platform.GameUser
	3,  // 1: com.cw.chess.teenpatti.ChairStatus.PT:type_name -> com.cw.chess.teenpatti.PokersType
	27, // 2: com.cw.chess.teenpatti.ChairStatus.user:type_name -> com.cw.chess.platform.GameUser
	28, // 3: com.cw.chess.teenpatti.MSG_C_GET_TABLE_STATUS_RESP.level_desc:type_name -> com.cw.chess.platform.TeepattiLevelDesc
	2,  // 4: com.cw.chess.teenpatti.MSG_C_GET_TABLE_STATUS_RESP.game_phase:type_name -> com.cw.chess.teenpatti.GamePhase
	9,  // 5: com.cw.chess.teenpatti.MSG_C_GET_TABLE_STATUS_RESP.charis:type_name -> com.cw.chess.teenpatti.ChairStatus
	9,  // 6: com.cw.chess.teenpatti.MSG_C_GAME_DEALCARDS_RESP.charis:type_name -> com.cw.chess.teenpatti.ChairStatus
	3,  // 7: com.cw.chess.teenpatti.MSG_C_GAME_SEE_RESP.poker_type:type_name -> com.cw.chess.teenpatti.PokersType
	3,  // 8: com.cw.chess.teenpatti.MSG_C_GAME_SHOW_RESP.PT:type_name -> com.cw.chess.teenpatti.PokersType
	3,  // 9: com.cw.chess.teenpatti.MSG_C_GAME_SHOW_RESP.PT_ans:type_name -> com.cw.chess.teenpatti.PokersType
	3,  // 10: com.cw.chess.teenpatti.UserSettle.pokers_types:type_name -> com.cw.chess.teenpatti.PokersType
	21, // 11: com.cw.chess.teenpatti.MSG_C_GAME_SETTLE_RESP.users_settle:type_name -> com.cw.chess.teenpatti.UserSettle
	27, // 12: com.cw.chess.teenpatti.MSG_C_USER_CHAIR_RESP.game_user:type_name -> com.cw.chess.platform.GameUser
	13, // [13:13] is the sub-list for method output_type
	13, // [13:13] is the sub-list for method input_type
	13, // [13:13] is the sub-list for extension type_name
	13, // [13:13] is the sub-list for extension extendee
	0,  // [0:13] is the sub-list for field type_name
}

func init() { file_teenpatti_proto_init() }
func file_teenpatti_proto_init() {
	if File_teenpatti_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_teenpatti_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TeenpattiStartRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_teenpatti_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TeenpattiStartResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_teenpatti_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TableData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_teenpatti_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MSG_C_COMMON_REQ); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_teenpatti_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MSG_C_COMMON_RESP); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_teenpatti_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChairStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_teenpatti_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MSG_C_GET_TABLE_STATUS_RESP); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_teenpatti_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MSG_C_GAME_READY_3_RESP); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_teenpatti_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MSG_C_GAME_DEALCARDS_RESP); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_teenpatti_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MSG_C_GAME_NOTICE_RESP); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_teenpatti_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MSG_C_GAME_BET_REQ); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_teenpatti_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MSG_C_GAME_BET_RESP); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_teenpatti_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MSG_C_GAME_SEE_RESP); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_teenpatti_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MSG_C_GAME_SHOW_RESP); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_teenpatti_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MSG_C_GAME_SIDE_SHOW_RESP); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_teenpatti_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MSG_C_GAME_SIDE_SHOW_ANSWER_REQ); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_teenpatti_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MSG_C_GAME_SIDE_SHOW_ANSWER_RESP); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_teenpatti_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserSettle); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_teenpatti_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MSG_C_GAME_SETTLE_RESP); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_teenpatti_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MSG_C_USER_CHAIR_RESP); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_teenpatti_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MSG_C_CHAT_REQ); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_teenpatti_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MSG_C_CHAT_RESP); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_teenpatti_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MSG_C_MATCH_FINISH_RESP); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_teenpatti_proto_rawDesc,
			NumEnums:      4,
			NumMessages:   23,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_teenpatti_proto_goTypes,
		DependencyIndexes: file_teenpatti_proto_depIdxs,
		EnumInfos:         file_teenpatti_proto_enumTypes,
		MessageInfos:      file_teenpatti_proto_msgTypes,
	}.Build()
	File_teenpatti_proto = out.File
	file_teenpatti_proto_rawDesc = nil
	file_teenpatti_proto_goTypes = nil
	file_teenpatti_proto_depIdxs = nil
}
