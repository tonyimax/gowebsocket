// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.26.0
// 	protoc        v3.12.4
// source: web_msg_define.proto

package define

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// 服务类型
type ServerType int32

const (
	ServerType_SERVER_TPYE_INVALID ServerType = 0   // 无效
	ServerType_SERVER_WEB          ServerType = 100 // web
)

// Enum value maps for ServerType.
var (
	ServerType_name = map[int32]string{
		0:   "SERVER_TPYE_INVALID",
		100: "SERVER_WEB",
	}
	ServerType_value = map[string]int32{
		"SERVER_TPYE_INVALID": 0,
		"SERVER_WEB":          100,
	}
)

func (x ServerType) Enum() *ServerType {
	p := new(ServerType)
	*p = x
	return p
}

func (x ServerType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ServerType) Descriptor() protoreflect.EnumDescriptor {
	return file_web_msg_define_proto_enumTypes[0].Descriptor()
}

func (ServerType) Type() protoreflect.EnumType {
	return &file_web_msg_define_proto_enumTypes[0]
}

func (x ServerType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ServerType.Descriptor instead.
func (ServerType) EnumDescriptor() ([]byte, []int) {
	return file_web_msg_define_proto_rawDescGZIP(), []int{0}
}

// 网关消息
type ServerWebCmd int32

const (
	ServerWebCmd_CMD_GATEWAY_INVALID             ServerWebCmd = 0 // 无效网关消息
	ServerWebCmd_CMD_WEB_UPDATE_BALANCE_REQ      ServerWebCmd = 1 // 更新玩家余额请求
	ServerWebCmd_CMD_WEB_UPDATE_BALANCE_REP      ServerWebCmd = 2 // 更新玩家余额回复
	ServerWebCmd_CMD_WEB_FREEZE_PLAYER_REQ       ServerWebCmd = 3 // 冻结用户请求
	ServerWebCmd_CMD_WEB_FREEZE_PLAYER_REP       ServerWebCmd = 4 // 冻结用户返回
	ServerWebCmd_CMD_WEB_TABLE_INFORMATION_REQ   ServerWebCmd = 5 // 获取桌子信息请求
	ServerWebCmd_CMD_WEB_TABLE_INFORMATION_REP   ServerWebCmd = 6 // 获取桌子信息返回
	ServerWebCmd_CMD_WEB_PAY_CW_CALLBACK_REQ     ServerWebCmd = 7 // CW的回调经过httpsrv处理后，httpsrv请求给大厅处理
	ServerWebCmd_CMD_WEB_PAY_CW_CALLBACK_REP     ServerWebCmd = 8
	ServerWebCmd_CMD_API_TASK_STANDTEXAS_REQ     ServerWebCmd = 9  // 德州任务条件请求
	ServerWebCmd_CMD_API_TASK_STANDTEXAS_REP     ServerWebCmd = 10 // 无意义
	ServerWebCmd_CMD_WEB_SYS_MESSAGE_TO_USER_REQ ServerWebCmd = 11 // 向某用户进行消息通知
	ServerWebCmd_CMD_WEB_SYS_MESSAGE_TO_USER_REP ServerWebCmd = 12 // 向某用户进行消息通知回复
	ServerWebCmd_CMD_WEB_MAIL_TO_USER_REQ        ServerWebCmd = 13 // 邮件请求
	ServerWebCmd_CMD_WEB_MAIL_TO_USER_RESP       ServerWebCmd = 14 // 邮件请求回复
	ServerWebCmd_CMD_WEB_USER_COUNT_REQ          ServerWebCmd = 15 // 请求总在线人数
	ServerWebCmd_CMD_WEB_USER_COUNT_RESP         ServerWebCmd = 16 // 请求总在线人数
	ServerWebCmd_CMD_WEB_UPDATE_PARTICES_REQ     ServerWebCmd = 17 // 请求加练习币：WebUpdateParticesReq
	ServerWebCmd_CMD_WEB_UPDATE_PARTICES_RESP    ServerWebCmd = 18 // 请求加练习币返回：WebUpdateParticesResp
	ServerWebCmd_CMD_WEB_PHP_2_USER_COMMON_REQ   ServerWebCmd = 19 // PHP发给客户端的通用协议
	ServerWebCmd_CMD_WEB_PHP_2_USER_COMMON_RESP  ServerWebCmd = 20 // PHP发给客户端的通用协议
	ServerWebCmd_CMD_WEB_SYNC_BALANCE_REQ        ServerWebCmd = 21 // 更新玩家余额请求：注意此协议和 CMD_WEB_UPDATE_BALANCE_REQ不一样的地方是只是同步金额
	ServerWebCmd_CMD_WEB_SYNC_BALANCE_REP        ServerWebCmd = 22 // 更新玩家余额回复
)

// Enum value maps for ServerWebCmd.
var (
	ServerWebCmd_name = map[int32]string{
		0:  "CMD_GATEWAY_INVALID",
		1:  "CMD_WEB_UPDATE_BALANCE_REQ",
		2:  "CMD_WEB_UPDATE_BALANCE_REP",
		3:  "CMD_WEB_FREEZE_PLAYER_REQ",
		4:  "CMD_WEB_FREEZE_PLAYER_REP",
		5:  "CMD_WEB_TABLE_INFORMATION_REQ",
		6:  "CMD_WEB_TABLE_INFORMATION_REP",
		7:  "CMD_WEB_PAY_CW_CALLBACK_REQ",
		8:  "CMD_WEB_PAY_CW_CALLBACK_REP",
		9:  "CMD_API_TASK_STANDTEXAS_REQ",
		10: "CMD_API_TASK_STANDTEXAS_REP",
		11: "CMD_WEB_SYS_MESSAGE_TO_USER_REQ",
		12: "CMD_WEB_SYS_MESSAGE_TO_USER_REP",
		13: "CMD_WEB_MAIL_TO_USER_REQ",
		14: "CMD_WEB_MAIL_TO_USER_RESP",
		15: "CMD_WEB_USER_COUNT_REQ",
		16: "CMD_WEB_USER_COUNT_RESP",
		17: "CMD_WEB_UPDATE_PARTICES_REQ",
		18: "CMD_WEB_UPDATE_PARTICES_RESP",
		19: "CMD_WEB_PHP_2_USER_COMMON_REQ",
		20: "CMD_WEB_PHP_2_USER_COMMON_RESP",
		21: "CMD_WEB_SYNC_BALANCE_REQ",
		22: "CMD_WEB_SYNC_BALANCE_REP",
	}
	ServerWebCmd_value = map[string]int32{
		"CMD_GATEWAY_INVALID":             0,
		"CMD_WEB_UPDATE_BALANCE_REQ":      1,
		"CMD_WEB_UPDATE_BALANCE_REP":      2,
		"CMD_WEB_FREEZE_PLAYER_REQ":       3,
		"CMD_WEB_FREEZE_PLAYER_REP":       4,
		"CMD_WEB_TABLE_INFORMATION_REQ":   5,
		"CMD_WEB_TABLE_INFORMATION_REP":   6,
		"CMD_WEB_PAY_CW_CALLBACK_REQ":     7,
		"CMD_WEB_PAY_CW_CALLBACK_REP":     8,
		"CMD_API_TASK_STANDTEXAS_REQ":     9,
		"CMD_API_TASK_STANDTEXAS_REP":     10,
		"CMD_WEB_SYS_MESSAGE_TO_USER_REQ": 11,
		"CMD_WEB_SYS_MESSAGE_TO_USER_REP": 12,
		"CMD_WEB_MAIL_TO_USER_REQ":        13,
		"CMD_WEB_MAIL_TO_USER_RESP":       14,
		"CMD_WEB_USER_COUNT_REQ":          15,
		"CMD_WEB_USER_COUNT_RESP":         16,
		"CMD_WEB_UPDATE_PARTICES_REQ":     17,
		"CMD_WEB_UPDATE_PARTICES_RESP":    18,
		"CMD_WEB_PHP_2_USER_COMMON_REQ":   19,
		"CMD_WEB_PHP_2_USER_COMMON_RESP":  20,
		"CMD_WEB_SYNC_BALANCE_REQ":        21,
		"CMD_WEB_SYNC_BALANCE_REP":        22,
	}
)

func (x ServerWebCmd) Enum() *ServerWebCmd {
	p := new(ServerWebCmd)
	*p = x
	return p
}

func (x ServerWebCmd) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ServerWebCmd) Descriptor() protoreflect.EnumDescriptor {
	return file_web_msg_define_proto_enumTypes[1].Descriptor()
}

func (ServerWebCmd) Type() protoreflect.EnumType {
	return &file_web_msg_define_proto_enumTypes[1]
}

func (x ServerWebCmd) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ServerWebCmd.Descriptor instead.
func (ServerWebCmd) EnumDescriptor() ([]byte, []int) {
	return file_web_msg_define_proto_rawDescGZIP(), []int{1}
}

type PHP_2_USER_CMD int32

const (
	PHP_2_USER_CMD_PHP_CMD_INVALID      PHP_2_USER_CMD = 0
	PHP_2_USER_CMD_PHP_CMD_EXAMPLE_REQ  PHP_2_USER_CMD = 1 // PHP需要通知客户端的结构样例：对应结构-->PHP_2_USER_Example_REQ
	PHP_2_USER_CMD_PHP_CMD_EXAMPLE_RESP PHP_2_USER_CMD = 2 // 无意义：客户端不需要使用TCP来请求PHP数据，直接POST就好了，这里只是遵守规范
)

// Enum value maps for PHP_2_USER_CMD.
var (
	PHP_2_USER_CMD_name = map[int32]string{
		0: "PHP_CMD_INVALID",
		1: "PHP_CMD_EXAMPLE_REQ",
		2: "PHP_CMD_EXAMPLE_RESP",
	}
	PHP_2_USER_CMD_value = map[string]int32{
		"PHP_CMD_INVALID":      0,
		"PHP_CMD_EXAMPLE_REQ":  1,
		"PHP_CMD_EXAMPLE_RESP": 2,
	}
)

func (x PHP_2_USER_CMD) Enum() *PHP_2_USER_CMD {
	p := new(PHP_2_USER_CMD)
	*p = x
	return p
}

func (x PHP_2_USER_CMD) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PHP_2_USER_CMD) Descriptor() protoreflect.EnumDescriptor {
	return file_web_msg_define_proto_enumTypes[2].Descriptor()
}

func (PHP_2_USER_CMD) Type() protoreflect.EnumType {
	return &file_web_msg_define_proto_enumTypes[2]
}

func (x PHP_2_USER_CMD) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PHP_2_USER_CMD.Descriptor instead.
func (PHP_2_USER_CMD) EnumDescriptor() ([]byte, []int) {
	return file_web_msg_define_proto_rawDescGZIP(), []int{2}
}

type PHP_2_USER_DATA_REQ struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId   uint32 `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`   // 发给某用户
	PHP_CMD  uint32 `protobuf:"varint,2,opt,name=PHP_CMD,json=PHPCMD,proto3" json:"PHP_CMD,omitempty"`   // PHP_2_USER_CMD
	PHP_DATA []byte `protobuf:"bytes,3,opt,name=PHP_DATA,json=PHPDATA,proto3" json:"PHP_DATA,omitempty"` // 实际使用的message数据
}

func (x *PHP_2_USER_DATA_REQ) Reset() {
	*x = PHP_2_USER_DATA_REQ{}
	if protoimpl.UnsafeEnabled {
		mi := &file_web_msg_define_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PHP_2_USER_DATA_REQ) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PHP_2_USER_DATA_REQ) ProtoMessage() {}

func (x *PHP_2_USER_DATA_REQ) ProtoReflect() protoreflect.Message {
	mi := &file_web_msg_define_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PHP_2_USER_DATA_REQ.ProtoReflect.Descriptor instead.
func (*PHP_2_USER_DATA_REQ) Descriptor() ([]byte, []int) {
	return file_web_msg_define_proto_rawDescGZIP(), []int{0}
}

func (x *PHP_2_USER_DATA_REQ) GetUserId() uint32 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *PHP_2_USER_DATA_REQ) GetPHP_CMD() uint32 {
	if x != nil {
		return x.PHP_CMD
	}
	return 0
}

func (x *PHP_2_USER_DATA_REQ) GetPHP_DATA() []byte {
	if x != nil {
		return x.PHP_DATA
	}
	return nil
}

type PHP_2_USER_DATA_REP struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result uint32 `protobuf:"varint,1,opt,name=result,proto3" json:"result,omitempty"`
}

func (x *PHP_2_USER_DATA_REP) Reset() {
	*x = PHP_2_USER_DATA_REP{}
	if protoimpl.UnsafeEnabled {
		mi := &file_web_msg_define_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PHP_2_USER_DATA_REP) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PHP_2_USER_DATA_REP) ProtoMessage() {}

func (x *PHP_2_USER_DATA_REP) ProtoReflect() protoreflect.Message {
	mi := &file_web_msg_define_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PHP_2_USER_DATA_REP.ProtoReflect.Descriptor instead.
func (*PHP_2_USER_DATA_REP) Descriptor() ([]byte, []int) {
	return file_web_msg_define_proto_rawDescGZIP(), []int{1}
}

func (x *PHP_2_USER_DATA_REP) GetResult() uint32 {
	if x != nil {
		return x.Result
	}
	return 0
}

type PHP_2_USER_Example_REQ struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DataInt    uint32 `protobuf:"varint,1,opt,name=data_int,json=dataInt,proto3" json:"data_int,omitempty"`
	DataString string `protobuf:"bytes,2,opt,name=data_string,json=dataString,proto3" json:"data_string,omitempty"`
}

func (x *PHP_2_USER_Example_REQ) Reset() {
	*x = PHP_2_USER_Example_REQ{}
	if protoimpl.UnsafeEnabled {
		mi := &file_web_msg_define_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PHP_2_USER_Example_REQ) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PHP_2_USER_Example_REQ) ProtoMessage() {}

func (x *PHP_2_USER_Example_REQ) ProtoReflect() protoreflect.Message {
	mi := &file_web_msg_define_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PHP_2_USER_Example_REQ.ProtoReflect.Descriptor instead.
func (*PHP_2_USER_Example_REQ) Descriptor() ([]byte, []int) {
	return file_web_msg_define_proto_rawDescGZIP(), []int{2}
}

func (x *PHP_2_USER_Example_REQ) GetDataInt() uint32 {
	if x != nil {
		return x.DataInt
	}
	return 0
}

func (x *PHP_2_USER_Example_REQ) GetDataString() string {
	if x != nil {
		return x.DataString
	}
	return ""
}

var File_web_msg_define_proto protoreflect.FileDescriptor

var file_web_msg_define_proto_rawDesc = []byte{
	0x0a, 0x14, 0x77, 0x65, 0x62, 0x5f, 0x6d, 0x73, 0x67, 0x5f, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x1c, 0x63, 0x6f, 0x6d, 0x2e, 0x68, 0x69, 0x70, 0x6f,
	0x6b, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x77, 0x65, 0x62, 0x2e, 0x64, 0x65,
	0x66, 0x69, 0x6e, 0x65, 0x22, 0x62, 0x0a, 0x13, 0x50, 0x48, 0x50, 0x5f, 0x32, 0x5f, 0x55, 0x53,
	0x45, 0x52, 0x5f, 0x44, 0x41, 0x54, 0x41, 0x5f, 0x52, 0x45, 0x51, 0x12, 0x17, 0x0a, 0x07, 0x75,
	0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x75, 0x73,
	0x65, 0x72, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x50, 0x48, 0x50, 0x5f, 0x43, 0x4d, 0x44, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x50, 0x48, 0x50, 0x43, 0x4d, 0x44, 0x12, 0x19, 0x0a,
	0x08, 0x50, 0x48, 0x50, 0x5f, 0x44, 0x41, 0x54, 0x41, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52,
	0x07, 0x50, 0x48, 0x50, 0x44, 0x41, 0x54, 0x41, 0x22, 0x2d, 0x0a, 0x13, 0x50, 0x48, 0x50, 0x5f,
	0x32, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x44, 0x41, 0x54, 0x41, 0x5f, 0x52, 0x45, 0x50, 0x12,
	0x16, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x54, 0x0a, 0x16, 0x50, 0x48, 0x50, 0x5f, 0x32,
	0x5f, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x45, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x5f, 0x52, 0x45,
	0x51, 0x12, 0x19, 0x0a, 0x08, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x69, 0x6e, 0x74, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x07, 0x64, 0x61, 0x74, 0x61, 0x49, 0x6e, 0x74, 0x12, 0x1f, 0x0a, 0x0b,
	0x64, 0x61, 0x74, 0x61, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0a, 0x64, 0x61, 0x74, 0x61, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x2a, 0x35, 0x0a,
	0x0a, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x17, 0x0a, 0x13, 0x53,
	0x45, 0x52, 0x56, 0x45, 0x52, 0x5f, 0x54, 0x50, 0x59, 0x45, 0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c,
	0x49, 0x44, 0x10, 0x00, 0x12, 0x0e, 0x0a, 0x0a, 0x53, 0x45, 0x52, 0x56, 0x45, 0x52, 0x5f, 0x57,
	0x45, 0x42, 0x10, 0x64, 0x2a, 0xf5, 0x05, 0x0a, 0x0c, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x57,
	0x65, 0x62, 0x43, 0x6d, 0x64, 0x12, 0x17, 0x0a, 0x13, 0x43, 0x4d, 0x44, 0x5f, 0x47, 0x41, 0x54,
	0x45, 0x57, 0x41, 0x59, 0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x10, 0x00, 0x12, 0x1e,
	0x0a, 0x1a, 0x43, 0x4d, 0x44, 0x5f, 0x57, 0x45, 0x42, 0x5f, 0x55, 0x50, 0x44, 0x41, 0x54, 0x45,
	0x5f, 0x42, 0x41, 0x4c, 0x41, 0x4e, 0x43, 0x45, 0x5f, 0x52, 0x45, 0x51, 0x10, 0x01, 0x12, 0x1e,
	0x0a, 0x1a, 0x43, 0x4d, 0x44, 0x5f, 0x57, 0x45, 0x42, 0x5f, 0x55, 0x50, 0x44, 0x41, 0x54, 0x45,
	0x5f, 0x42, 0x41, 0x4c, 0x41, 0x4e, 0x43, 0x45, 0x5f, 0x52, 0x45, 0x50, 0x10, 0x02, 0x12, 0x1d,
	0x0a, 0x19, 0x43, 0x4d, 0x44, 0x5f, 0x57, 0x45, 0x42, 0x5f, 0x46, 0x52, 0x45, 0x45, 0x5a, 0x45,
	0x5f, 0x50, 0x4c, 0x41, 0x59, 0x45, 0x52, 0x5f, 0x52, 0x45, 0x51, 0x10, 0x03, 0x12, 0x1d, 0x0a,
	0x19, 0x43, 0x4d, 0x44, 0x5f, 0x57, 0x45, 0x42, 0x5f, 0x46, 0x52, 0x45, 0x45, 0x5a, 0x45, 0x5f,
	0x50, 0x4c, 0x41, 0x59, 0x45, 0x52, 0x5f, 0x52, 0x45, 0x50, 0x10, 0x04, 0x12, 0x21, 0x0a, 0x1d,
	0x43, 0x4d, 0x44, 0x5f, 0x57, 0x45, 0x42, 0x5f, 0x54, 0x41, 0x42, 0x4c, 0x45, 0x5f, 0x49, 0x4e,
	0x46, 0x4f, 0x52, 0x4d, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x52, 0x45, 0x51, 0x10, 0x05, 0x12,
	0x21, 0x0a, 0x1d, 0x43, 0x4d, 0x44, 0x5f, 0x57, 0x45, 0x42, 0x5f, 0x54, 0x41, 0x42, 0x4c, 0x45,
	0x5f, 0x49, 0x4e, 0x46, 0x4f, 0x52, 0x4d, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x52, 0x45, 0x50,
	0x10, 0x06, 0x12, 0x1f, 0x0a, 0x1b, 0x43, 0x4d, 0x44, 0x5f, 0x57, 0x45, 0x42, 0x5f, 0x50, 0x41,
	0x59, 0x5f, 0x43, 0x57, 0x5f, 0x43, 0x41, 0x4c, 0x4c, 0x42, 0x41, 0x43, 0x4b, 0x5f, 0x52, 0x45,
	0x51, 0x10, 0x07, 0x12, 0x1f, 0x0a, 0x1b, 0x43, 0x4d, 0x44, 0x5f, 0x57, 0x45, 0x42, 0x5f, 0x50,
	0x41, 0x59, 0x5f, 0x43, 0x57, 0x5f, 0x43, 0x41, 0x4c, 0x4c, 0x42, 0x41, 0x43, 0x4b, 0x5f, 0x52,
	0x45, 0x50, 0x10, 0x08, 0x12, 0x1f, 0x0a, 0x1b, 0x43, 0x4d, 0x44, 0x5f, 0x41, 0x50, 0x49, 0x5f,
	0x54, 0x41, 0x53, 0x4b, 0x5f, 0x53, 0x54, 0x41, 0x4e, 0x44, 0x54, 0x45, 0x58, 0x41, 0x53, 0x5f,
	0x52, 0x45, 0x51, 0x10, 0x09, 0x12, 0x1f, 0x0a, 0x1b, 0x43, 0x4d, 0x44, 0x5f, 0x41, 0x50, 0x49,
	0x5f, 0x54, 0x41, 0x53, 0x4b, 0x5f, 0x53, 0x54, 0x41, 0x4e, 0x44, 0x54, 0x45, 0x58, 0x41, 0x53,
	0x5f, 0x52, 0x45, 0x50, 0x10, 0x0a, 0x12, 0x23, 0x0a, 0x1f, 0x43, 0x4d, 0x44, 0x5f, 0x57, 0x45,
	0x42, 0x5f, 0x53, 0x59, 0x53, 0x5f, 0x4d, 0x45, 0x53, 0x53, 0x41, 0x47, 0x45, 0x5f, 0x54, 0x4f,
	0x5f, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x52, 0x45, 0x51, 0x10, 0x0b, 0x12, 0x23, 0x0a, 0x1f, 0x43,
	0x4d, 0x44, 0x5f, 0x57, 0x45, 0x42, 0x5f, 0x53, 0x59, 0x53, 0x5f, 0x4d, 0x45, 0x53, 0x53, 0x41,
	0x47, 0x45, 0x5f, 0x54, 0x4f, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x52, 0x45, 0x50, 0x10, 0x0c,
	0x12, 0x1c, 0x0a, 0x18, 0x43, 0x4d, 0x44, 0x5f, 0x57, 0x45, 0x42, 0x5f, 0x4d, 0x41, 0x49, 0x4c,
	0x5f, 0x54, 0x4f, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x52, 0x45, 0x51, 0x10, 0x0d, 0x12, 0x1d,
	0x0a, 0x19, 0x43, 0x4d, 0x44, 0x5f, 0x57, 0x45, 0x42, 0x5f, 0x4d, 0x41, 0x49, 0x4c, 0x5f, 0x54,
	0x4f, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x52, 0x45, 0x53, 0x50, 0x10, 0x0e, 0x12, 0x1a, 0x0a,
	0x16, 0x43, 0x4d, 0x44, 0x5f, 0x57, 0x45, 0x42, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x43, 0x4f,
	0x55, 0x4e, 0x54, 0x5f, 0x52, 0x45, 0x51, 0x10, 0x0f, 0x12, 0x1b, 0x0a, 0x17, 0x43, 0x4d, 0x44,
	0x5f, 0x57, 0x45, 0x42, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x5f,
	0x52, 0x45, 0x53, 0x50, 0x10, 0x10, 0x12, 0x1f, 0x0a, 0x1b, 0x43, 0x4d, 0x44, 0x5f, 0x57, 0x45,
	0x42, 0x5f, 0x55, 0x50, 0x44, 0x41, 0x54, 0x45, 0x5f, 0x50, 0x41, 0x52, 0x54, 0x49, 0x43, 0x45,
	0x53, 0x5f, 0x52, 0x45, 0x51, 0x10, 0x11, 0x12, 0x20, 0x0a, 0x1c, 0x43, 0x4d, 0x44, 0x5f, 0x57,
	0x45, 0x42, 0x5f, 0x55, 0x50, 0x44, 0x41, 0x54, 0x45, 0x5f, 0x50, 0x41, 0x52, 0x54, 0x49, 0x43,
	0x45, 0x53, 0x5f, 0x52, 0x45, 0x53, 0x50, 0x10, 0x12, 0x12, 0x21, 0x0a, 0x1d, 0x43, 0x4d, 0x44,
	0x5f, 0x57, 0x45, 0x42, 0x5f, 0x50, 0x48, 0x50, 0x5f, 0x32, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x5f,
	0x43, 0x4f, 0x4d, 0x4d, 0x4f, 0x4e, 0x5f, 0x52, 0x45, 0x51, 0x10, 0x13, 0x12, 0x22, 0x0a, 0x1e,
	0x43, 0x4d, 0x44, 0x5f, 0x57, 0x45, 0x42, 0x5f, 0x50, 0x48, 0x50, 0x5f, 0x32, 0x5f, 0x55, 0x53,
	0x45, 0x52, 0x5f, 0x43, 0x4f, 0x4d, 0x4d, 0x4f, 0x4e, 0x5f, 0x52, 0x45, 0x53, 0x50, 0x10, 0x14,
	0x12, 0x1c, 0x0a, 0x18, 0x43, 0x4d, 0x44, 0x5f, 0x57, 0x45, 0x42, 0x5f, 0x53, 0x59, 0x4e, 0x43,
	0x5f, 0x42, 0x41, 0x4c, 0x41, 0x4e, 0x43, 0x45, 0x5f, 0x52, 0x45, 0x51, 0x10, 0x15, 0x12, 0x1c,
	0x0a, 0x18, 0x43, 0x4d, 0x44, 0x5f, 0x57, 0x45, 0x42, 0x5f, 0x53, 0x59, 0x4e, 0x43, 0x5f, 0x42,
	0x41, 0x4c, 0x41, 0x4e, 0x43, 0x45, 0x5f, 0x52, 0x45, 0x50, 0x10, 0x16, 0x2a, 0x58, 0x0a, 0x0e,
	0x50, 0x48, 0x50, 0x5f, 0x32, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x43, 0x4d, 0x44, 0x12, 0x13,
	0x0a, 0x0f, 0x50, 0x48, 0x50, 0x5f, 0x43, 0x4d, 0x44, 0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49,
	0x44, 0x10, 0x00, 0x12, 0x17, 0x0a, 0x13, 0x50, 0x48, 0x50, 0x5f, 0x43, 0x4d, 0x44, 0x5f, 0x45,
	0x58, 0x41, 0x4d, 0x50, 0x4c, 0x45, 0x5f, 0x52, 0x45, 0x51, 0x10, 0x01, 0x12, 0x18, 0x0a, 0x14,
	0x50, 0x48, 0x50, 0x5f, 0x43, 0x4d, 0x44, 0x5f, 0x45, 0x58, 0x41, 0x4d, 0x50, 0x4c, 0x45, 0x5f,
	0x52, 0x45, 0x53, 0x50, 0x10, 0x02, 0x42, 0x20, 0x5a, 0x1e, 0x2e, 0x2f, 0x63, 0x6f, 0x6d, 0x2f,
	0x68, 0x69, 0x70, 0x6f, 0x6b, 0x65, 0x72, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x77, 0x65,
	0x62, 0x2f, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_web_msg_define_proto_rawDescOnce sync.Once
	file_web_msg_define_proto_rawDescData = file_web_msg_define_proto_rawDesc
)

func file_web_msg_define_proto_rawDescGZIP() []byte {
	file_web_msg_define_proto_rawDescOnce.Do(func() {
		file_web_msg_define_proto_rawDescData = protoimpl.X.CompressGZIP(file_web_msg_define_proto_rawDescData)
	})
	return file_web_msg_define_proto_rawDescData
}

var file_web_msg_define_proto_enumTypes = make([]protoimpl.EnumInfo, 3)
var file_web_msg_define_proto_msgTypes = make([]protoimpl.MessageInfo, 3)
var file_web_msg_define_proto_goTypes = []interface{}{
	(ServerType)(0),                // 0: com.hipoker.proto.web.define.ServerType
	(ServerWebCmd)(0),              // 1: com.hipoker.proto.web.define.ServerWebCmd
	(PHP_2_USER_CMD)(0),            // 2: com.hipoker.proto.web.define.PHP_2_USER_CMD
	(*PHP_2_USER_DATA_REQ)(nil),    // 3: com.hipoker.proto.web.define.PHP_2_USER_DATA_REQ
	(*PHP_2_USER_DATA_REP)(nil),    // 4: com.hipoker.proto.web.define.PHP_2_USER_DATA_REP
	(*PHP_2_USER_Example_REQ)(nil), // 5: com.hipoker.proto.web.define.PHP_2_USER_Example_REQ
}
var file_web_msg_define_proto_depIdxs = []int32{
	0, // [0:0] is the sub-list for method output_type
	0, // [0:0] is the sub-list for method input_type
	0, // [0:0] is the sub-list for extension type_name
	0, // [0:0] is the sub-list for extension extendee
	0, // [0:0] is the sub-list for field type_name
}

func init() { file_web_msg_define_proto_init() }
func file_web_msg_define_proto_init() {
	if File_web_msg_define_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_web_msg_define_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PHP_2_USER_DATA_REQ); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_web_msg_define_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PHP_2_USER_DATA_REP); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_web_msg_define_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PHP_2_USER_Example_REQ); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_web_msg_define_proto_rawDesc,
			NumEnums:      3,
			NumMessages:   3,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_web_msg_define_proto_goTypes,
		DependencyIndexes: file_web_msg_define_proto_depIdxs,
		EnumInfos:         file_web_msg_define_proto_enumTypes,
		MessageInfos:      file_web_msg_define_proto_msgTypes,
	}.Build()
	File_web_msg_define_proto = out.File
	file_web_msg_define_proto_rawDesc = nil
	file_web_msg_define_proto_goTypes = nil
	file_web_msg_define_proto_depIdxs = nil
}
